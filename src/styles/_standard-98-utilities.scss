@use "standard-00-variables" as *;

/**
 * @component Utility Classes
 * @category Utilities
 * @description Self-documenting utility classes following a consistent naming pattern.
 * All utilities use the format: [property]-[side/variant]-[size].
 * Size tokens: xs, s, base (default), l, xl, 2xl, 3xl
 * All utilities use logical properties for RTL support and !important for override capability.
 *
 * @pattern [property]-[side]-[size]
 * Examples:
 *   - .margin-top-xs (margin-top: var(--space-xs))
 *   - .padding-right-base (padding-right: var(--space))
 *   - .gap-l (gap: var(--space-l))
 *
 * @prop {class} .margin-* Margin utilities (top, right, bottom, left, block, inline)
 * @prop {class} .padding-* Padding utilities (top, right, bottom, left, block, inline)
 * @prop {class} .gap-* Gap utilities for flexbox/grid
 * @prop {class} .width-* Width utilities
 * @prop {class} .height-* Height utilities
 * @prop {class} .text-size-* Typography size utilities
 * @prop {class} .text-weight-* Font weight utilities
 * @prop {class} .text-align-* Text alignment utilities
 * @prop {class} .text-transform-* Text transformation utilities
 * @prop {class} .line-height-* Line height utilities
 * @prop {class} .text-color-* Text color utilities
 * @prop {class} .background-color-* Background color utilities
 * @prop {class} .border-color-* Border color utilities
 * @prop {class} .display-* Visibility utilities
 *
 * @example
 * // Spacing
 * <div class="margin-top-base padding-right-l">Spaced content</div>
 * <div class="margin-bottom-xs gap-s">Flex container</div>
 *
 * // Typography
 * <p class="text-size-small text-color-muted">Small muted text</p>
 * <h2 class="text-size-display text-align-center">Display heading</h2>
 *
 * // Layout
 * <div class="width-full height-auto display-hidden">Hidden element</div>
 *
 * @since 0.1.0
 */

/* =========================== */
/* MIXIN: Generate Scale      */
/* =========================== */

/**
 * Generate spacing utility classes for any CSS property
 * @param {string} $property CSS property name
 * @param {string} $prefix Class name prefix
 *
 * @example
 * @include generate-scale(margin-top, margin-top);
 * Creates: .margin-top-3xs, .margin-top-2xs, .margin-top-xs, .margin-top-s, .margin-top-base, etc.
 */
@mixin generate-scale($prefix, $property) {
    .#{$prefix}-none {
        #{$property}: 0 !important;
    }
    .#{$prefix}-auto {
        #{$property}: auto !important;
    }
    .#{$prefix}-3xs {
        #{$property}: var(--space-3xs) !important;
    }
    .#{$prefix}-2xs {
        #{$property}: var(--space-2xs) !important;
    }
    .#{$prefix}-xs {
        #{$property}: var(--space-xs) !important;
    }
    .#{$prefix}-s {
        #{$property}: var(--space-s) !important;
    }
    .#{$prefix} {
        #{$property}: var(--space) !important;
    }
    .#{$prefix}-l {
        #{$property}: var(--space-l) !important;
    }
    .#{$prefix}-xl {
        #{$property}: var(--space-xl) !important;
    }
    .#{$prefix}-2xl {
        #{$property}: var(--space-2xl) !important;
    }
    .#{$prefix}-3xl {
        #{$property}: var(--space-3xl) !important;
    }
}

/**
 * Generate special value utilities (auto, none, etc.)
 * @param {string} $property CSS property name
 * @param {string} $class-suffix Class name suffix
 * @param {string} $value CSS value to apply
 */
@mixin generate-special($property, $class-suffix, $value) {
    .#{$class-suffix} {
        #{$property}: #{$value} !important;
    }
}

/* =========================== */
/* MARGIN UTILITIES            */
/* =========================== */
@include generate-scale(mt, margin-top);
@include generate-scale(mr, margin-right);
@include generate-scale(mb, margin-bottom);
@include generate-scale(ml, margin-left);
@include generate-scale(mv, margin-block);
@include generate-scale(mh, margin-inline);
@include generate-scale(m, margin);

/* =========================== */
/* PADDING UTILITIES           */
/* =========================== */
@include generate-scale(pt, padding-top);
@include generate-scale(pr, padding-right);
@include generate-scale(pb, padding-bottom);
@include generate-scale(pl, padding-left);
@include generate-scale(pv, padding-block);
@include generate-scale(ph, padding-inline);
@include generate-scale(p, padding);

/* =========================== */
/* GAP UTILITIES               */
/* =========================== */
@include generate-scale(gap, gap);
@include generate-scale(column-gap, column-gap);

/* =========================== */
/* WIDTH UTILITIES             */
/* =========================== */

@include generate-scale(width, width);

.width-auto {
    width: auto !important;
}
.width-full {
    width: 100% !important;
}
.width-screen {
    width: 100vw !important;
}
.width-min {
    width: min-content !important;
}
.width-max {
    width: max-content !important;
}
.width-fit {
    width: fit-content !important;
}

/* Min Width */
@include generate-scale(min-width, min-width);
.min-width-0 {
    min-width: 0 !important;
}
.min-width-full {
    min-width: 100% !important;
}
.min-width-screen {
    min-width: 100vw !important;
}

/* Max Width */
@include generate-scale(max-width, max-width);
.max-width-none {
    max-width: none !important;
}
.max-width-full {
    max-width: 100% !important;
}
.max-width-screen {
    max-width: 100vw !important;
}

/* =========================== */
/* HEIGHT UTILITIES            */
/* =========================== */

@include generate-scale(height, height);

.height-0 {
    height: 0 !important;
}
.height-auto {
    height: auto !important;
}
.height-full {
    height: 100% !important;
}
.height-screen {
    height: 100vh !important;
}
.height-min {
    height: min-content !important;
}
.height-max {
    height: max-content !important;
}
.height-fit {
    height: fit-content !important;
}

/* Min Height */
@include generate-scale(min-height, min-height);
.min-height-0 {
    min-height: 0 !important;
}
.min-height-full {
    min-height: 100% !important;
}
.min-height-screen {
    min-height: 100vh !important;
}

/* Max Height */
@include generate-scale(max-height, max-height);
.max-height-none {
    max-height: none !important;
}
.max-height-full {
    max-height: 100% !important;
}
.max-height-screen {
    max-height: 100vh !important;
}

/* =========================== */
/* TEXT SIZE UTILITIES         */
/* =========================== */

/**
 * Typography size utilities
 * Moved from standard-03-typography.scss for better layer organization
 */

.small {
    font-size: var(--scale-s);
}

.smaller {
    font-size: var(--scale-xs);
}

.micro {
    font-size: var(--scale-2xs);
}

.nano {
    font-size: var(--scale-3xs);
}

.small *,
.smaller *,
.micro,
.nano {
    font-size: inherit;
}

.tight {
    line-height: var(--font-density-s);
}

/* =========================== */
/* FONT FAMILY UTILITIES       */
/* =========================== */

/**
 * Font family utility classes
 * Moved from standard-03-typography.scss
 */

.monospace {
    font-family: var(--font-monospace), Inconsolata, Menlo, monospace;
    font-feature-settings: var(--font-monospace-feature);
    font-variation-settings: var(--font-monospace-variation);
    font-size: var(--scale-s);
}

.ui,
.interface {
    font-family: var(--font-interface), system-ui, sans-serif;
    font-variation-settings: var(--font-interface-variation);
    font-feature-settings: var(--font-interface-feature);
}

/* =========================== */
/* FONT WEIGHT UTILITIES       */
/* =========================== */

.bold {
    font-weight: var(--bold-weight);
}

.normal {
    font-weight: var(--font-weight);
}

/* =========================== */
/* LINE HEIGHT UTILITIES       */
/* =========================== */

/**
 * Line height utilities for controlling text spacing
 */

.lh-none {
    line-height: 1;
}

.lh-tight {
    line-height: var(--font-density-s);
}

.lh-base {
    line-height: var(--font-density);
}

.lh-relaxed {
    line-height: 1.6;
}

/* =========================== */
/* TEXT ALIGNMENT UTILITIES    */
/* =========================== */

.left {
    text-align: left !important;
}

.center {
    text-align: center !important;
}

.right {
    text-align: right !important;
}

.justify {
    text-align: justify !important;
}

/* =========================== */
/* TEXT TRANSFORMATION         */
/* =========================== */

.uppercase {
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.lowercase {
    text-transform: lowercase;
}

.capitalize {
    text-transform: capitalize;
}

.text-transform-none {
    text-transform: none;
}

.no-wrap {
    white-space: nowrap !important;
}

.ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    max-width: 100%;
}

/* =========================== */
/* TEXT COLOR UTILITIES        */
/* =========================== */

/**
 * Text color utilities
 * Moved from standard-02-color.scss
 */

.muted {
    color: var(--color-muted) !important;
}

.subtle {
    color: var(--color-subtle) !important;
}

.accent {
    color: var(--color-accent) !important;
}

.red {
    color: var(--color-red) !important;
}
.orange {
    color: var(--color-orange) !important;
}
.yellow {
    color: var(--color-yellow) !important;
}
.green {
    color: var(--color-green) !important;
}
.cyan {
    color: var(--color-cyan) !important;
}
.blue {
    color: var(--color-blue) !important;
}
.purple {
    color: var(--color-purple) !important;
}
.pink {
    color: var(--color-pink) !important;
}
.bg-red {
    background-color: var(--color-red) !important;
}
.bg-orange {
    background-: var(--color-orange) !important;
}
.bg-yellow {
    background-color: var(--color-yellow) !important;
}
.bg-green {
    background-color: var(--color-green) !important;
}
.bg-cyan {
    background-color: var(--color-cyan) !important;
}
.bg-blue {
    background-color: var(--color-blue) !important;
}
.bg-purple {
    background-color: var(--color-purple) !important;
}
.bg-pink {
    background-color: var(--color-pink) !important;
}

/* =========================== */
/* BACKGROUND COLOR UTILITIES  */
/* =========================== */

.bg-secondary {
    background: var(--color-background-secondary) !important;
}

/* =========================== */
/* BORDER COLOR UTILITIES      */
/* =========================== */

.border {
    border: var(--border) !important;
}

.border-accent {
    border: var(--border-accent) !important;
}

/* =========================== */
/* DISPLAY & VISIBILITY       */
/* =========================== */

/**
 * Display utilities for showing/hiding content
 */

.hidden {
    display: none;
}

.block {
    display: block;
}

.inline {
    display: inline;
}

.inline-block {
    display: inline-block;
}

.flex {
    display: flex;
}

/**
 * Visually hidden (accessible hiding for screen readers)
 */
.visibility-screen-reader-only,
.visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
}

/* =========================== */
/* LAYOUT UTILITIES            */
/* =========================== */

/**
 * Centering and layout helpers
 */

.center-content {
    display: flex;
    align-items: center;
    justify-content: center;
}

.center-horizontally {
    margin-left: auto;
    margin-right: auto;
}

.center-vertically {
    display: flex;
    align-items: center;
}

/* =========================== */
/* RHYTHM UTILITIES            */
/* =========================== */

/**
 * Rhythm-aware utilities for consistent spacing
 */

.rhythm-tight {
    --rhythm-multiplier: var(--space-s);
}

.rhythm-relaxed {
    --rhythm-multiplier: var(--space-l);
}

/* =========================== */
/* FALLBACK SUPPORT            */
/* =========================== */

/**
 * Fallback for browsers without CSS Grid or modern layout support
 */

@supports not (display: grid) {
    .rhythm {
        display: block;

        > * {
            margin-block-end: calc(
                var(--space-block) * var(--rhythm-multiplier)
            );
        }

        > :last-child {
            margin-block-end: 0;
        }
    }
}

/* =========================== */
/* READING WIDTH UTILITIES     */
/* =========================== */

/**
 * Width constraints for optimal reading experience
 */

.line-xs {
    max-width: var(--line-width-xs);
}

.ine-s {
    max-width: var(--line-width-s);
}

.line {
    max-width: var(--line-width);
}

.line-l {
    max-width: var(--line-width-l);
}

.line-xl {
    max-width: var(--line-width-xl);
}

.line-full {
    max-width: var(--line-width-full);
}

/* =========================== */
/* BODY PADDING NEGATION       */
/* =========================== */

/**
 * Utilities to negate body padding for full-width elements
 * Useful for footers, headers, or other elements that should extend to viewport edges
 *
 * .negate-body-padding — Negates horizontal body padding only
 * .negate-body-padding-full — Negates all body padding (horizontal + bottom)
 * .negate-body-padding-bottom — Negates extra bottom body padding (1.5× multiplier)
 *
 * Usage:
 * <footer class="negate-body-padding-full">
 *   Full-width footer content
 * </footer>
 */

/**
 * Negate horizontal body padding (left/right)
 * Allows full-width backgrounds while keeping vertical padding
 */
.body-p-neg {
    margin-inline: calc(var(--space) * var(--body-padding-multiplier) * -1);
    padding-inline: calc(var(--space) * var(--body-padding-multiplier));

    @media (max-width: #{$small}) {
        margin-inline: calc(
            var(--space) * var(--body-mobile-padding-multiplier) * -1
        );
        padding-inline: calc(
            var(--space) * var(--body-mobile-padding-multiplier)
        );
    }
}

/**
 * Negate bottom body padding (extra 1.5× multiplier)
 * Removes the generous bottom padding applied to body elements
 * Useful when you want footer to sit flush at bottom
 */
.body-p-neg-footer {
    margin-block-end: calc(
        (var(--space) * var(--body-padding-multiplier) * 1.5) * -1
    );

    @media (max-width: #{$small}) {
        margin-block-end: calc(
            (var(--space) * var(--body-mobile-padding-multiplier) * 1.5) * -1
        );
    }
}

.body-p-neg-header {
    margin-block-start: calc(
        (var(--space) * var(--body-padding-multiplier) * 1) * -1
    );

    @media (max-width: #{$small}) {
        margin-block-start: calc(
            (var(--space) * var(--body-mobile-padding-multiplier) * 1) * -1
        );
    }
}

/**
 * Negate all body padding (horizontal + bottom)
 * Full-width element that extends to viewport edges on all sides except top
 * Combines .negate-body-padding + .negate-body-padding-bottom
 */
.body-p-neg-full {
    margin-inline: calc(var(--space) * var(--body-padding-multiplier) * -1);
    margin-block-end: calc(
        (var(--space) * var(--body-padding-multiplier) * 1.5) * -1
    );
    padding-inline: calc(var(--space) * var(--body-padding-multiplier));

    @media (max-width: #{$small}) {
        margin-inline: calc(
            var(--space) * var(--body-mobile-padding-multiplier) * -1
        );
        margin-block-end: calc(
            (var(--space) * var(--body-mobile-padding-multiplier) * 1.5) * -1
        );
        padding-inline: calc(
            var(--space) * var(--body-mobile-padding-multiplier)
        );
    }
}

/* =========================== */
/* RESPONSIVE BREAKPOINTS      */
/* =========================== */

/**
 * @component Responsive Display Utilities
 * @category Utilities
 * @description Show/hide elements at different screen sizes.
 * Uses SCSS breakpoint variables for consistent responsive behavior.
 *
 * Classes:
 * - .sm-hidden: Hidden on small screens (≤768px)
 * - .sm-only: Visible only on small screens (≤768px)
 * - .md-hidden: Hidden on medium screens (769px-1024px)
 * - .md-only: Visible only on medium screens (769px-1024px)
 * - .lg-hidden: Hidden on large screens (≥1024px)
 * - .lg-only: Visible only on large screens (≥1024px)
 *
 * @example
 * <!-- Show on mobile, hide on desktop -->
 * <div class="sm-only">Mobile content</div>
 *
 * <!-- Hide on mobile, show on desktop -->
 * <div class="sm-hidden">Desktop content</div>
 *
 * <!-- Show only on tablets -->
 * <div class="md-only">Tablet content</div>
 *
 * @since 0.10.53
 */

/* Small screens (mobile): ≤768px */
@media (max-width: $small) {
    .sm\:hidden {
        display: none !important;
    }
    .sm\:only {
        display: inherit !important;
    }
    .md\:only {
        display: none !important;
    }
    .lg\:only {
        display: none !important;
    }
}

/* Medium screens (tablet): 769px-1024px */
@media (min-width: calc($small + 1px)) and (max-width: $large) {
    .md\:hidden {
        display: none !important;
    }
    .sm\:only {
        display: none !important;
    }
    .md\:only {
        display: inherit !important;
    }
    .lg\:only {
        display: none !important;
    }
}

/* Large screens (desktop): ≥1024px */
@media (min-width: calc($large + 1px)) {
    .lg\:hidden {
        display: none !important;
    }
    .sm\:only {
        display: none !important;
    }
    .md\:only {
        display: none !important;
    }
    .lg\:only {
        display: inherit !important;
    }
}

/* =========================== */
/* MULTI-COLUMN FLOW UTILITIES */
/* =========================== */

/**
 * @component Multi-Column Flow Utilities
 * @category Utilities
 * @description CSS multi-column layout utilities for flowing text across columns.
 * Useful for magazine-style layouts, masonry grids, and dense text content.
 * Automatically stacks to single column on mobile for readability.
 *
 * Classes:
 * - .columns-2, .columns-3, .columns-4: Fixed column count
 * - .columns-auto: Automatic columns based on optimal width
 * - .columns-gap-tight, .columns-gap-wide: Column gap variants
 * - .columns-keep: Prevent breaks inside elements
 * - .columns-rule, .columns-rule-accent: Vertical lines between columns
 *
 * @example
 * <!-- Two-column layout -->
 * <div class="flow-2">
 *   <p>Content flows across two columns...</p>
 * </div>
 *
 * <!-- Auto-responsive columns with rules -->
 * <div class="flow-auto flow-rule">
 *   <p>Automatically creates optimal columns...</p>
 * </div>
 *
 * <!-- Prevent element from breaking across columns -->
 * <div class="flow-3">
 *   <blockquote class="flow-keep">Stays together</blockquote>
 * </div>
 *
 * @since 0.1.0
 */

/* Fixed column counts */
.columns,
.columns-2 {
    columns: 2;
    column-gap: var(--grid-gap);
}

.columns-3 {
    columns: 3;
    column-gap: var(--grid-gap);
}

.columns-4 {
    columns: 4;
    column-gap: var(--grid-gap);
}

/* Responsive column count based on container width */
.columns-auto {
    columns: auto;
    column-width: var(--line-width-s); /* ~32rem optimal column width */
    column-gap: var(--grid-gap);
}

[class|="columns"].tight {
    column-gap: var(--space-s);
}

[class|="columns"].relaxed {
    column-gap: var(--space-l);
}
/* Column gap variants */
.columns-gap-tight {
    column-gap: var(--space-s);
}

.columns-gap-wide {
    column-gap: var(--space-l);
}

/* Prevent breaks inside elements */
.columns-keep {
    break-inside: avoid;
    page-break-inside: avoid; /* Legacy support */
}

/* Column rules (vertical lines between columns) */
.columns-rule {
    column-rule: var(--border);
}

.columns-rule-accent {
    column-rule: 1px solid var(--color-accent);
}

/* Responsive breakpoints */
@media (max-width: $small) {
    .columns-2,
    .columns-3,
    .columns-4 {
        columns: 1; /* Stack on mobile */
    }
}

@media (min-width: calc($small + 1px)) and (max-width: $large) {
    .columns-3,
    .columns-4 {
        columns: 2; /* Reduce columns on tablets */
    }
}

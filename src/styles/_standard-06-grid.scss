@use "standard-00-variables" as *;

/**
 * @component Grid System
 * @category Layout
 * @description 12-column Swiss-style responsive grid with flexible gaps and alignment.
 * Uses CSS Grid with logical properties for RTL support. Supports nested grids,
 * asymmetric layouts, gap variants (tight/normal/wide), and responsive column changes.
 * All gaps align to the vertical rhythm system.
 *
 * @prop {class} .grid 12-column grid container
 * @prop {class} .grid-2 through .grid-12 Predefined grid layouts (2-12 columns)
 * @prop {class} .col-1 through .col-12 Column span modifiers
 * @prop {class} .col-sm-* Responsive columns at 768px+
 * @prop {class} .col-lg-* Responsive columns at 1024px+
 * @prop {class} .start-{n} Start column position (1-12)
 * @prop {class} .gap-tight Tight gap (1/4 space)
 * @prop {class} .gap-wide Wide gap (1.5 space)
 *
 * @example
 * // Basic 12-column grid with equal width columns
 * <div class="grid">
 *   <div class="col-3">Item 1</div>
 *   <div class="col-3">Item 2</div>
 *   <div class="col-3">Item 3</div>
 *   <div class="col-3">Item 4</div>
 * </div>
 *
 * // Responsive grid layout
 * <div class="grid">
 *   <div class="col-12 col-sm-6 col-lg-3">Card</div>
 *   <div class="col-12 col-sm-6 col-lg-3">Card</div>
 * </div>
 *
 * // Main content + sidebar layout
 * <div class="grid">
 *   <div class="col-8">Main content</div>
 *   <div class="col-4">Sidebar</div>
 * </div>
 *
 * @since 0.1.0
 * @see standard-04-rhythm.scss
 */

/* Harmony Grid (unified) — 12-col Swiss-style grid with rhythm-native gaps
   Use this as your single grid across the site (replaces old .h-grid API).
   Relies on logical properties and Harmony tokens: --space, calc(var(--space) / 4), --space-l, borders, etc.
*/

/* Grid container */
.grid {
    display: grid;
    grid-auto-columns: 1fr;
    grid-auto-flow: column;
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
}

/* Gap variants aligned to rhythm */
.grid.tight {
    --grid-gap: var(--space-3xs);
    --grid-row-gap: var(--space-s);
}
.grid.relaxed {
    --grid-gap: var(--space-l);
    --grid-row-gap: var(--space-xl);
}

/* Spans 1..12 */
@for $i from 1 through 12 {
    .grid-#{$i} {
        display: grid;
        grid-template-columns: repeat(#{$i}, 1fr);
        column-gap: var(--grid-gap);
        row-gap: var(--grid-row-gap);
    }
}

/* Spans 1..12 */
@for $i from 1 through 12 {
    .col-#{$i} {
        grid-column: span #{$i};
        margin-block-end: 0;
    }
    .start-#{$i} {
        grid-column-start: #{$i};
    }
}

/* Responsive spans/starts: md ≥ #{$small}, lg ≥ #{$large} */
@media (max-width: #{$small}) {
    @for $i from 1 through 12 {
        .sm\:grid-#{$i} {
            display: grid;
            grid-template-columns: repeat(#{$i}, 1fr);
            column-gap: var(--grid-gap);
            row-gap: var(--grid-row-gap);
        }
        .sm\:col-#{$i} {
            grid-column: span #{$i};
        }
        .sm\:start-#{$i} {
            grid-column-start: #{$i};
        }
    }
    .sm\:col-row {
        grid-column: 1 / -1;
    }
}
@media (min-width: #{$large}) {
    @for $i from 1 through 12 {
        .lg\:grid-#{$i} {
            display: grid;
            grid-template-columns: repeat(#{$i}, 1fr);
            column-gap: var(--grid-gap);
            row-gap: var(--grid-row-gap);
        }
        .lg\:col-#{$i} {
            grid-column: span #{$i};
        }
        .lg\:start-#{$i} {
            grid-column-start: #{$i};
        }
    }
    .lg\:col-row {
        grid-column: 1 / -1;
    }
}

/* Full-span helper (replaces old .h-col-full) */
.col-row,
.col-full {
    grid-column: 1 / -1;
    margin-block-end: 0;
}

hr.col-row {
    margin-block: var(--space);
}

/* Ergonomic presets (optional sugar) */
.col-half {
    grid-column: span 6;
} /* 1/2 */
.col-third {
    grid-column: span 4;
} /* 1/3 */
.col-two3 {
    grid-column: span 8;
} /* 2/3 */
.col-quarter {
    grid-column: span 3;
} /* 1/4 */

/* Rhythm inside grid items: apply to a cell containing prose */
.grid .rhythm > * {
    margin-block-end: var(--space);
}

/* Free columns: place anywhere with CSS vars or utility shorthands */
.free-col {
    /* Defaults; authors override via CSS vars or utilities */
    --start: auto; /* 1..12 or auto */
    --span: 3; /* 1..12 */

    grid-column: var(--start) / span var(--span);

    /* If the free column contains prose, opt-in to rhythm */
    &.rhythm > * {
        margin-block-end: var(--space);
    }
}

/* Utility-class interface to set the CSS vars (ergonomic authoring) */
@for $i from 1 through 12 {
    .span-#{$i} {
        --span: #{$i};
    }
    .startv-#{$i} {
        --start: #{$i};
    } /* 'startv' to avoid clash with .start- utilities */
}

/* Responsive overrides for the var-based API */
@media (max-width: #{$small}) {
    @for $i from 1 through 12 {
        .sm\:span-#{$i} {
            --span: #{$i};
        }
        .sm\:startv-#{$i} {
            --start: #{$i};
        }
    }
}
@media (min-width: #{$large}) {
    @for $i from 1 through 12 {
        .lg\:span-#{$i} {
            --span: #{$i};
        }
        .lg\:startv-#{$i} {
            --start: #{$i};
        }
    }
}

/* Mobile fallback: stack free columns full-width */
@media (max-width: #{$small}) {
    .free-col {
        grid-column: 1 / -1;
    }
}

/* Optional: sticky marginalia variant for editorial layouts */
.free-col.sticky {
    position: sticky;
    inset-block-start: var(--space);
    align-self: start;
    z-index: 1;
}

/* Row gap utilities for grid system */
.grid.no-row-gap {
    row-gap: 0;
}

.grid.row-gap-xs {
    --grid-row-gap: var(--space-xs);
}

.grid.row-gap-s {
    --grid-row-gap: var(--space-s);
}

.grid.row-gap-l {
    --grid-row-gap: var(--space-l);
}

.grid.row-gap-xl {
    --grid-row-gap: var(--space-xl);
}

/* Column gap utilities for grid system */
.grid.no-col-gap {
    column-gap: 0;
}

.grid.col-gap-xs {
    --grid-gap: var(--space-xs);
}

.grid.col-gap-s {
    --grid-gap: var(--space-s);
}

.grid.col-gap-l {
    --grid-gap: var(--space-l);
}

.grid.col-gap-xl {
    --grid-gap: var(--space-xl);
}

/* Common layout containers inherit rhythm to cascade deeper */
.box,
.grid > .col-1,
.grid > .col-2,
.grid > .col-3,
.grid > .col-4,
.grid > .col-5,
.grid > .col-6,
.grid > .col-7,
.grid > .col-8,
.grid > .col-9,
.grid > .col-10,
.grid > .col-11,
.grid > .col-12,
.grid > .col-half,
.grid > .col-third,
.grid > .col-two3,
.grid > .col-quarter,
.grid > .col-full {
    > * {
        margin-block: 0;
        margin-block-end: calc(var(--space) * var(--rhythm-multiplier));
    }

    > :last-child {
        margin-block-end: 0;
    }

    > :first-child {
        margin-block-start: 0;
    }
}

[class|="grid"] .container-hero {
    margin-inline: 0;
}

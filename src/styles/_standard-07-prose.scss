@use "standard-00-variables" as *;

/**
 * @component Prose Layout System
 * @category Layout
 * @description Prose-focused layout system for optimal reading experience with proper
 * line lengths based on typography research (60-75 characters). Uses CSS Grid with
 * responsive content columns for sidebars, accents, and featured content.
 * Inspired by fine-art typography and classical book design principles.
 *
 * @prop {class} .prose Main article/content container for readable prose
 * @prop {class} .small Narrow sidebar width container
 * @prop {class} .accent Accent container with background color
 * @prop {class} .feature Featured content with larger spacing
 * @prop {class} .hero Full-width container
 * @prop {variable} --line-width-xs Extra small (24rem / 384px)
 * @prop {variable} --line-width-s Small (32rem / 512px)
 * @prop {variable} --line-width-m Medium (42rem / 672px) - default
 * @prop {variable} --line-width-l Large (50rem / 800px)
 * @prop {variable} --line-width-xl Extra large (60rem / 960px)
 *
 * @example
 * // Standard article with proper reading width
 * <article class="prose">
 *   <h1>Article Title</h1>
 *   <p>Content here stays within optimal reading width...</p>
 * </article>
 *
 * // Narrow sidebar content
 * <div class="prose small">
 *   <p>Short form content</p>
 * </div>
 *
 * // Featured content with emphasis
 * <section class="prose feature">
 *   <blockquote>Important quote with extra space</blockquote>
 * </section>
 *
 * @since 0.1.0
 * @see https://www.rsub.com/blog/how-long-should-a-line-of-text-be/
 */

/* Prose Layout Design Tokens - Using logical properties */
:root {
    /* Content area tokens */
    --line-width-xs: 24rem; /* ~384px - narrow sidebar content */
    --line-width-s: 32rem; /* ~512px - short form content */
    --line-width-m: 42rem; /* ~672px - optimal reading (60-75 chars) - DEFAULT */
    --line-width-l: 50rem; /* ~800px - wider articles */
    --line-width-xl: 60rem; /* ~960px - documentation/wide content */
    --line-width-full: calc(
        100vw - (var(--space) * 2)
    ); /* responsive full width with margins */
    --line-width: var(--line-width-m);

    /* Layout grid tokens */
    --gap: clamp(var(--space), 6%, var(--space-xl));
    --content: min(var(--line-width), 100% - var(--gap) * 2); /* ← FIXED */
    --content-small: calc(var(--space) * var(--rhythm-multiplier-block));
    --content-accent: minmax(0, var(--space-l));
    --content-feature: minmax(0, var(--space-2xl));
    --content-hero: minmax(0, 1fr);
}

@media (max-width: #{$small}) {
    :root {
        --gap: 0;
    }
}

/* Prose Layout System - Article content grid and positioning */
/* Inspired by fine-art typography and book design principles */

:where(.prose) {
    display: grid;
    grid-template-columns:
        [hero-start] var(--content-hero)
        [feature-start] var(--content-feature)
        [accent-start] var(--content-accent)
        [content-start] var(--content) [content-end]
        var(--content-accent) [accent-end]
        var(--content-feature) [feature-end]
        var(--content-hero) [hero-end];

    transition: grid-template-columns 0.3s ease-out;

    position: relative;
    z-index: var(--z-base);
    /* Default content positioning */
    > * {
        grid-column: content;
    }

    .container-small {
        grid-column: content;
        margin-inline: var(--content-small);
    }

    table,
    .table-wrapper,
    .container-accent {
        grid-column: accent;
        margin-inline: 0;
    }

    .container-feature {
        grid-column: feature;
        margin-inline: 0;
    }

    .container-hero {
        grid-column: hero;
        margin-inline: calc(
            (var(--space) * var(--body-padding-multiplier)) * -1
        );
        /*padding-inline: calc(var(--space) * var(--body-padding-multiplier));*/
        > * {
            margin-inline: 0;
        }
    }

    /* Image gallery layout */
    &:not(.no-grid) {
        p:has(img) {
            display: flex;
            gap: calc(var(--space) / 4);
            border-radius: var(--border-radius);
        }

        p:has(img) > * {
            flex: 1 1 auto;
            min-width: 1%;
            min-height: 1%;
            object-fit: cover;
        }

        p:has(img) img {
            flex-grow: 0; /* prevents the image from stretching to fill */
        }

        p:has(video) > * {
            flex: 1 1 auto;
            min-width: 1%;
            min-height: 1%;
            object-fit: cover;
        }

        p:has(img) img,
        p:has(img) img:first-child,
        p:has(img) img:last-child {
            margin-inline: auto;
        }

        p:has(img) br {
            display: none;
        }

        .callout p:has(img),
        .callout p:has(img) br {
            display: block;
        }
    }

    h1,
    > h1:where(:first-child) {
        margin-block-start: calc(var(--space-3xl) * var(--rhythm-multiplier));
        margin-block-end: calc(var(--space-xl) * var(--rhythm-multiplier));
    }

    h2 {
        margin-block-start: calc(var(--space-2xl) * var(--rhythm-multiplier));
        margin-block-end: calc(var(--space-xl) * var(--rhythm-multiplier));
    }

    h3 {
        margin-block-start: calc(var(--space-xl) * var(--rhythm-multiplier));
    }

    h4 {
        margin-block-start: calc(var(--space-l) * var(--rhythm-multiplier));
    }

    h5 {
        margin-block-start: calc(var(--space) * var(--rhythm-multiplier));
        margin-block-end: calc(var(--space-s) * var(--rhythm-multiplier));
    }

    h6 {
        margin-block-start: calc(var(--space) * var(--rhythm-multiplier));
        margin-block-end: calc(var(--space-xs) * var(--rhythm-multiplier));
    }

    hr {
        margin-inline: calc(var(--space-l) * var(--rhythm-multiplier));
    }

    /* Heading after heading gets reduced spacing */
    h1 + h2,
    h2 + h3,
    h3 + h4,
    h4 + h5,
    h5 + h6 {
        margin-block-start: calc(
            var(--space-xs) * var(--rhythm-multiplier) * -1
        );
    }
    hr + h2,
    hr + h3,
    hr + h4,
    hr + h5,
    hr + h6 {
        margin-block-start: 0;
    }
    blockquote + h2,
    blockquote + h3,
    blockquote + h4,
    blockquote + h5,
    blockquote + h6,
    pre + h2,
    pre + h3,
    pre + h4,
    pre + h5,
    pre + h6 {
        margin-block-start: var(--space);
    }
    h2 + pre,
    h3 + pre,
    h4 + pre {
        margin-block-start: var(--space);
    }

    :where(
        section,
        aside,
        header,
        footer,
        main,
        nav,
        blockquote,
        pre,
        figure,
        .box,
        .box-inset,
        .callout,
        .grid,
        .container-small,
        .container-accent,
        .container-feature,
        .container-hero
    ) {
        > :is(h1, h2, h3, h4, h5, h6):where(:first-child) {
            margin-block-start: 0; /* No top margin */
            /* Keep the heading's natural bottom margin */
        }
    }

    /* Note: Page's main title h1:first-child retains spacing via direct child selector */
    /* The > h1:first-child selector in h1 rule ensures it overrides rhythm's > * margin-reset */

    /* Basic media styling */
    img,
    audio,
    video {
        margin: 0;
        margin-inline: auto;
        max-inline-size: 100%;
        border-radius: var(--border-radius);
        border: var(--border);
    }

    .callout,
    blockquote,
    pre,
    figure,
    p:has(img) {
        margin-inline: var(--content-small);
    }
    @media (max-width: #{$mobile}) {
        .container-small,
        .callout,
        blockquote,
        pre,
        figure,
        p:has(img) {
            margin-inline: 0;
        }
    }

    /* Mermaid diagrams */
    .mermaid {
        margin-block-end: var(--space);
        margin-inline: auto;
        padding: var(--space);
    }

    p img {
        max-inline-size: 100%;
    }
}

.width-xs {
    max-width: var(--line-width-xs);
}
.width-s {
    max-width: var(--line-width-s);
}
.width-m {
    max-width: var(--line-width-m);
}
.width-l {
    max-width: var(--line-width-l);
}
.width-xl {
    max-width: var(--line-width-xl);
}
.width-full {
    max-width: var(--line-width-full);
}

/* Animation keyframes */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(0.5rem);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

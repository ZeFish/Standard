@use "standard-00-variables" as *;
/* Enhanced Bulletproof Rhythm System - Margin Collapse Safe */

/* ===== Harmony Base (containers and resets) ===== */
:where(*, *::before, *::after) {
    box-sizing: border-box;
}

/* ===== BULLETPROOF RHYTHM SYSTEM ===== */
:where(body:not(.no-rhythm)) {
    margin: 0;
    padding: calc(var(--space) * var(--body-padding-multiplier));
    padding-bottom: calc((var(--space) * var(--body-padding-multiplier) * 1.5));
    [id] {
        scroll-margin-top: calc(
            var(--space) * var(--body-padding-multiplier)
        ); /* Adjust value as needed */
    }
}
@media (max-width: #{$small}) {
    :where(body:not(.no-rhythm)) {
        margin: 0;
        padding: calc(var(--space) * var(--body-mobile-padding-multiplier));
        padding-bottom: calc(
            (var(--space) * var(--body-mobile-padding-multiplier) * 1.5)
        );
        [id] {
            scroll-margin-top: calc(
                var(--space) * var(--body-mobile-padding-multiplier)
            ); /* Adjust value as needed */
        }
    }
}

:where(body:not(.no-rhythm)),
:where(.rhythm) {
    /* Rhythm control - can be overridden per instance */

    /* Modern margin collapse prevention */
    display: flow-root;

    /* Apply rhythm spacing to all direct children */
    > * {
        margin-block-start: 0;
        margin-block-end: calc(var(--space) * var(--rhythm-multiplier));
    }

    /* Enhanced spacing relationships for typography */
    @include apply-rhythm {
        margin-block-start: 0;
        margin-block-end: calc(var(--space) * var(--rhythm-multiplier));
    }

    .rhythm {
        --rhythm-multiplier: 1; /* Reset for nested contexts */
    }

    /* Special blocks get generous spacing (2× rhythm) */
    /* Layout containers get double spacing for emphasis */
    @include apply-rhythm-block {
        /* Subtract regular margin to avoid double-spacing */
        margin-block-start: calc(
            (var(--space) * var(--rhythm-multiplier-block)) -
                (var(--space) * var(--rhythm-multiplier))
        );
        /* Bottom margin uses the block multiplier */
        margin-block-end: calc(var(--space) * var(--rhythm-multiplier-block));
    }

    * > :last-child {
        margin-block-end: 0;
    }

    /* =========================== */
    /* TYPOGRAPHIC NUANCES         */
    /* =========================== */

    hr {
        --rhythm-multiplier-block: 3;
    }

    /* Adjacent images get reduced spacing */
    p:has(img) + p:has(img) {
        margin-block-start: calc(
            (var(--space-l) * var(--rhythm-multiplier) * -1) +
                (var(--space) / 4)
        ) !important;
    }

    /* Reset first-child spacing for special blocks */
    blockquote > :first-child,
    pre > :first-child,
    figure > :first-child,
    .callout .callout-content > :first-child {
        margin-block-start: 0;
    }
    blockquote > :last-child,
    pre > :last-child,
    figure > :last-child,
    .callout .callout-content > :last-child {
        margin-block-end: 0;
    }

    /* =========================== */
    /* TYPOGRAPHY ELEMENTS         */
    /* =========================== */

    /* Typography-specific spacing adjustments */

    /* =========================== */
    /* CONTENT ELEMENTS            */
    /* =========================== */

    /* Lists */
    ul,
    ol {
        list-style: none;
        padding-inline-start: var(--space);
    }
    p + ul,
    p + ol {
        margin-block-start: calc(
            var(--space) * -0.5 * var(--rhythm-multiplier)
        );
    }

    ol ul,
    ol ol,
    ul ul,
    ul ol {
        margin-block-start: calc(var(--space-xs) * var(--rhythm-multiplier));
    }

    /* Nested lists */
    li > ul,
    li > ol {
        padding-inline-start: var(--space);
        margin-block-end: 0;
    }

    /* List items */
    li {
        position: relative;
        margin: 0;
        padding-inline-start: 0;
        margin-block-end: calc(var(--space-xs) * var(--rhythm-multiplier));
    }

    /* Unordered list bullets */
    ul > li::before {
        content: "•";
        position: absolute;
        left: calc(var(--space) * -1);
        width: var(--space);
        text-align: center;
        color: var(--color-subtle);
    }

    /* Ordered list numbers */
    ol {
        counter-reset: ol-counter;
    }

    ol > li {
        counter-increment: ol-counter;
    }

    ol > li::before {
        content: counter(ol-counter) ".";
        position: absolute;
        left: calc(var(--space) * -1.75);
        text-align: right;
        line-height: inherit;
        color: var(--color-subtle);
        font-variant-numeric: tabular-nums;
        overflow: hidden;
        width: calc(var(--space) * 1.5);
    }

    ul.no-bullet,
    ol.no-bullet {
        list-style: none;
        padding-inline-start: 0;
    }
    ul.no-bullet li::before,
    ol.no-bullet li::before {
        display: none;
    }

    ul.compact li,
    ol.compact li,
    li:last-of-type {
        line-height: var(--font-density);
        margin-block-end: 0;
    }

    /* Blockquotes - spacing only */
    /* Code blocks - spacing only */
    blockquote,
    pre {
        padding: var(--space);
    }

    /* =========================== */
    /* FORMS AND INTERACTIVE       */
    /* =========================== */

    /* Form containers - avoid nested grids */
    form:not(.grid *) {
        display: grid;
        gap: calc(var(--space-s) * var(--rhythm-multiplier));
    }

    /* Forms inside grids use flex layout to avoid nesting issues */
    .grid form {
        display: flex;
        flex-direction: column;
        gap: calc(var(--space-s) * var(--rhythm-multiplier));
    }

    /* Form field groups - spacing only */
    fieldset {
        padding: calc(var(--space-s) * var(--rhythm-multiplier));
        display: grid;
        gap: calc(var(--space-xs) * var(--rhythm-multiplier));
    }

    legend {
        padding-inline: calc(var(--space-xs) * var(--rhythm-multiplier));
    }

    /* Form inputs */
    input,
    textarea,
    select {
        margin: 0;
    }

    /* Labels - spacing only */
    label {
        margin: 0;
    }

    /* Label + input pairs */
    label:has(+ input[type="text"]),
    label:has(+ input[type="email"]),
    label:has(+ input[type="password"]),
    label:has(+ textarea),
    label:has(+ select) {
        margin-block-start: calc(var(--space-xs) * var(--rhythm-multiplier));
        margin-inline-start: calc(var(--space-s) * var(--rhythm-multiplier));
    }

    /* Checkbox/radio with labels */
    label + input[type="checkbox"],
    label + input[type="radio"] {
        margin-inline-start: calc(var(--space-s) * var(--rhythm-multiplier));
    }

    /* Button groups */
    .button-group {
        display: flex;
        gap: calc(var(--space-s) * var(--rhythm-multiplier));
        flex-wrap: wrap;
    }

    /* =========================== */
    /* MEDIA ELEMENTS              */
    /* =========================== */

    /* Images, videos, etc. */
    img,
    video,
    audio,
    iframe {
        max-width: 100%;
        height: auto;
    }

    /* Figures */
    figure {
        display: grid;
        gap: calc(var(--space-xs) * var(--rhythm-multiplier));
    }

    figcaption {
        /* Spacing handled by rhythm system */
    }

    /* =========================== */
    /* TABLES                      */
    /* =========================== */

    caption {
        margin-block-end: calc(var(--space-xs) * var(--rhythm-multiplier));
    }

    /* Swiss-style data tables */
    table {
        /* You already have: border-collapse: collapse; */
        width: 100%;
        font-variant-numeric: tabular-nums; /* ADD: Monospace numbers */
    }

    td,
    th {
        border-bottom: var(--border);
        font-size: var(--scale-s);
        padding-block: calc(var(--space-xs) * var(--rhythm-multiplier));
        padding-inline: calc(var(--space-s) * var(--rhythm-multiplier));
    }

    th {
        /* You already have: text-align: left; font-weight: bold; */
        text-transform: uppercase; /* ADD */
        letter-spacing: 0.05em; /* ADD */
    }

    /* ADD: Numeric column alignment */
    .numeric {
        text-align: right;
        font-variant-numeric: tabular-nums;
    }

    /* ADD: Zebra striping (functional, not decorative) */
    .striped tbody tr:nth-child(even) {
        background: color-mix(in srgb, var(--color-foreground) 3%, transparent);
    }

    /* ADD: Compact table variant */
    .compact th,
    .compact td {
        padding-block: calc(var(--space-2xs) * var(--rhythm-multiplier));
        padding-inline-end: calc(var(--space-xs) * var(--rhythm-multiplier));
    }
}

/* =========================== */
/* UTILITY CLASSES            */
/* =========================== */

/* Spacing override utilities */
.rhythm-tight {
    --rhythm-multiplier: 0.5;
}

.rhythm-loose {
    --rhythm-multiplier: 1.5;
}

.rhythm-xl {
    --rhythm-multiplier: 2;
}

/* Individual element overrides */
.no-rhythm {
    margin: 0 !important;
}

.no-block-start {
    margin-block-start: 0 !important;
}

.no-block-end {
    margin-block-end: 0 !important;
}

.stick-next {
    margin-block-end: calc(
        var(--space-xs) * var(--rhythm-multiplier)
    ) !important;
}

/* =========================== */
/* PERFORMANCE OPTIMIZATIONS  */
/* =========================== */

/* Reduce repaints and reflows */
.rhythm {
    /* Use GPU acceleration for transforms if needed */
    /*transform: translateZ(0); */

    /* Optimize for animations */
    /*will-change: auto; */
}

/* =========================== */
/* ACCESSIBILITY               */
/* =========================== */

/* Ensure rhythm doesn't interfere with screen readers */
.rhythm:focus-within {
    /* Maintain focus visibility */
}

/* Respect user motion preferences */
@media (prefers-reduced-motion: reduce) {
    .rhythm {
        transition: none;
    }
}

/* =========================== */
/* LEGACY SUPPORT             */
/* =========================== */

/* Fallback for browsers without CSS Grid support */
@supports not (display: grid) {
    .rhythm {
        display: block;

        > * {
            margin-block-end: calc(var(--space) * var(--rhythm-multiplier));
        }

        > :last-child {
            margin-block-end: 0;
        }
    }
}

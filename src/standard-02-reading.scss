/* Prose Layout Design Tokens - Using logical properties */
:root {
    /* Content area tokens */
    --line-width-xs: 24rem; /* ~384px - narrow sidebar content */
    --line-width-s: 32rem; /* ~512px - short form content */
    --line-width-normal: 42rem; /* ~672px - optimal reading (60-75 chars) */
    --line-width-wide: 50rem; /* ~800px - wider articles */
    --line-width-xl: 60rem; /* ~960px - documentation/wide content */
    --line-width-full: 88vw; /* responsive full width with margins */
    --line-width: var(--line-width-normal);

    /* Layout grid tokens */
    --gap: clamp(var(--space), 6vw, var(--space-xl));
    --content: min(var(--line-width), 100% - var(--gap) * 2);
    --content-small: var(--space-l);
    --content-accent: minmax(0, var(--space-l));
    --content-feature: minmax(0, var(--space-xxl));
    --content-full: minmax(var(--gap), 1fr);
}

/* Reading Layout System - Article content grid and positioning */
/* Inspired by fine-art typography and book design principles */

.reading {
    display: grid;
    grid-template-columns:
        [full-start] var(--content-full)
        [feature-start] var(--content-feature)
        [accent-start] var(--content-accent)
        [content-start] var(--content) [content-end]
        var(--content-accent) [accent-end]
        var(--content-feature) [feature-end]
        var(--content-full) [full-end];

    padding-inline: calc(var(--space) * -2);

    position: relative;
    z-index: var(--z-base);

    /* Default content positioning */
    > * {
        grid-column: content;
    }

    .small {
        grid-column: content;
        margin-inline: var(--content-small);
    }

    .accent {
        grid-column: accent;
        margin-inline: 0;
    }

    .feature {
        grid-column: feature;
        margin-inline: 0;
    }

    .full {
        grid-column: full;
        margin-inline: 0;
    }

    /* Image gallery layout */
    &:not(.no-grid) {
        p:has(img) {
            display: flex;
            gap: var(--space-gap);
            border-radius: var(--border-radius);
        }

        p:has(img) > * {
            flex: 1 1 auto;
            min-width: 1%;
            min-height: 1%;
            object-fit: cover;
        }

        p:has(video) > * {
            flex: 1 1 auto;
            min-width: 1%;
            min-height: 1%;
            object-fit: cover;
        }

        p:has(img) img,
        p:has(img) img:first-child,
        p:has(img) img:last-child {
            margin-inline: auto;
        }

        p:has(img) br {
            display: none;
        }

        .callout p:has(img),
        .callout p:has(img) br {
            display: block;
        }
    }

    /* Table wrapper layout */
    .table-wrapper {
        width: 100%;
        overflow-block: hidden;
        overflow-inline: auto;

        -webkit-overflow-scrolling: touch;
        position: relative;
        margin-block: var(--space-l) var(--space-xl);
        margin-inline: auto;

        .table-gradient-overlay {
            position: absolute;
            inset-block-start: 0;
            inset-inline-end: 0;
            block-size: 100%;
            inline-size: var(--space-xl);
            background: linear-gradient(
                to left,
                var(--color-background),
                transparent
            );
            pointer-events: none;
            z-index: var(--z-dropdown);
            opacity: 0;
            transition: opacity 0.2s ease;
        }

        &.has-overflow .table-gradient-overlay {
            opacity: 0.8;
        }

        @media (min-width: 769px) {
            .table-gradient-overlay {
                inline-size: var(--space-xl);
                opacity: 0;
            }

            &.has-overflow .table-gradient-overlay {
                opacity: 1;
            }

            &:hover .table-gradient-overlay {
                opacity: 0;
                transition: opacity 0.2s ease;
            }
        }

        @media (max-width: 768px) {
            &.has-overflow .table-gradient-overlay {
                background: linear-gradient(
                    to right,
                    transparent,
                    var(--color-background)
                );
                opacity: 0.8;
            }
        }

        &.has-overflow:focus::before {
            content: "Use ← → arrow keys to scroll";
            position: absolute;
            inset-block-start: -1.5rem;
            inset-inline-start: 0;
            font-size: var(--scale-xs);
            color: var(--color-muted);
            background: var(--color-background);
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            border: 1px solid var(--color-border);
            white-space: nowrap;
            z-index: var(--z-tooltip);
            opacity: 0;
            animation: fadeInUp 0.3s ease forwards;
        }

        @media (max-width: 768px) {
            &.has-overflow:focus::before {
                display: none;
            }
        }

        &.has-overflow {
            cursor: grab;
        }

        &.has-overflow:active {
            cursor: grabbing;
        }

        &.has-overflow::after {
            content: "";
            position: absolute;
            inset-block: 0;
            inset-inline-end: 0;
            inline-size: 1px;
            background: var(--color-border);
            opacity: 0.3;
            pointer-events: none;
            z-index: var(--z-base);
        }

        &:hover .table-copy-button {
            opacity: 1;
        }

        .table-copy-button:hover {
            background: var(--color-background-secondary);
            color: var(--color-foreground);
            transform: scale(1.05);
        }

        table {
            width: fit-content(var(--content-feature));
            border-collapse: collapse;
        }
    }

    /* Basic media styling */
    img,
    audio,
    video {
        margin: 0;
        margin-inline: auto;
        max-inline-size: 100%;
        border-radius: var(--border-radius);
        border: var(--border);
    }

    /* Mermaid diagrams */
    .mermaid {
        margin-block-end: var(--space);
        margin-inline: auto;
        padding: var(--space);
    }

    p img {
        max-inline-size: 100%;
    }
}

/* Animation keyframes */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(0.5rem);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* =========================== */
/* READING LAYOUT DEBUG SYSTEM */
/* =========================== */

/* Vertical rhythm debug overlay for .reading */
.reading.reading-debug {
    position: relative;
}

.reading.reading-debug::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    z-index: var(--z-modal);
    opacity: 0.3;

    /* Create vertical rhythm lines using CSS gradients */
    background-image:
        /* Major rhythm lines (every 4 rhythm units) - thicker, darker */
        repeating-linear-gradient(
            to bottom,
            transparent 0,
            transparent calc(4 * var(--space) - 2px),
            color-mix(in srgb, var(--color-accent) 60%, transparent)
                calc(4 * var(--space) - 2px),
            color-mix(in srgb, var(--color-accent) 60%, transparent)
                calc(4 * var(--space))
        ),
        /* Secondary rhythm lines (every 2 rhythm units) - medium */
            repeating-linear-gradient(
                to bottom,
                transparent 0,
                transparent calc(2 * var(--space) - 1px),
                color-mix(in srgb, var(--color-accent) 30%, transparent)
                    calc(2 * var(--space) - 1px),
                color-mix(in srgb, var(--color-accent) 30%, transparent)
                    calc(2 * var(--space))
            ),
        /* Base rhythm lines (every rhythm unit) - light */
            repeating-linear-gradient(
                to bottom,
                transparent 0,
                transparent calc(var(--space) - 0.5px),
                color-mix(in srgb, var(--color-accent) 15%, transparent)
                    calc(var(--space) - 0.5px),
                color-mix(in srgb, var(--color-accent) 15%, transparent)
                    var(--space)
            ),
        /* Fine rhythm lines (every half rhythm unit) - very light */
            repeating-linear-gradient(
                to bottom,
                transparent 0,
                transparent calc(var(--space) / 2 - 0.25px),
                color-mix(in srgb, var(--color-accent) 8%, transparent)
                    calc(var(--space) / 2 - 0.25px),
                color-mix(in srgb, var(--color-accent) 8%, transparent)
                    calc(var(--space) / 2)
            );
}

/* Debug info overlay */
.reading.reading-debug::after {
    content: "Reading Layout Debug\A Major: 4×rhythm | Secondary: 2×rhythm | Base: 1×rhythm | Fine: 0.5×rhythm";
    position: fixed;
    top: var(--space);
    right: var(--space);
    background: color-mix(
        in srgb,
        var(--color-accent) 90%,
        var(--color-background)
    );
    color: var(--color-background);
    padding: var(--space-xs) var(--space-s);
    border-radius: var(--border-radius);
    font-size: var(--scale-xs);
    font-family: var(--font-monospace, monospace);
    line-height: 1.3;
    white-space: pre;
    z-index: var(--z-modal);
    box-shadow: 0 2px 8px
        color-mix(in srgb, var(--color-accent) 20%, transparent);
}

/* Column boundary indicators using visual overlays */
.reading.reading-debug-columns {
    position: relative;
}

.reading.reading-debug-columns::before {
    content: "full" "feature" "accent" "content" "accent" "feature" "full";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 100%;
    pointer-events: none;
    z-index: var(--z-dropdown);
    opacity: 0.3;

    /* Use the same grid as the parent */
    display: grid;
    grid-template-columns: inherit;
    gap: 0;

    /* Style the grid line labels */
    font-family: var(--font-monospace, monospace);
    font-size: var(--scale-xs);
    color: var(--color-accent);
    font-weight: bold;
    text-align: center;
    line-height: 1;
    padding-top: var(--space-xs);
}

.reading.reading-debug-columns::after {
    content: "Reading Layout Grid\A[full] [feature] [accent] [content] [accent] [feature] [full]";
    position: fixed;
    top: calc(var(--space) * 3);
    right: var(--space);
    background: color-mix(
        in srgb,
        var(--color-accent) 90%,
        var(--color-background)
    );
    color: var(--color-background);
    padding: var(--space-xs) var(--space-s);
    border-radius: var(--border-radius);
    font-size: var(--scale-xs);
    font-family: var(--font-monospace, monospace);
    line-height: 1.3;
    white-space: pre;
    z-index: var(--z-modal);
    box-shadow: 0 2px 8px
        color-mix(in srgb, var(--color-accent) 20%, transparent);
}

/* Combination debug mode - rhythm + columns */
.reading.reading-debug.reading-debug-columns::before {
    /* Combine grid labels with rhythm background */
    background-image:
        /* Vertical rhythm lines */
        repeating-linear-gradient(
            to bottom,
            transparent 0,
            transparent calc(4 * var(--space) - 2px),
            color-mix(in srgb, var(--color-accent) 30%, transparent)
                calc(4 * var(--space) - 2px),
            color-mix(in srgb, var(--color-accent) 30%, transparent)
                calc(4 * var(--space))
        ),
        repeating-linear-gradient(
            to bottom,
            transparent 0,
            transparent calc(2 * var(--space) - 1px),
            color-mix(in srgb, var(--color-accent) 15%, transparent)
                calc(2 * var(--space) - 1px),
            color-mix(in srgb, var(--color-accent) 15%, transparent)
                calc(2 * var(--space))
        ),
        repeating-linear-gradient(
            to bottom,
            transparent 0,
            transparent calc(var(--space) - 0.5px),
            color-mix(in srgb, var(--color-accent) 8%, transparent)
                calc(var(--space) - 0.5px),
            color-mix(in srgb, var(--color-accent) 8%, transparent) var(--space)
        );
}

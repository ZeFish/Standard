// src/eleventy/security.js

import { createLogger } from "../logger.js";

export default function (eleventyConfig, site = {}) {
  // Read user config
  const user = site.standard?.security || {};

  // Normalize top-level enabled first so we can short-circuit early
  const enabled = user.enabled ?? true;
  if (enabled === false) return;

  const logger = createLogger({
    scope: "Security",
    verbose: site.standard?.verbose || false,
  });

  // Defaults
  const defaults = {
    csp: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "https:"],
      fontSrc: ["'self'", "data:"],
      connectSrc: ["'self'"],
      frameAncestors: ["'none'"],
    },
    permissions: {
      geolocation: [],
      camera: [],
      microphone: [],
      payment: [],
      usb: [],
    },
    xFrameOptions: "DENY",
    xContentTypeOptions: "nosniff",
    referrerPolicy: "strict-origin-when-cross-origin",
    enableCaching: true,
    addMetaTags: true,
  };

  // Shallow-merge objects, but keep arrays as provided by the user when present
  const csp = {
    ...defaults.csp,
    ...(user.csp || {}),
  };

  const permissions = {
    ...defaults.permissions,
    ...(user.permissions || {}),
  };

  const xFrameOptions = user.xFrameOptions ?? defaults.xFrameOptions;
  const xContentTypeOptions =
    user.xContentTypeOptions ?? defaults.xContentTypeOptions;
  const referrerPolicy = user.referrerPolicy ?? defaults.referrerPolicy;
  const enableCaching = user.enableCaching ?? defaults.enableCaching;
  const addMetaTags = user.addMetaTags ?? defaults.addMetaTags;

  // Build CSP string
  const cspDirectives = Object.entries(csp)
    .map(([key, values]) => {
      const directive = key.replace(/([A-Z])/g, "-$1").toLowerCase();
      return `${directive} ${values.join(" ")}`;
    })
    .join("; ");

  // Build Permissions Policy string
  const permissionsStr = Object.entries(permissions)
    .map(([key, values]) => {
      const origins = values.length > 0 ? values.join(" ") : "";
      return `${key}=(${origins})`;
    })
    .join(", ");

  // ===== GENERATE _HEADERS FILE (for Cloudflare Pages) =====
  let headersContent = `# Security Headers
# Generated by Standard Framework

/*
  X-Frame-Options: ${xFrameOptions}
  X-Content-Type-Options: ${xContentTypeOptions}
  Referrer-Policy: ${referrerPolicy}
  Content-Security-Policy: ${cspDirectives}
  Permissions-Policy: ${permissionsStr}
`;

  if (enableCaching) {
    headersContent += `
# Cache Headers
/*.css
  Cache-Control: public, max-age=31536000, immutable

/*.js
  Cache-Control: public, max-age=31536000, immutable

/*.woff2
  Cache-Control: public, max-age=31536000, immutable
`;
  }

  eleventyConfig.addTemplate(
    "_headers.njk",
    `---
layout: false
permalink: /_headers
eleventyExcludeFromCollections: true
---
${headersContent}`,
  );

  // ===== ADD GLOBAL DATA FOR META TAGS (for local dev) =====
  if (addMetaTags) {
    eleventyConfig.addGlobalData("securityHeaders", {
      csp: cspDirectives,
      permissions: permissionsStr,
      referrerPolicy,
      xContentTypeOptions,
    });
  }

  logger.debug("Security headers configured:");
  logger.debug(`_headers file: generated`);
  logger.debug(` Meta tags: ${addMetaTags ? "enabled" : "disabled"}`);
  logger.success();
}

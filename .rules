---
title: Claude Architecture Guide
description: AI-friendly architecture documentation for Standard Framework developers
permalink: /claude/
eleventyNavigation:
  key: Claude Guide
  parent: Documentation
---

# Claude.md — Standard Framework Architecture Guide

**Purpose**: Help Claude AI (and other developers) understand the Standard Framework codebase quickly and effectively.

> 📖 **This guide is rendered as a web page** at `https://standard.ffp.co/claude/` during build (synced from root via eleventy.config.js)

---

## Quick Facts

- **Type**: Multi-component design system (11ty plugin + CSS framework + JS library + Cloudflare functions)
- **Version**: 0.10.52
- **License**: MIT
- **Package**: `@zefish/standard`
- **Philosophy**: Fine-art typography, Swiss grid systems, mathematical precision (golden ratio)
- **Size**: 15KB CSS + 2KB JS (gzipped)
- **Dependencies**: Zero runtime dependencies (build-only: Sass, 11ty, Terser)

---

## Repository Structure

```
Standard/
├── src/
│   ├── eleventy/              ← 11ty plugin system (main entry)
│   │   ├── eleventy.js        ← Plugin orchestrator
│   │   ├── markdown.js        ← Markdown processing
│   │   ├── filter.js          ← Template filters
│   │   ├── shortcode.js       ← Template shortcodes
│   │   ├── backlinks.js       ← Wiki-style backlinks
│   │   ├── encryption.js      ← Content encryption
│   │   ├── preprocessor.js    ← Markdown preprocessing
│   │   ├── doc-parser.js      ← Documentation parsing
│   │   └── doc-generator.js   ← Auto-doc generation
│   ├── js/
│   │   ├── standard.js        ← Main typography engine (2.2.0)
│   │   └── standard.lab.js    ← Experimental features
│   ├── cloudflare/            ← Serverless Cloudflare functions
│   │   ├── api/
│   │   │   ├── comments.js    ← Simplified comments API endpoint
│   │   │   └── contact.js     ← Simplified contact API endpoint
│   │   └── example.js         ← Example function
│   ├── js/
│   │   ├── standard.js        ← Main typography engine (2.2.0)
│   │   ├── standard.lab.js    ← Experimental features
│   │   └── standard.comment.js ← Browser library for comments
│   ├── styles/
│   │   ├── standard.scss      ← Entry point
│   │   ├── standard-00-variables.scss
│   │   ├── standard-01-token.scss
│   │   ├── standard-02-color.scss
│   │   ├── standard-03-typography.scss
│   │   ├── standard-04-elements.scss
│   │   ├── standard-05-rhythm.scss
│   │   ├── standard-06-grid.scss
│   │   ├── standard-07-prose.scss
│   │   ├── standard-08-img.scss
│   │   ├── standard-09-md.scss
│   │   ├── standard-98-utilities.scss
│   │   └── standard-99-debug.scss
│   └── layouts/               ← Nunjucks templates
│       ├── base.njk           ← Root template
│       ├── meta.njk           ← Meta tags
│       ├── article.njk        ← Article layout
│       ├── component.njk      ← Component docs
│       ├── readme.njk         ← README layout
│       └── encrypted.njk      ← Encrypted content
├── content/                   ← Documentation site content
│   ├── 11ty/                  ← 11ty plugin guides
│   ├── css/                   ← CSS framework docs
│   ├── cloudflare/            ← Cloudflare docs
│   ├── docs/                  ← Auto-generated API docs
│   ├── example/               ← Example files
│   ├── template/              ← Template files
│   └── assets/                ← Fonts, images
├── dist/                      ← Compiled output
│   ├── standard.css           ← Unminified
│   ├── standard.min.css       ← Minified
│   ├── standard.js            ← Unminified
│   ├── standard.min.js        ← Minified
│   └── standard.lab.js        ← Lab features (minified)
├── scripts/                   ← Build utilities
├── package.json               ← NPM config
├── eleventy.config.js         ← 11ty config for docs site
└── README.md                  ← Main project README
```

---

## Documentation Architecture

### The Framework Builds Its Own Website

The Standard Framework is **self-documenting**. The same build system that creates the package also generates and serves comprehensive documentation.

**Documentation Flow**:
```
README.md (root)
    ↓
content/README.md (synced by eleventy.config.js)
    ↓
_site/index.html
    ↓
(served at https://standard.ffp.co)
```

**Three Types of Documentation**:

1. **User Guides** (`content/11ty/`, `content/css/`, `content/cloudflare/`)
   - Hand-written markdown files
   - Explain *how* to use the framework
   - Located in `content/` directories
   - Examples: `getting-started.md`, `typography.md`, `filters.md`

2. **API Documentation** (`content/docs/`)
   - **Auto-generated from JSDoc comments** in source code
   - Runs during build via `DocGenerator` plugin
   - Extracts `@component`, `@category`, `@description`, `@example` tags
   - Updated automatically when source code changes
   - Organized by category (11ty-plugins, foundation, colors, etc.)

3. **README Sync**
   - `README.md` (root) is the source of truth
   - **Automatically copied** to `content/README.md` before each build
   - Becomes `/index.html` on the site
   - Prevents duplication, ensures consistency

### How Documentation Generation Works

**DocGenerator Plugin** (`src/eleventy/doc-generator.js`):

```javascript
eleventyConfig.addPlugin(DocGenerator, {
  sourceDir: "src",
  patterns: [
    "styles/**/*.scss",    // Scan SCSS files
    "js/**/*.js",          // Scan JavaScript
    "eleventy/**/*.js"     // Scan 11ty plugins
  ],
  outputDir: "content/docs",
  layout: "component"      // Template for doc pages
});
```

**Features**:
- ✅ Scans source files for JSDoc comments with `@component` tag
- ✅ Extracts component name, category, description, parameters, examples
- ✅ Generates markdown files in `content/docs/`
- ✅ **Caches results** — Only regenerates if source files changed (SHA256 hash comparison)
- ✅ Skips regeneration if nothing changed (`.doc-generator-hash` file)
- ✅ Auto-generates category index pages

**Example: A Documented Component**

```javascript
/**
 * @component My Typography Filter
 * @category Typography
 * @description Applies typography enhancements to text.
 * Converts smart quotes, dashes, and fractions.
 *
 * @param {string} text The text to enhance
 * @param {object} options Configuration options
 * @returns {string} Enhanced text
 *
 * @example
 * // In template
 * {{ content | myTypographyFilter }}
 */
export function myTypographyFilter(text, options = {}) {
  // Implementation
}
```

↓ **Becomes** ↓

```markdown
# My Typography Filter

**Category**: Typography

Applies typography enhancements to text.
Converts smart quotes, dashes, and fractions.

## Usage

```
{{ content | myTypographyFilter }}
```

## Parameters

- `text` (string) — The text to enhance
- `options` (object) — Configuration options

## Returns

- (string) Enhanced text
```

### README & Claude.md Sync Mechanism

**In `eleventy.config.js`**: Both files are automatically synced before each build:

**Sync Pattern**:
- `README.md` (root) → `content/README.md` → `_site/index.html`
- `claude.md` (root) → `content/claude.md` → `_site/claude/index.html`

**Implementation**:

```javascript
// Watch for changes
eleventyConfig.addWatchTarget("README.md");
eleventyConfig.addWatchTarget("claude.md");

// Before each build, sync both files
eleventyConfig.on("eleventy.before", () => {
  // Sync README.md
  const readmeSrc = join(__dirname, "README.md");
  const readmeDest = join(__dirname, "content", "README.md");

  if (fs.existsSync(readmeSrc)) {
    const srcContent = fs.readFileSync(readmeSrc, "utf-8");
    const destContent = fs.existsSync(readmeDest)
      ? fs.readFileSync(readmeDest, "utf-8")
      : null;

    // Only write if changed (prevents infinite watch loop)
    if (srcContent !== destContent) {
      fs.writeFileSync(readmeDest, srcContent, "utf-8");
    }
  }

  // Sync claude.md
  const claudeSrc = join(__dirname, "claude.md");
  const claudeDest = join(__dirname, "content", "claude.md");

  if (fs.existsSync(claudeSrc)) {
    const srcContent = fs.readFileSync(claudeSrc, "utf-8");
    const destContent = fs.existsSync(claudeDest)
      ? fs.readFileSync(claudeDest, "utf-8")
      : null;

    // Only write if changed (prevents infinite watch loop)
    if (srcContent !== destContent) {
      fs.writeFileSync(claudeDest, srcContent, "utf-8");
    }
  }
});
```

**Benefits**:
- ✅ Single source of truth in root directory
- ✅ Only one file to edit for each
- ✅ Auto-rendered with proper frontmatter during build
- ✅ Accessible as web pages on documentation site
- ✅ Prevents sync issues and duplication
- ✅ Watch mode detects changes immediately

### Documentation Site Build Process

```
npm run build
    ↓
1. Compile assets (CSS/JS)
2. Run DocGenerator
   - Scan src/ for JSDoc comments
   - Generate content/docs/*.md
   - Save hash to .doc-generator-hash
3. Sync README.md → content/README.md
4. Run 11ty
   - Input: content/
   - Includes: src/layouts/
   - Output: _site/
5. Copy dist/ → _site/assets/standard/
6. Copy content/assets/ → _site/assets/
    ↓
_site/ ready for deployment
```

---

## Documentation Best Practices

### When You Modify Source Code

**Always update corresponding documentation:**

| Code Change | Documentation to Update |
|-------------|--------------------------|
| Add new 11ty plugin | `content/11ty/index.md` + add JSDoc to file |
| Add new CSS utility | `content/css/utilities.md` + add JSDoc to SCSS |
| Add new JS method | JSDoc in `src/js/standard.js` (auto-generates) |
| Add new feature flag | `content/11ty/getting-started.md` + JSDoc |
| Add new locale | `content/css/internationalization.md` + update JSDoc |
| Fix a bug | Update JSDoc `@example` to reflect correct behavior |
| Add new shortcode | `content/11ty/shortcodes.md` + add JSDoc to file |

### JSDoc Structure for Auto-Doc Generation

```javascript
/**
 * @component Name of the Component
 * @category Category (e.g., "Typography", "Grid", "11ty Plugins")
 * @description Human-readable description of what this does.
 * Can span multiple lines and explain the purpose clearly.
 *
 * @param {type} paramName Description of this parameter
 * @param {type} optionalParam Description (optional)
 *
 * @returns {type} What does this return or do?
 *
 * @prop {type} propertyName Description of property
 *
 * @example
 * // Show concrete usage example
 * const result = componentName(input);
 * console.log(result); // Shows expected output
 *
 * @since 0.10.0
 */
```

### Hand-Written Documentation Files

For guides and tutorials, create `.md` files in:
- `content/11ty/` — 11ty plugin guides
- `content/css/` — CSS framework documentation
- `content/cloudflare/` — Cloudflare functions guides
- `content/` — General guides

Structure:
```markdown
---
layout: layouts/article.njk
title: Feature Name
description: One-line description
---

# Feature Name

## Overview

Explain what this feature is and why someone would use it.

## Getting Started

Step-by-step guide to get started.

## Examples

Real-world usage examples.

## API Reference

Reference to auto-generated API docs.

## See Also

- [[Related Feature]]
- [[Another Feature]]
```

### Auto-Generated vs Hand-Written

**Auto-Generated** (`content/docs/`):
- ✅ Always in sync with source code
- ✅ Technical API reference
- ✅ Extracted from JSDoc comments
- ✅ Should be comprehensive and precise

**Hand-Written** (`content/`):
- ✅ Conceptual explanations
- ✅ Getting started guides
- ✅ Tutorial walkthroughs
- ✅ Best practices
- ✅ Examples and use cases

---

## The Four Core Components

### 1. **11ty Plugin System** (`src/eleventy/`)

**Entry Point**: `src/eleventy/eleventy.js`

**What It Does**:
- Main plugin orchestrator that registers all sub-plugins
- Handles asset copying (CSS/JS to output directory)
- Provides shortcodes: `{% standardAssets %}` and `{% standardLab %}`
- Can use local files or CDN

**Key Sub-Plugins**:
| Plugin | File | Purpose |
|--------|------|---------|
| Markdown | `markdown.js` | Enhanced markdown with syntax highlighting, callouts, footnotes |
| Filter | `filter.js` | Template filters (excerpt, image extraction, date formatting) |
| ShortCode | `shortcode.js` | Custom template shortcodes |
| Backlinks | `backlinks.js` | Wiki-style `[[page]]` links with auto-backlinks |
| Encryption | `encryption.js` | Password-protected content (SHA256 + XOR, client-side decryption) |
| PreProcessor | `preprocessor.js` | Markdown preprocessing (escapes code blocks) |
| DocGenerator | `doc-generator.js` | Auto-generates API docs from JSDoc comments |

**How to Use**:
```javascript
import Standard from "@zefish/standard";

export default function (eleventyConfig) {
  eleventyConfig.addPlugin(Standard, {
    outputDir: "assets/standard",  // Where to copy files
    copyFiles: true,                // Copy from node_modules
    useCDN: false,                  // Use local vs CDN
    escapeCodeBlocks: []            // Languages to escape
  });
}
```

---

### 2. **JavaScript Typography Engine** (`src/js/standard.js`)

**Version**: 2.2.0

**What It Does**:
- Implements classical typography rules that CSS cannot handle
- Processes text nodes while preserving HTML structure
- Supports 5 locales with locale-specific rules
- Auto-detects language from `<html lang>` attribute

**Key Features**:

| Feature | Purpose | Controlled By |
|---------|---------|---------------|
| Smart Quotes | Converts straight quotes to curly quotes (locale-aware) | `enableSmartQuotes` |
| Punctuation | Converts `--` to em-dash, `...` to ellipsis, `-` to en-dash | `enablePunctuation` |
| Fractions | Converts `1/2` to `½` using Unicode | `enableFractions` |
| Arrows & Symbols | Converts `->` to `→`, `(c)` to `©` | `enableArrowsAndSymbols` |
| Number Formatting | Adds locale-specific thousands separators | `enableNumberFormatting` |
| Spacing | Fixes spacing around punctuation (French thin spaces) | `enableSpacing` |
| Widow Prevention | Prevents single word on last line (orphan prevention) | `enableWidowPrevention` |
| Image Zoom | Click to zoom images with arrow navigation | Built-in |

**Supported Locales**:
- `en` (English) - comma separators
- `fr` (French) - thin space separators, guillemets
- `de` (German) - period separators, German quotes
- `es` (Spanish) - period separators, guillemets
- `it` (Italian) - period separators, guillemets

**How to Use**:
```javascript
// Auto-initialization (in browser)
const standard = new Standard({
  enableSmartQuotes: true,
  enablePunctuation: true,
  enableWidowPrevention: true,
  enableFractions: true,
  enableArrowsAndSymbols: true,
  locale: 'en',                    // Auto-detect if null
  observeDOM: true,                // Watch for dynamic content
  autoProcess: true,               // Process on init
  batchSize: 50,                   // Process in batches
  debounceDelay: 100
});

// Process specific elements
await standard.process('p, li, h1, h2, h3');

// Update options
standard.updateOptions({ enableSmartQuotes: false });

// Listen to events
document.addEventListener('standard:afterProcessAll', (e) => {
  console.log(`Processed ${e.detail.processedCount} elements`);
});
```

**Performance**:
- ✅ Batch processing prevents UI blocking
- ✅ TreeWalker preserves HTML structure
- ✅ Element caching prevents reprocessing
- ✅ MutationObserver debouncing for dynamic content
- ✅ Zero runtime dependencies

**Important Notes**:
- Skips elements with `translate="no"` attribute
- Skips `<code>`, `<pre>`, `<script>`, `<style>` tags
- Can exclude elements via data attributes: `data-standard-quotes="false"`
- Auto-initializes on page load (aggressive by default)

---

### 3. **CSS Framework** (`src/styles/`)

**Entry Point**: `src/styles/standard.scss`

**Architecture**: ITCSS-inspired 12-layer system

| Layer | File | Purpose |
|-------|------|---------|
| 0 | `standard-00-variables.scss` | CSS custom properties, design tokens |
| 1 | `standard-01-token.scss` | Token system setup |
| 2 | `standard-02-color.scss` | Color system, light/dark theming |
| 3 | `standard-03-typography.scss` | Font scales, sizing, weights, text utilities |
| 4 | `standard-04-elements.scss` | HTML element styling (h1-h6, buttons, forms, links) |
| 5 | `standard-05-rhythm.scss` | Vertical rhythm, baseline grid, spacing |
| 6 | `standard-06-grid.scss` | 12-column responsive grid |
| 7 | `standard-07-prose.scss` | Editorial layouts, measure, reading experience |
| 8 | `standard-08-img.scss` | Image system, responsive, zoom |
| 9 | `standard-09-md.scss` | Markdown-generated elements |
| 98 | `standard-98-utilities.scss` | Utility classes, mixins |
| 99 | `standard-99-debug.scss` | Debug utilities |

**Key Design System Concepts**:

- **Golden Ratio**: φ = 1.618 — all measurements derive from this
- **Vertical Rhythm**: `1rlh` unit — all elements align to baseline grid
- **Baseline Trim**: Modern support detection with `@supports` for `text-box-trim`
- **Responsive Grid**: 12-column system with free column positioning
- **Color System**: Automatic light/dark theming, high-contrast mode support
- **Reading Width**: Optimized for ~60 characters per line (content measure)

**Key Classes**:
```css
.rhythm              /* Apply vertical rhythm */
.reading             /* Reading layout optimizations */
.grid                /* 12-column grid container */
.col-{1-12}          /* Column sizing (1-12 columns) */
.md:col-{1-12}       /* Tablet breakpoint */
.lg:col-{1-12}       /* Desktop breakpoint */
```

**Customization via CSS Variables**:
```css
:root {
  --color-accent: #0066cc;
  --color-background: #ffffff;
  --font-family-serif: "Georgia", serif;
  --font-family-sans: "system-ui", sans-serif;
  --line-width: 60rem;  /* Optimal reading width */
  --baseline-trim-support: 0;  /* Set to 1 when supported */
}
```

---

### 4. **Cloudflare Pages Functions System** (`src/cloudflare/`)

**What It Does**:
- Integrates **Cloudflare Pages Functions** (serverless functions) with 11ty
- Copies function files to `functions/` directory for automatic deployment
- Provides GitHub-backed comments system with moderation workflow
- Includes client-side library for comment rendering and form handling
- CORS-enabled for cross-domain requests

**Important**: This uses **Cloudflare Pages Functions**, NOT Wrangler. Functions are deployed automatically when you push to GitHub via Cloudflare Pages.

**How to Use**:
```javascript
import Standard from "@zefish/standard";

export default function (eleventyConfig) {
  eleventyConfig.addPlugin(Standard, {
    comments: { enabled: true }  // Copies comments handler to functions/api/comments.js
  });
}
```

**Configuration via Environment Variables**:
Set these in your Cloudflare Pages project settings:

1. **Local Development** (`.env` file):
```bash
GITHUB_OWNER=your-github-username
GITHUB_REPO=your-repository-name
GITHUB_TOKEN=ghp_your_token              # Personal access token with repo scope
GITHUB_COMMENTS_PATH=data/comments
MODERATION_EMAIL=admin@example.com
```

2. **Production** (Cloudflare Pages Dashboard):
Navigate to Pages → Your Project → Settings → Environment Variables → Production:
- `GITHUB_TOKEN`
- `GITHUB_OWNER`
- `GITHUB_REPO`
- `GITHUB_COMMENTS_PATH`
- `MODERATION_EMAIL`

**What's Included**:

**Cloudflare Pages Functions**:
- `src/cloudflare/api/comments.js` → `functions/api/comments.js` (auto-deployed)
  - Handles GET requests: Fetch comments for a page from GitHub
  - Handles POST requests: Store new comments as Markdown files in GitHub
  - Automatic moderation flag (approval before displaying)
  - CORS-enabled for cross-domain requests
  - Stored in: `data/comments/{pageId}/{timestamp}-{hash}.md`

- `src/cloudflare/api/contact.js` → `functions/api/contact.js` (optional contact form)

**Client-Side Library**:
- `src/js/standard.comment.js` — `GitHubComments` browser class
  - Load and display comments from API
  - Render nested/threaded comments with visual hierarchy
  - Handle form submission with validation
  - Format timestamps (e.g., "2 hours ago")
  - Parse and display Markdown content
  - Optional polling for real-time updates

**11ty Shortcodes**:
- `{% standardComment %}` — Renders semantic HTML form + auto-initializes from `comment: true` frontmatter
- `{% initComments "page-id" %}` — Manual initialization for advanced use cases

**Features**:
- ✅ Comments stored as Markdown files in GitHub (easy to review/moderate)
- ✅ Moderation workflow (approval before displaying to users)
- ✅ Threaded/nested comments with visual nesting hierarchy
- ✅ Markdown support: **bold**, *italic*, `code`, [links](url)
- ✅ Semantic HTML forms with ARIA labels for accessibility
- ✅ Client-side validation (name, email, content required)
- ✅ Real-time updates with optional polling
- ✅ CORS-enabled for cross-domain requests
- ✅ Auto-formatted relative timestamps

**Usage in Pages**:
```markdown
---
layout: base.njk
comment: true
---

# My Article

Your content here...

{% standardComment %}
```

That's it! The `standardComment` shortcode automatically:
- ✅ Creates the comments container and form
- ✅ Renders semantic HTML (fieldset, legend, proper labels)
- ✅ Auto-initializes the comments system when `comment: true` in frontmatter
- ✅ Generates page ID from file slug
- ✅ Loads existing comments from GitHub
- ✅ Handles form submission
- ✅ Displays user-friendly error/success messages

**Deployment to Cloudflare Pages**:
1. Connect your GitHub repository to Cloudflare Pages
2. In Cloudflare dashboard, set environment variables (see Configuration section above)
3. Push to GitHub → Cloudflare automatically builds and deploys
4. Functions are served at `/api/comments` and `/api/contact`

**Comment Storage in GitHub**:
```
data/
  comments/
    blog/
      my-post/
        1729609945000-a7x9k2m1.md
        1729609967000-b4z2k9p3.md
```

Each comment is a Markdown file with YAML frontmatter:
```yaml
---
id: 1729609945000-a7x9k2m1
pageId: blog/my-post
author: "John Doe"
email: "john@example.com"
parentId: null
createdAt: 2024-10-22T15:32:25.000Z
approved: false
spam: false
---

This is the comment content. Supports **markdown**.
```

---

## Build System

**Commands**:
```bash
npm start              # Dev server (11ty on port 8090)
npm dev                # Watch CSS/JS and rebuild
npm build              # Full production build
npm run build:assets   # Compile CSS/JS only
npm run build:css      # SCSS → CSS
npm run build:js       # Copy/minify JS
npm release            # Version release
```

**Build Pipeline**:
1. SCSS compilation (Sass)
2. JavaScript minification (Terser)
3. Version injection
4. 11ty static site generation
5. Asset copying (including function files to `functions/`)

---

## Key Design Principles

### 1. **Mathematical Precision**
- Golden ratio (φ = 1.618) applied to all measurements
- Vertical rhythm prevents visual chaos
- Proportional scaling for typography

### 2. **Classical Typography**
- Smart quotes with locale awareness
- Proper dashes and punctuation
- Widow/orphan prevention
- Fraction formatting
- Multi-locale support (EN, FR, DE, ES, IT)

### 3. **Swiss International Style**
- 12-column grid system (Josef Müller-Brockmann)
- Clean, objective design
- Mathematical grid-based layout
- Hierarchy through scale and weight

### 4. **Zero Configuration**
- Works beautifully out of the box
- Sensible defaults
- Optional customization via CSS variables

### 5. **Progressive Enhancement**
- Core experience without JavaScript
- JavaScript enhances, doesn't require
- Features degrade gracefully
- Mobile-first responsive design

### 6. **Zero Runtime Dependencies**
- Pure CSS and vanilla JavaScript
- No framework required
- Minimal attack surface
- Works in all modern browsers

---

## How to Understand New Code

When exploring a new file:

1. **Check the JSDoc header** — Look for `@component`, `@category`, `@description`, `@example`
2. **Look for exports** — What does this file expose?
3. **Trace dependencies** — What imports does it need?
4. **Find the main function/class** — Is it a plugin, utility, component?
5. **Review test cases** — Examples in JSDoc show intended usage
5. **Review test cases** — Examples in JSDoc show intended usage

### Example: Understanding `standard.js`

```javascript
// 1. JSDoc header explains purpose
/**
 * Standard Framework - Fine-Art Typography Management
 * A comprehensive framework implementing classical typography rules...
 */

// 2. Class definition is the main export
class Standard {
  constructor(options = {}) {
    // Default options tell you what this does
    this.options = {
      enableSmartQuotes: false,
      enablePunctuation: false,
      enableWidowPrevention: false,
      // ...
    };
  }

  // 3. Methods are well-organized
  init() { }
  detectLocale() { }
  getRulesForLocale(locale) { }
  processElement(element) { }
  fixQuotes(text, rules) { }
  // ...
}

// 4. Auto-initialization shows intended behavior
if (typeof window !== "undefined") {
  window.Standard = Standard;
  window.standard = new Standard({
    autoProcess: true,
    observeDOM: true,
    enableWidowPrevention: true,
    // ...
  });
}
```

---

## Common Tasks & Where to Find Them

| Task | Code Location | Documentation Location | Notes |
|------|----------------|----------------------|-------|
| Add 11ty plugin feature | New file in `src/eleventy/` | Add JSDoc to file (auto-docs) + update `content/11ty/index.md` | Add `@component`, `@category`, `@description` tags |
| Add template filter | Add method to `src/eleventy/filter.js` | Add JSDoc to method + update `content/11ty/filters.md` | Document all parameters and return values |
| Add CSS utility class | New SCSS in `src/styles/standard-07-utilities.scss` | Add JSDoc to SCSS file + update `content/css/utilities.md` | Explain responsive variants if applicable |
| Add locale to typography | Add to `getRulesForLocale()` in `src/js/standard.js` | Update JSDoc example + add to `content/css/internationalization.md` | Add locale-specific rules dictionary |
| Add color variant | Add to `src/styles/standard-02-color.scss` | Add CSS variable comment + update `content/css/colors.md` | Document light/dark mode behavior |
| Add feature flag | Add to options in relevant file | Update JSDoc `@param` + update `content/11ty/getting-started.md` | Explain what it controls |
| Fix a bug | Fix in source file | Update JSDoc `@example` to reflect correct behavior | Verify auto-docs regenerate |
| Update README | Edit `README.md` (root) | Will auto-sync to `content/README.md` and `_site/index.html` | Changes take effect after next build |
| Add example | Create in `content/example/` | Create `.html` or `.md` file | Reference in relevant user guide |
| Modify build process | Edit `package.json` scripts | Document in `content/11ty/advanced.md` if user-facing | Update version in `CHANGELOG.md` |

### Important: Build & Documentation Workflow

**When making code changes:**

```bash
# 1. Make your changes to src/
# 2. Update JSDoc comments (they auto-generate docs)
# 3. Update hand-written docs in content/
# 4. Rebuild to verify:
npm run build

# This will:
# - Compile your code
# - Auto-generate docs from JSDoc
# - Sync README.md
# - Build the documentation site
# - Output to _site/

# 5. Check _site/ to verify docs look correct
# 6. Commit both code AND documentation changes
```

**Before releasing:**

```bash
npm run build          # Full build
npm test               # If tests exist
npm run changelog      # Auto-generate CHANGELOG
npm release            # Version bump + release
```

---

## Architecture Strengths

✅ **Modularity** — Each component is independently usable
✅ **Extensibility** — Plugin architecture allows growth
✅ **Performance** — Batch processing, caching, debouncing
✅ **Accessibility** — WCAG AA compliant, keyboard navigation
✅ **Maintainability** — Clear patterns, comprehensive JSDoc
✅ **Scalability** — No monolithic bloat
✅ **Zero Dependencies** — Minimal runtime footprint

---

## Potential Improvements

🟡 **Auto-initialization Control** — `standard.js` starts processing automatically; consider adding opt-in flag
🟡 **Image Zoom Performance** — CSS injection could be precompiled
🟡 **Error Reporting** — Could have better user-friendly error messages
🟡 **Version Pinning** — Document tested dependency version ranges
🟡 **Cloudflare Utilities** — Could provide more helper functions

---

## File Reading Order (Recommended)

For newcomers, read files in this order:

1. **README.md** — Philosophy and features
2. **src/eleventy/eleventy.js** — Plugin entry point
3. **src/js/standard.js** — Typography engine (understand the complexity)
4. **src/styles/standard.scss** — CSS architecture overview
5. **eleventy.config.js** — How everything ties together
6. **package.json** — Build scripts and dependencies
7. **src/eleventy/cloudflare.js** — Cloudflare integration
8. **src/eleventy/markdown.js** — Markdown processing

---

## Questions to Ask When Modifying Code

- **Does this break the single responsibility principle?**
- **Are we adding runtime dependencies?**
- **Is performance still O(n) or better?**
- **Does this work across all supported locales?**
- **Is this documented in JSDoc?** ← **CRITICAL**
- **Are hand-written docs updated in `content/`?** ← **CRITICAL**
- **Will auto-docs regenerate correctly?** ← **CRITICAL**
- **Is this tested with dynamic content (MutationObserver)?**
- **Does this respect the mathematical/golden ratio principles?**

---

## Documentation-Code Synchronization Checklist

**CRITICAL**: Code changes MUST be accompanied by documentation updates. This is not optional.

### Before Committing Code

- [ ] **JSDoc Updated** — Add/update `@component`, `@category`, `@description`, `@example` tags
- [ ] **Hand-Written Docs Updated** — Update corresponding `.md` files in `content/`
- [ ] **Ran `npm run build`** — Verified auto-docs regenerate correctly
- [ ] **Checked `_site/`** — Verified documentation site renders correctly
- [ ] **Tested Examples** — Ran all examples in JSDoc comments
- [ ] **Verified Category** — Correct `@category` tag (11ty Plugins, CSS, Typography, etc.)

### Files That Auto-Sync

These files **automatically** update during build (don't edit directly):

- `content/README.md` — Auto-synced from `README.md` (root)
- `content/docs/*.md` — Auto-generated from JSDoc comments
- `_site/index.html` — Built from `content/README.md`
- `_site/docs/*.html` — Built from auto-generated docs
- `.doc-generator-hash` — Cache file (do not commit)

### Files You MUST Edit

These files require manual updates:

- `README.md` (root) — Edit this, not `content/README.md`
- `content/11ty/*.md` — Hand-written 11ty guides
- `content/css/*.md` — Hand-written CSS guides
- `content/cloudflare/*.md` — Hand-written Cloudflare guides
- Source files with JSDoc — Update `@component`, `@description`, `@example`

### Example: Adding a New Filter

**Step 1: Add Code**
```javascript
// src/eleventy/filter.js

/**
 * @component Truncate Filter
 * @category 11ty Plugins
 * @description Truncate text to a maximum length with ellipsis.
 *
 * @param {string} text Text to truncate
 * @param {number} length Maximum length (default: 100)
 * @returns {string} Truncated text
 *
 * @example
 * {{ "Hello World" | truncate(5) }}
 * // Output: "Hello…"
 */
export function truncateFilter(text, length = 100) {
  return text.slice(0, length) + (text.length > length ? "…" : "");
}
```

**Step 2: Update Hand-Written Docs**
```markdown
# content/11ty/filters.md

## Truncate

Truncates text to a maximum length with ellipsis.

### Usage

```nunjucks
{{ title | truncate(50) }}
{{ content | truncate }}
```

### See Also

- [[Extract First Image Filter]]
- [[Excerpt Filter]]
```

**Step 3: Rebuild & Verify**
```bash
npm run build
# Check _site/docs/truncate-filter.md exists
# Check _site/11ty/filters/index.html contains reference
```

**Step 4: Commit**
```bash
git add src/eleventy/filter.js content/11ty/filters.md
git commit -m "feat: add truncate filter"
```

### Files to Include in Commits

```bash
# Code changes
src/eleventy/filter.js

# Hand-written docs
content/11ty/filters.md

# Auto-generated docs regenerate during build
# (don't commit content/docs/ or .doc-generator-hash)

# Don't commit
_site/                # Generated, re-created on each build
dist/                 # Compiled assets, generated by build
node_modules/         # Dependency cache
.doc-generator-hash   # Build cache file
```

### Git Workflow

```bash
# Make changes to code and docs
nano src/js/standard.js
nano content/css/typography.md

# Build and verify
npm run build

# Check what changed
git status

# Stage only source files (NOT generated files)
git add src/ content/

# Verify your changes look good
git diff --cached

# Commit
git commit -m "feat: add new typography feature

- New Smart Quotes feature
- Updated typography documentation
- Added locale-specific examples"

# Don't commit generated files:
# ❌ content/docs/
# ❌ _site/
# ❌ .doc-generator-hash
```

### Common Mistakes to Avoid

❌ **DON'T**: Edit `content/docs/*.md` directly (they regenerate)
✅ **DO**: Edit JSDoc comments in source files

❌ **DON'T**: Edit `content/README.md` directly (it syncs from root)
✅ **DO**: Edit `README.md` in the root directory

❌ **DON'T**: Commit `_site/` directory
✅ **DO**: Let CI/CD build it

❌ **DON'T**: Skip updating `content/` user guides
✅ **DO**: Always update conceptual docs alongside code

❌ **DON'T**: Add features without JSDoc
✅ **DO**: Write comprehensive JSDoc before committing

---

## Key Resources

- **Project Homepage**: https://github.com/ZeFish/Standard
- **NPM Package**: https://www.npmjs.com/package/@zefish/standard
- **Inspiration**: "The Elements of Typographic Style" by Robert Bringhurst
- **Grid System**: Josef Müller-Brockmann's Swiss typography
- **11ty**: https://www.11ty.dev/

---

## Version History Context

**v0.10.52** — Current version
- 4 major components (11ty plugin, CSS, JS lib, Cloudflare)
- 2.2.0 JavaScript engine
- 5 supported locales
- Comprehensive auto-doc generation

---

## Meta: How to Use This File

This file is designed for Claude (and other AI systems) to quickly understand the codebase. When working on Standard:

1. **Reference this file** when explaining architecture
2. **Update this file** when adding major features
3. **Cross-reference** to specific files using `file:line_number` format
4. **Add examples** for new patterns
5. **Keep it current** with the codebase

---

## Quick Reference: The Documentation Cycle

Every code change follows this cycle:

```
┌─────────────────────────────────────────────────────────────┐
│                    DEVELOPMENT CYCLE                        │
├─────────────────────────────────────────────────────────────┤
│                                                             │
│  1. Write/modify code in src/                              │
│     └─ Add/update JSDoc comments                           │
│                                                             │
│  2. Update hand-written docs                               │
│     └─ content/11ty/*.md                                   │
│     └─ content/css/*.md                                    │
│     └─ content/cloudflare/*.md                             │
│                                                             │
│  3. Run: npm run build                                     │
│     └─ Compile CSS/JS                                      │
│     └─ Auto-generate docs from JSDoc                       │
│     └─ Sync README.md → content/README.md                  │
│     └─ Build 11ty site → _site/                            │
│                                                             │
│  4. Verify: Check _site/ for correctness                   │
│     └─ Auto-docs generated correctly?                      │
│     └─ Hand-written docs appear?                           │
│     └─ Examples work?                                      │
│                                                             │
│  5. Commit: git add src/ content/                          │
│     └─ Include code + hand-written docs                    │
│     └─ Do NOT commit _site/, dist/, .doc-generator-hash    │
│                                                             │
└─────────────────────────────────────────────────────────────┘
```

### Documentation Structure Summary

```
Standard Framework Documentation

├─ README.md (root)
│  └─ ✏️ Edit this for homepage changes
│
├─ content/ (hand-written guides)
│  ├─ 11ty/
│  │  ├─ index.md (11ty overview)
│  │  ├─ getting-started.md
│  │  ├─ filters.md
│  │  ├─ backlinks.md
│  │  └─ ... (conceptual guides)
│  │
│  ├─ css/
│  │  ├─ index.md (CSS overview)
│  │  ├─ typography.md
│  │  ├─ grid.md
│  │  └─ ... (CSS guides)
│  │
│  ├─ cloudflare/
│  │  ├─ index.md
│  │  ├─ setup.md
│  │  └─ ... (Cloudflare guides)
│  │
│  └─ docs/ (⚠️ AUTO-GENERATED)
│     ├─ 11ty-plugins-index.md
│     ├─ standard-framework-11ty-plugin.md
│     ├─ markdown-plugin.md
│     └─ ... (generated from JSDoc)
│
├─ src/ (source code with JSDoc)
│  ├─ eleventy/
│  │  ├─ eleventy.js (JSDoc comments)
│  │  ├─ markdown.js (JSDoc comments)
│  │  ├─ filter.js (JSDoc comments)
│  │  └─ ... (all have JSDoc)
│  │
│  ├─ js/
│  │  └─ standard.js (JSDoc comments)
│  │
│  ├─ styles/
│  │  └─ standard-*.scss (JSDoc comments)
│  │
│  └─ layouts/
│     └─ *.njk (templates)
│
└─ _site/ (⚠️ GENERATED OUTPUT)
   ├─ index.html (from README.md)
   ├─ 11ty/
   ├─ css/
   ├─ cloudflare/
   ├─ docs/
   └─ assets/standard/
```

**Legend**:
- ✏️ = Edit directly
- ⚠️ = Auto-generated, don't edit manually
- (no marker) = Source files with JSDoc

---

**Last Updated**: October 2024
**Maintained By**: Francis Fontaine
**Purpose**: AI-friendly architecture documentation with documentation-as-code emphasis

**Key Principle**: In Standard Framework, **documentation is not separate from code — it is part of the build process**. Every feature must be documented in JSDoc, reflected in hand-written guides, and verified during build.

---

## Observations, Suggestions & Improvements Log

### Recently Implemented ✅

✅ **Documentation Site Restructuring & Simplification** (v0.10.53+)
- **Change**: Simplified opening sections across all CSS documentation pages
- **Rationale**: Reduce cognitive load on readers, make docs more scannable and navigable
- **Files Modified**:
  - `content/css/prose.md` — Simplified intro from multi-section philosophy to: "Create beautifully styled, readable articles with automatic vertical rhythm, optimal line lengths, and professional typography."
  - `content/css/grid.md` — Simplified to: "Build responsive layouts with flexible CSS Grid. Mobile-first approach with automatic responsive columns and proper spacing."
  - `content/css/typography.md` — Simplified to: "Master font scales, sizes, weights, and line heights based on the golden ratio for perfect readability and visual harmony."
  - `content/css/colors.md` — Simplified to: "A semantic color system with automatic light/dark theme support that respects user preferences and guarantees WCAG AA accessibility."
  - `content/css/spacing.md` — Simplified intro, removed philosophy sections
  - `content/css/utilities.md` — Added `.no-bullet` utility documentation with visual examples
  - `content/css/index.md` — Simplified CSS overview intro
  - `content/11ty/index.md` — Simplified 11ty overview intro
  - `content/getting-started.md` — Restructured with "Choose Your Path" approach
- **Key Addition**: Quick Navigation sections added to all CSS pages with links to related documentation
- **Benefits**:
  - ✅ Reduced time to find relevant information
  - ✅ Consistent navigation structure across all documentation
  - ✅ Removed redundant philosophy sections
  - ✅ Clearer "Quick Navigation" at top of each page
- **Scope**: 8 documentation files updated with consistent patterns
- **Breaking Change**: No — content still accurate, just more concise
- **Verification**: All 60+ documentation pages built successfully with 0 errors

✅ **Header Navigation Implementation** (v0.10.53+)
- **Change**: Added main site header with navigation in base.njk template
- **Files Modified**:
  - `src/layouts/base.njk` — Added `<header>` element with navigation bar
- **Navigation Links**: Home, CSS, 11ty, Cloudflare, Docs, Getting Started, Cheat Sheet
- **Styling**:
  - Used flexbox layout (site title left, nav links right)
  - Applied `.no-bullet` utility class to remove default list bullets
  - Responsive design with proper spacing
- **Benefits**:
  - ✅ Consistent navigation across all documentation pages
  - ✅ Easy access to major sections from any page
  - ✅ Professional appearance with clear hierarchy
- **Implementation Details**:
  - Header positioned at top of page
  - Uses semantic `<nav>` element
  - Maintains accessibility standards
- **Verification**: Builds successfully, renders correctly on all pages

✅ **Inline List Spacing & `.no-bullet` Utility Class** (v0.10.53+)
- **Change**: Added automatic handling of inline lists with CSS and documented `.no-bullet` utility
- **Files Modified**:
  - `src/styles/standard-05-rhythm.scss` — Added CSS rules for inline lists:
    ```scss
    ul:where(.display-flex, [style*="display: flex"], [style*="display:flex"]) li,
    ol:where(.display-flex, [style*="display: flex"], [style*="display:flex"]) li {
        margin-block-end: 0;
    }
    ```
  - `content/css/utilities.md` — Added `.no-bullet` utility documentation with visual examples
- **How It Works**:
  - Detects flex/inline lists via `.display-flex` class or inline flex styles
  - Automatically removes bottom margin from `<li>` elements
  - Uses `:where()` selector for zero specificity to avoid conflicts
- **Benefits**:
  - ✅ No manual `list-style: none` needed for navigation
  - ✅ CSS-only solution, works with or without helper class
  - ✅ Automatic detection of inline layouts
  - ✅ Proper spacing on navigation lists
- **Documentation Updated**: Utilities.md includes visual examples showing default vs. navigation lists
- **Verification**: SCSS compiled successfully, no conflicts

✅ **Font Size Inheritance for `.small` and `.smaller` Classes** (v0.10.53+)
- **Change**: Fixed cascade issue where utility classes weren't affecting nested elements
- **Problem**: `.smaller` class on footer wasn't affecting nested `<p>` tags with explicit `font-size` rules
- **Files Modified**:
  - `src/styles/standard-04-elements.scss` — Added comprehensive font-size inheritance:
    ```scss
    small {
        font-size: var(--scale-s);
    }

    .small {
        font-size: var(--scale-s);
    }

    .small * {
        font-size: inherit;
    }

    .smaller {
        font-size: var(--scale-xs);
    }

    .smaller * {
        font-size: inherit;
    }
    ```
- **Solution Approach**: Universal selector `*` with `font-size: inherit;` ensures ALL children adopt parent's font size
- **Why This Works**:
  - `inherit` keyword flows parent value to all descendants
  - Universal selector reaches all nested elements
  - Zero specificity :where() ensures cascade works properly
- **Benefits**:
  - ✅ All nested elements (p, span, em, strong, etc.) inherit correctly
  - ✅ Works with arbitrary nesting depth
  - ✅ Future-proof for new HTML elements added inside
  - ✅ Semantic HTML elements (`<small>`, `<sub>`, `<sup>`) now styled correctly
- **Scope**: Fixed for both `.small` and `.smaller` utility classes, plus `<small>` element
- **Breaking Change**: No — enhances existing functionality
- **Verification**: SCSS compiled successfully, tested with nested elements

✅ **Prism Syntax Highlighting Enhancement** (v0.10.53+)
- **Change**: Expanded and reorganized Prism syntax highlighting to support 5+ languages with semantic color tokens
- **Files Modified**:
  - `src/styles/standard-02-color.scss` — Major expansion of Prism token styling (lines 264-458)
- **Languages Supported**:
  - **HTML** — Tags (yellow), attributes (orange), values (green)
  - **Bash/Shell** — Commands (yellow), variables (cyan), strings (green), builtins (red)
  - **Nunjucks/Jinja** — Tags (yellow, matching HTML), attributes (orange), variables (cyan)
  - **Markdown** — Using semantic tokens: `--color-bold`, `--color-italic`, `--color-header`
  - **YAML** — Keys (orange), literals (cyan)
- **Language-Agnostic Tokens**:
  - Keywords: `--color-red`
  - Strings: `--color-green`
  - Numbers: `--color-cyan`
  - Functions: `--color-yellow`
  - Properties: `--color-orange`
  - Comments: `--color-subtle`
- **Semantic Color Tokens in Markdown**:
  - Bold text: `var(--color-bold)`
  - Italic text: `var(--color-italic)`
  - Headers: `var(--color-header)`
  - Reason: Automatic theme support, respects light/dark mode
- **Nunjucks Color Consistency**:
  - **Correction**: Updated Nunjucks to follow HTML color syntax (not separate colors)
  - Tags: `var(--color-yellow)` (was red, now matches HTML)
  - Attributes: `var(--color-orange)` (consistent with HTML)
  - Template variables: `var(--color-cyan)` (distinct for clarity)
- **Implementation Details**:
  - ~200 lines of organized CSS selectors
  - Language-specific targeting via `.language-*` classes
  - Minimal yet comprehensive coverage
  - Zero performance impact
- **Benefits**:
  - ✅ Professional syntax highlighting across all commonly-used languages
  - ✅ Consistent colors (language-agnostic base + language-specific overrides)
  - ✅ Semantic tokens ensure theme consistency
  - ✅ Nunjucks colors now match HTML for visual coherence
  - ✅ Markdown uses design tokens (future-proof for theme changes)
- **Scope**: Comprehensive coverage of 5+ programming languages
- **Breaking Change**: No — enhances existing functionality
- **Verification**: All syntax highlighting renders correctly, SCSS compiled successfully

✅ **Utilities Layer Moved to Position 98** (v0.10.52+)
- **Change**: Moved utilities layer to position 98 (between content layers and debug)
- **Rationale**: Utilities should come near the end, before debug utilities (layer 99)
- **Files Renamed**:
  - `standard-08-utilities.scss` → `standard-98-utilities.scss`
  - `standard-09-img.scss` → `standard-08-img.scss`
  - `standard-10-md.scss` → `standard-09-md.scss`
- **Files Modified**:
  - `src/styles/standard.scss` — Updated @use import order
  - `claude.md` — Updated SCSS layer table and repository structure
- **Benefits**:
  - ✅ Utilities positioned logically near debug layer
  - ✅ Clear separation: content/objects (0-9) vs. utilities (98) vs. debug (99)
  - ✅ Allows room for future content layers without renumbering utilities
- **New Layer Order**:
  - Layers 0-7: Core design system (variables, tokens, color, typography, elements, rhythm, grid, prose)
  - Layers 8-9: Content generators (img, md)
  - Layer 98: Utility classes and mixins
  - Layer 99: Debug utilities
- **Breaking Change**: No — CSS output identical
- **Verification**: SCSS compilation successful

✅ **Elements Layer & File Renumbering** (v0.10.52+)
- **Change**: Created new `standard-04-elements.scss` layer consolidating HTML element styling
- **Rationale**: Follow ITCSS best practice - layer 4 for generic elements, move before layer 5 (objects/rhythm)
- **Files Created**:
  - `src/styles/standard-04-elements.scss` — New comprehensive element styling layer
    - Contains: h1-h6, p, a, button, button.button (link-styled buttons), form inputs, labels, checkboxes, radios, code, pre
    - 300+ lines of organized element styling with full JSDoc documentation
- **Files Renamed/Renumbered**:
  - `standard-04-rhythm.scss` → `standard-05-rhythm.scss`
  - `standard-05-grid.scss` → `standard-06-grid.scss`
  - `standard-06-prose.scss` (formerly `reading.scss`) → `standard-07-prose.scss`
  - `standard-07-utilities.scss` → `standard-08-utilities.scss` (later moved to 98)
  - `standard-08-img.scss` → `standard-09-img.scss` (later moved to 08)
  - `standard-09-md.scss` → `standard-10-md.scss` (later moved to 09)
  - **Deleted**: `standard-11-button.scss` (functionality moved to elements layer)
- **Files Modified**:
  - `src/styles/standard.scss` — Updated all @use imports to reflect new numbering
  - `src/styles/standard-02-color.scss` — Removed element styling (links, buttons, form elements)
  - `src/styles/standard-03-typography.scss` — Removed element styling (headings, buttons, forms)
- **Benefits**:
  - ✅ Cleaner separation of concerns (typography tokens vs. element rules)
  - ✅ Follows ITCSS standard layer ordering
  - ✅ Single responsibility principle for each layer
  - ✅ Button styling consolidated in one place (no more standard-11-button.scss duplication)
  - ✅ Element styling logically grouped before utilities
- **Scope**:
  - 11 SCSS files renamed/renumbered
  - Updated standard.scss imports
  - Removed element styling from color and typography files
  - Left design tokens intact in color and typography files
- **Breaking Change**: No — CSS output remains the same, internal structure improved
- **Documentation Updated**:
  - JSDoc in standard-04-elements.scss (comprehensive with examples)
  - SCSS layer table in claude.md updated
  - File structure diagram updated
  - Import statements in standard.scss reflect new numbering
- **Backward Compatible**: Yes — No breaking changes to CSS output
- **Verification**:
  - SCSS compilation successful after syntax fixes
  - All imports updated and verified
  - Redundant button file deleted and removed from imports

✅ **Rhythm Class Applied to HTML Root** (v0.10.52)
- **Change**: Moved `.rhythm` class from `<body>` to `<html>` element
- **Files Changed**:
  - `src/styles/standard-04-rhythm.scss` — Updated selectors
  - `src/layouts/base.njk` — Added class to `<html>`
- **Benefits**:
  - ✅ True root-level styling (best practice)
  - ✅ Better CSS cascade and inheritance
  - ✅ Works with out-of-flow content (modals, portals)
  - ✅ Aligns with industry standards
- **Documentation Updated**:
  - JSDoc comments in rhythm SCSS file
  - `content/css/spacing.md` — New section on `.rhythm` class
  - Body padding now only applies to `<body>` when rhythm active
- **Backward Compatible**: Yes — `.rhythm` on containers still works

✅ **Reading Class Renamed to Prose** (v0.10.52+)
- **Change**: Renamed `.reading` class to `.prose` throughout framework
- **Rationale**: `.prose` is more intuitive and aligns with industry standard (Tailwind, etc.)
- **Files Changed**:
  - `src/styles/standard-06-reading.scss` — SCSS entry point and all selectors
  - `src/layouts/base.njk` — Footer element class
  - `content/template/simple.md` — Example template
  - All documentation files updated (content/css/*, content/docs/*, etc.)
  - JSDoc comments updated with new naming
- **Scope**:
  - 30+ files updated
  - Auto-generated docs regenerated
  - All examples and guides updated
- **Breaking Change**: Yes — Class name changed from `.reading` to `.prose`
  - Migration: Simple find/replace `.reading` → `.prose`
  - All `.reading.small`, `.reading.feature` etc. → `.prose.small`, `.prose.feature`
- **Documentation Updated**:
  - Prose Layout System docs (renamed from Reading Layout)
  - CSS guides (spacing.md, css/index.md)
  - Auto-generated documentation
  - Debug system docs
  - Markdown styling docs
  - claude.md with this entry
- **Backward Compatible**: No — Users must update their markup
- **Guidance**:
  - Update all HTML templates: `.reading` → `.prose`
  - Update all CSS/SCSS: `.reading` → `.prose`
  - Update documentation references

---

### High Priority (Should Consider Soon)

🟡 **Auto-initialization Behavior**
- **Observation**: `standard.js` auto-initializes with aggressive settings on page load
- **Current**: All typography features enabled by default when script loads
- **Suggestion**: Add opt-in flag via data attribute (e.g., `<script data-standard-init="false">`)
- **Benefit**: Users who want manual control can disable auto-init
- **Impact**: Low - backward compatible with feature flag
- **Related Files**: `src/js/standard.js` (auto-initialization section)

🟡 **Image Zoom CSS Injection**
- **Observation**: Image zoom styles injected dynamically via JavaScript
- **Current**: `disableImageActiveStyles()` creates `<style>` tag at runtime
- **Suggestion**: Precompile image zoom styles into `standard-08-img.scss`
- **Benefit**: Reduces JS payload, prevents flash of unstyled content
- **Impact**: Medium - requires SCSS refactoring
- **Related Files**: `src/js/standard.js:disableImageActiveStyles()`, `src/styles/standard-08-img.scss`

🟡 **Cloudflare Plugin Utilities**
- **Observation**: Cloudflare plugin is minimal, mostly just copies files
- **Suggestion**: Add helper utilities for common patterns (redirects, rate limiting, CORS, caching)
- **Benefit**: Makes serverless functions more approachable
- **Impact**: Medium - adds utility functions
- **Related Files**: `src/eleventy/cloudflare/utils.js`

### Medium Priority (Nice to Have)

🟢 **Version Pinning & Dependency Documentation**
- **Observation**: Package.json has dev dependencies but no version range guidance
- **Suggestion**: Add `CONTRIBUTING.md` with tested version ranges
- **Benefit**: Helps contributors set up environment correctly
- **Impact**: Low - documentation only
- **Related Files**: New file `CONTRIBUTING.md`, update `README.md`

🟢 **Performance Profiling System**
- **Observation**: `standard.js` has batch processing but no metrics system
- **Suggestion**: Add optional performance tracking mode (dev only)
  ```javascript
  enablePerformanceMeasurement: false,
  // Tracks: processTime, elementsProcessed, batchCount
  ```
- **Benefit**: Helps optimize large documents, debugging slow pages
- **Impact**: Medium - adds event data
- **Related Files**: `src/js/standard.js`

🟢 **Error Reporting Improvements**
- **Observation**: Limited error messages for configuration issues
- **Suggestion**: Add user-friendly error messages with suggestions
- **Example**: If `locale` is invalid, suggest valid options
- **Impact**: Low - improves DevX
- **Related Files**: `src/eleventy/eleventy.js`, `src/js/standard.js`

### Low Priority (Enhancement Ideas)

💡 **Locale Expansion**
- **Observation**: Supports 5 locales (EN, FR, DE, ES, IT)
- **Suggestion**: Add community-contributed locales (PT, NL, RU, ZH, JA)
- **Benefit**: Extends framework utility globally
- **Impact**: Low - data-driven, can be gradual
- **Related Files**: `src/js/standard.js:getRulesForLocale()`

💡 **Typography Rule Customization**
- **Observation**: Typography rules are hardcoded per locale
- **Suggestion**: Allow users to override rules:
  ```javascript
  const standard = new Standard({
    customRules: {
      en: {
        emDash: "—", // Override default
        leftDoubleQuote: "«" // Mix rules
      }
    }
  });
  ```
- **Benefit**: Supports regional variations within locales
- **Impact**: Medium - adds complexity but very flexible
- **Related Files**: `src/js/standard.js`

💡 **Plugin Event System for 11ty**
- **Observation**: 11ty plugin is functional but not extensible by users
- **Suggestion**: Add hook system (before/after each plugin runs)
  ```javascript
  eleventyConfig.on("standard:beforeMarkdown", (config) => {});
  eleventyConfig.on("standard:afterMarkdown", (config) => {});
  ```
- **Benefit**: Allows users to customize/extend without modifying source
- **Impact**: Medium - adds event infrastructure
- **Related Files**: `src/eleventy/eleventy.js`

💡 **CSS Variable Preset Collections**
- **Observation**: CSS variables exist but no preset themes
- **Suggestion**: Add preset theme files (minimal, classic, modern, dark)
  ```scss
  @import "standard/presets/classic.scss";
  ```
- **Benefit**: Faster setup for users with different aesthetic goals
- **Impact**: Low - pure CSS additions
- **Related Files**: `src/styles/` (new presets subdirectory)

💡 **CLI Tool for Project Setup**
- **Observation**: Quick-start requires manual file creation
- **Suggestion**: Add `standard-cli` or npm script generator
  ```bash
  npm init @zefish/standard@latest
  ```
- **Benefit**: Faster onboarding, less copy-paste errors
- **Impact**: High - but separate package
- **Related Files**: Potential new package

### Architecture Improvements

✅ **Current Strengths**
- Excellent separation of concerns
- Zero runtime dependencies (minimal attack surface)
- Progressive enhancement throughout
- Mathematical principles consistently applied
- Comprehensive JSDoc with auto-doc generation

🔧 **Potential Refactoring**
1. **Typography Engine**
   - Consider splitting `standard.js` into smaller modules if it grows beyond ~1000 lines
   - Current: ~950 lines (manageable, but approaching limit)
   - Could split into: `typography.js`, `widow-prevention.js`, `image-zoom.js`

2. **CSS Architecture**
   - 12 SCSS layers is well-organized
   - Consider adding layer 8.5 for grid utilities if they grow
   - Monitor total CSS size (currently well under 50KB uncompressed)

3. **Plugin System**
   - Consider generic plugin interface/base class
   - Current: Each plugin self-contained (good)
   - Could standardize lifecycle hooks for consistency

### Code Quality Notes

✨ **Exemplary Patterns**
- Locale-specific orphan prevention is elegant (single regex per locale)
- TreeWalker usage preserves HTML structure while processing text
- Smart caching with `.doc-generator-hash` prevents unnecessary regeneration
- Element-level processing markers prevent cumulative changes

⚠️ **Watch Out For**
- `standard.js` does significant DOM manipulation - test thoroughly on large documents
- Regex patterns in `fixArrowsAndSymbols` could match unintended patterns (consider whitespace requirements)
- MutationObserver can be expensive on highly dynamic pages - document performance implications

### Documentation Opportunities

📚 **Content to Add**
- [ ] Performance benchmarks for large documents
- [ ] Browser compatibility matrix (updated)
- [ ] Accessibility audit results
- [ ] Use case studies or examples
- [ ] Contributing guide for translations
- [ ] Troubleshooting guide for common issues

---

## How to Use This Section

This "Observations & Improvements" log serves as:
- **Idea capture** — Document thoughts as they arise
- **Priority tracking** — Focus efforts on high-impact items
- **Decision log** — Record why something wasn't implemented
- **Future reference** — Plan next version features

**When to update**:
- After code review (add observations)
- When planning releases (prioritize items)
- Before major refactor (reference for scope)
- After user feedback (add suggestions)

**Labels**:
- 🟡 High Priority (next 1-2 releases)
- 🟢 Medium Priority (future releases)
- 💡 Low Priority (long-term ideas)
- ✅ Current Strengths
- 🔧 Refactoring Ideas
- ✨ Exemplary Patterns
- ⚠️ Watch Out For
- 📚 Documentation Opportunities

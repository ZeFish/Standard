@charset "UTF-8";
/*!
 * Standard Framework - Fine-Art Typography Management
 *
 * A comprehensive framework implementing:
 * - Classical typography rules that CSS cannot handle
 * - Progressive enhancement with zero-configuration setup
 * - Multi-locale support with automatic detection
 * - Dynamic content observation
 * - Performance-optimized batch processing
 * - Image zoom with keyboard navigation
 *
 * Based on research from:
 * - The Elements of Typographic Style (Robert Bringhurst)
 * - Ellen Lupton's typography works
 * - Classical European typography conventions
 * - Swiss typography principles
 * - Modern web accessibility standards
 *
 * Philosophy: Respect classic typography rules, but readability always wins.
 *
 * @version Standard Framework v0.11.2 | 2025-10-22T17:46:28.348Z
 * @license MIT
 */
/* Document
 * ========================================================================== */
/**
 * 1. Add border box sizing in all browsers (opinionated).
 * 2. Backgrounds do not repeat by default (opinionated).
 */
*,
::before,
::after {
  box-sizing: border-box; /* 1 */
  background-repeat: no-repeat; /* 2 */
}

/**
 * 1. Add text decoration inheritance in all browsers (opinionated).
 * 2. Add vertical alignment inheritance in all browsers (opinionated).
 */
::before,
::after {
  text-decoration: inherit; /* 1 */
  vertical-align: inherit; /* 2 */
}

/**
 * 1. Use the default cursor in all browsers (opinionated).
 * 2. Change the line height in all browsers (opinionated).
 * 3. Breaks words to prevent overflow in all browsers (opinionated).
 * 4. Use a 4-space tab width in all browsers (opinionated).
 * 5. Remove the grey highlight on links in iOS (opinionated).
 * 6. Prevent adjustments of font size after orientation changes in iOS.
 */
:where(:root) {
  cursor: default; /* 1 */
  line-height: 1.5; /* 2 */
  overflow-wrap: break-word; /* 3 */
  -moz-tab-size: 4; /* 4 */
  tab-size: 4; /* 4 */
  -webkit-tap-highlight-color: transparent; /* 5 */
  -webkit-text-size-adjust: 100%; /* 6 */
}

/* Sections
 * ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
:where(body) {
  margin: 0;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Edge, Firefox, and Safari.
 */
:where(h1) {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
 * ========================================================================== */
/**
 * Remove the margin on nested lists in Chrome, Edge, and Safari.
 */
:where(dl, ol, ul) :where(dl, ol, ul) {
  margin: 0;
}

/**
 * 1. Correct the inheritance of border color in Firefox.
 * 2. Add the correct box sizing in Firefox.
 */
:where(hr) {
  color: inherit; /* 1 */
  height: 0; /* 2 */
}

/**
 * Remove the list style on navigation lists in all browsers (opinionated).
 */
:where(nav) :where(ol, ul) {
  list-style-type: none;
  padding: 0;
}

/**
 * Prevent VoiceOver from ignoring list semantics in Safari (opinionated).
 */
:where(nav li)::before {
  content: "​";
  float: left;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 * 3. Prevent overflow of the container in all browsers (opinionated).
 */
:where(pre) {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
  overflow: auto; /* 3 */
}

/* Text-level semantics
 * ========================================================================== */
/**
 * Add the correct text decoration in Safari.
 */
:where(abbr[title]) {
  text-decoration: underline;
  text-decoration: underline dotted;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
:where(b, strong) {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
:where(code, kbd, samp) {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */
:where(small) {
  font-size: 80%;
}

/* Embedded content
 * ========================================================================== */
/*
 * Change the alignment on media elements in all browsers (opinionated).
 */
:where(audio, canvas, iframe, img, svg, video) {
  vertical-align: middle;
}

/**
 * Remove the border on iframes in all browsers (opinionated).
 */
:where(iframe) {
  border-style: none;
}

/**
 * Change the fill color to match the text color in all browsers (opinionated).
 */
:where(svg:not([fill])) {
  fill: currentColor;
}

/* Tabular data
 * ========================================================================== */
/**
 * 1. Collapse border spacing in all browsers (opinionated).
 * 2. Correct table border color inheritance in all Chrome, Edge, and Safari.
 * 3. Remove text indentation from table contents in Chrome, Edge, and Safari.
 */
:where(table) {
  border-collapse: collapse; /* 1 */
  border-color: inherit; /* 2 */
  text-indent: 0; /* 3 */
}

/* Forms
 * ========================================================================== */
/**
 * Remove the margin on controls in Safari.
 */
:where(button, input, select) {
  margin: 0;
}

/**
 * Correct the inability to style buttons in iOS and Safari.
 */
:where(button, [type=button i], [type=reset i], [type=submit i]) {
  -webkit-appearance: button;
}

/**
 * Change the inconsistent appearance in all browsers (opinionated).
 */
:where(fieldset) {
  border: 1px solid #a0a0a0;
}

/**
 * Add the correct vertical alignment in Chrome, Edge, and Firefox.
 */
:where(progress) {
  vertical-align: baseline;
}

/**
 * 1. Remove the margin in Firefox and Safari.
 * 3. Change the resize direction in all browsers (opinionated).
 */
:where(textarea) {
  margin: 0; /* 1 */
  resize: vertical; /* 3 */
}

/**
 * 1. Correct the odd appearance in Chrome, Edge, and Safari.
 * 2. Correct the outline style in Safari.
 */
:where([type=search i]) {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Safari.
 */
::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */
::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54;
}

/**
 * Remove the inner padding in Chrome, Edge, and Safari on macOS.
 */
::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style upload buttons in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
 * ========================================================================== */
/*
 * Add the correct styles in Safari.
 */
:where(dialog) {
  background-color: white;
  border: solid;
  color: black;
  height: -moz-fit-content;
  height: fit-content;
  left: 0;
  margin: auto;
  padding: 1em;
  position: absolute;
  right: 0;
  width: -moz-fit-content;
  width: fit-content;
}

:where(dialog:not([open])) {
  display: none;
}

/*
 * Add the correct display in Safari.
 */
:where(details > summary:first-of-type) {
  display: list-item;
}

/* Accessibility
 * ========================================================================== */
/**
 * Change the cursor on busy elements in all browsers (opinionated).
 */
:where([aria-busy=true i]) {
  cursor: progress;
}

/*
 * Change the cursor on control elements in all browsers (opinionated).
 */
:where([aria-controls]) {
  cursor: pointer;
}

/*
 * Change the cursor on disabled, not-editable, or otherwise
 * inoperable elements in all browsers (opinionated).
 */
:where([aria-disabled=true i], [disabled]) {
  cursor: not-allowed;
}

/*
 * Change the display on visually hidden accessible elements
 * in all browsers (opinionated).
 */
:where([aria-hidden=false i][hidden]) {
  display: initial;
}

:where([aria-hidden=false i][hidden]:not(:focus)) {
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component SCSS Variables & Mixins
 * @category Foundation
 * @description Responsive breakpoints and rhythm application mixins for consistent
 * vertical rhythm and spacing across all elements. These mixins ensure proper
 * spacing application for rhythm-aware components.
 *
 * @prop {variable} $mobile Mobile breakpoint (480px)
 * @prop {variable} $small Small screen breakpoint (768px)
 * @prop {variable} $large Large screen breakpoint (1024px)
 * @prop {variable} $wide Wide screen breakpoint (1440px)
 *
 * @example
 * // Using breakpoint variables
 * @media (min-width: $small) {
 *   font-size: 1.2rem;
 * }
 *
 * // Using rhythm mixin
 * @include apply-rhythm {
 *   margin-bottom: var(--space);
 * }
 *
 * @since 0.1.0
 * @see standard-01-token.scss
 */
/**
 * @component Rhythm Application Mixin
 * @category Foundation
 * @description Applies rhythm spacing rules to semantic HTML elements
 * and common layout components. Ensures consistent vertical rhythm.
 *
 * @example
 * @include apply-rhythm {
 *   margin-bottom: var(--space);
 * }
 *
 * @since 0.1.0
 */
/**
 * @component Rhythm Block Mixin
 * @category Foundation
 * @description Applies enhanced spacing to block-level elements that require
 * extra visual separation such as callouts, blockquotes, code blocks, and tables.
 *
 * @example
 * @include apply-rhythm-block {
 *   margin-bottom: calc(var(--space) * var(--rhythm-multiplier-block));
 * }
 *
 * @since 0.1.0
 */
/* Special blocks with extra spacing */
/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component Design Tokens
 * @category Foundation
 * @description Primitive design tokens forming the foundation of the design system.
 * Includes mathematical ratios, modular scales, spacing system, and animation curves.
 * All tokens use CSS custom properties for runtime customization.
 *
 * @example
 * :root {
 *   --font-ratio: var(--ratio-silver);
 *   --space: 1rlh;
 *   --scale-l: calc(1rem * 1.414);
 * }
 *
 * @since 0.1.0
 * @see standard-00-variables.scss
 */
/* Primitive Design Tokens - Foundation layer with logical properties */
:root {
  /* Base measurements & ratios - the foundation of everything else */
  --font-size: 1rem;
  /* Golden Ratio & Mathematical Precision */
  --ratio-golden: 1.618;
  --ratio-wholestep: 1.618;
  --ratio-silver: 1.414;
  --ratio-halfstep: 1.272; /* sqrt of golden ratio */
  --ratio-quarterstep: 1.128;
  --ratio-eighthstep: 1.062;
  /* Current ratio (configurable) */
  --font-ratio: var(--ratio-silver);
  --font-density: 1.2;
  --font-density-s: 1;
  --font-mobile-size: 1rem;
  --font-mobile-ratio: var(--ratio-halfstep);
  --rhythm-multiplier: 1;
  --rhythm-multiplier-block: 2;
  --body-padding-multiplier: 1;
  --body-mobile-padding-multiplier: 1;
  /* Modular Scale - calculated from font-ratio */
  --scale-xs: calc(var(--font-size) * pow(var(--font-ratio), -1));
  --scale-s: calc(var(--font-size) * pow(var(--font-ratio), -0.5));
  --scale: var(--font-size);
  --scale-l: calc(var(--font-size) * pow(var(--font-ratio), 1));
  --scale-xl: calc(var(--font-size) * pow(var(--font-ratio), 2));
  --scale-2xl: calc(var(--font-size) * pow(var(--font-ratio), 3));
  --scale-3xl: calc(var(--font-size) * pow(var(--font-ratio), 4));
  /* ADD: Extreme scales for display/poster typography */
  --scale-display: calc(
      var(--font-size) * pow(var(--font-ratio), 6)
  ); /* ~10rem */
  --scale-poster: calc(
      var(--font-size) * pow(var(--font-ratio), 8)
  ); /* ~16rem */
  /* ADD: Micro scales for technical labels */
  --scale-micro: calc(
      var(--font-size) * pow(var(--font-ratio), -2)
  ); /* ~0.6rem */
  --scale-nano: calc(
      var(--font-size) * pow(var(--font-ratio), -3)
  ); /* ~0.4rem */
  /* Logical Spacing Scale - based on rhythm unit */
  --space-3xs: calc(1rlh / 5);
  --space-2xs: calc(1rlh / 4);
  --space-xs: calc(1rlh / 3);
  --space-s: calc(1rlh / 2);
  --space: 1rlh; /* Base rhythm unit */
  --space-l: calc(2 * 1rlh);
  --space-xl: calc(3 * 1rlh);
  --space-2xl: calc(4 * 1rlh);
  --space-3xl: calc(5 * 1rlh);
  /* Logical border properties */
  --hr-thickness: 1px;
  --border-radius: var(--space-2xs);
  /* Z-index scale */
  --z-base: 1;
  --z-dropdown: 1000;
  --z-sticky: 1020;
  --z-fixed: 1030;
  --z-modal-backdrop: 1040;
  --z-offcanvas: 1050;
  --z-modal: 1060;
  --z-popover: 1070;
  --z-tooltip: 1080;
  --z-toast: 1090;
  --z-image-zoom: 9999;
  /* Animation scale */
  --duration-superfast: 0.15s;
  --duration-fast: 0.25s;
  --duration-normal: 0.35s;
  --duration-slow: 0.5s;
  --motion-smooth: cubic-bezier(0.4, 0, 0.2, 1);
  --motion-bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component Color System
 * @category Colors
 * @description Complete light/dark color system with semantic color tokens.
 * Automatically respects user's system color scheme preference using CSS media queries.
 * Includes analog-inspired light theme and retro tech-inspired dark theme.
 * All colors designed for WCAG AA accessibility contrast ratios.
 *
 * @prop {color} --color-background Page background color
 * @prop {color} --color-foreground Text foreground color
 * @prop {color} --color-accent Primary accent color
 * @prop {color} --color-success Success/positive state color
 * @prop {color} --color-warning Warning/caution state color
 * @prop {color} --color-error Error/negative state color
 * @prop {color} --color-info Info/neutral state color
 *
 * @example
 * // Light theme colors
 * :root {
 *   --color-background: white;
 *   --color-foreground: #262626;
 *   --color-accent: #c8a840;
 * }
 *
 * // Dark theme (auto-applied)
 * @media (prefers-color-scheme: dark) {
 *   :root {
 *     --color-background: #0f0f0f;
 *     --color-foreground: #dbdbdb;
 *   }
 * }
 *
 * @since 0.1.0
 * @see https://webaim.org/articles/contrast/
 */
/* Modern Color System - Automatic Light/Dark Theme with System Preference Detection */
:root {
  /* Tell browser we support both color schemes */
  color-scheme: light dark;
  /* ===== LIGHT MODE PALETTE ===== */
  /* Natural, paper-like, analog-inspired colors */
  --color-light-background: white;
  --color-light-foreground: #262626;
  --color-light-red: #b14c42; /* dusty red clay */
  --color-light-orange: #d78a5a; /* trail-worn orange */
  --color-light-yellow: #c8a840; /* parchment mustard */
  --color-light-green: #5e9d80; /* sage green */
  --color-light-cyan: #6ba4b6; /* glacier teal */
  --color-light-blue: #4f81a4; /* faded blueprint */
  --color-light-purple: #7a6c91; /* dusk lavender */
  --color-light-pink: #b97aa0; /* vintage mauve rose */
  --color-light-accent: var(--color-light-yellow);
  --color-light-success: var(--color-light-green);
  --color-light-warning: var(--color-light-orange);
  --color-light-error: var(--color-light-red);
  --color-light-info: var(--color-light-blue);
  /* ===== DARK MODE PALETTE ===== */
  /* Soft-glow, night-usable, retro tech inspired */
  --color-dark-background: #0f0f0f; /* #111 */
  --color-dark-foreground: #dbdbdb; /* #aaa */
  --color-dark-red: #db6057; /* ember red */
  --color-dark-orange: #e58f5c; /* lantern orange */
  --color-dark-yellow: #dcb757; /* candlelight gold */
  --color-dark-green: #74ba98; /* forest mint glow */
  --color-dark-cyan: #7db9c8; /* creek frost */
  --color-dark-blue: #6d96b8; /* twilight blueprint */
  --color-dark-purple: #a18db6; /* smoky violet dusk */
  --color-dark-pink: #d49ab8; /* faded polaroid blush */
  --color-dark-accent: var(--color-dark-yellow);
  --color-dark-success: var(--color-dark-green);
  --color-dark-warning: var(--color-dark-orange);
  --color-dark-error: var(--color-dark-red);
  --color-dark-info: var(--color-dark-blue);
  /* ===== SEMANTIC COLOR TOKENS (Default to Light) ===== */
  --color-background: var(--color-light-background);
  --color-foreground: var(--color-light-foreground);
  --color-header: var(--color-light-header), var(--color-foreground);
  --color-red: var(--color-light-red);
  --color-orange: var(--color-light-orange);
  --color-yellow: var(--color-light-yellow);
  --color-green: var(--color-light-green);
  --color-cyan: var(--color-light-cyan);
  --color-blue: var(--color-light-blue);
  --color-purple: var(--color-light-purple);
  --color-pink: var(--color-light-pink);
  --color-accent: var(--color-light-accent);
  --color-success: var(--color-light-success);
  --color-warning: var(--color-light-warning);
  --color-error: var(--color-light-error);
  --color-info: var(--color-light-info);
  /* ===== COMPUTED SEMANTIC COLORS ===== */
  --color-muted: color-mix(in srgb, var(--color-foreground) 60%, transparent);
  --color-subtle: color-mix(
      in srgb,
      var(--color-foreground) 40%,
      transparent
  );
  --color-border: color-mix(
      in srgb,
      var(--color-foreground) 10%,
      transparent
  );
  --color-background-secondary: color-mix(
      in srgb,
      var(--color-foreground) 3%,
      var(--color-background)
  );
  /* Interactive states */
  --color-hover: color-mix(in srgb, var(--color-accent) 35%, transparent);
  --color-active: color-mix(in srgb, var(--color-accent) 20%, transparent);
  /* ===== SHADOWS AND EFFECTS ===== */
  --shadow-color: color-mix(in srgb, var(--color-foreground) 7%, transparent);
  --shadow: 0 0 var(--space-2xs) var(--shadow-color);
  /* ===== DESIGN TOKENS ===== */
  --border: 1px solid var(--color-border);
  --border-accent: 2px solid var(--color-accent);
  /* Theme transition for smooth switching */
  transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
}

/* ===== AUTOMATIC DARK MODE (System Preference) ===== */
@media (prefers-color-scheme: dark) {
  :root {
    /* Override semantic tokens to use dark palette */
    --color-background: var(--color-dark-background);
    --color-foreground: var(--color-dark-foreground);
    --color-header: var(--color-dark-header), var(--color-foreground);
    --color-red: var(--color-dark-red);
    --color-orange: var(--color-dark-orange);
    --color-yellow: var(--color-dark-yellow);
    --color-green: var(--color-dark-green);
    --color-cyan: var(--color-dark-cyan);
    --color-blue: var(--color-dark-blue);
    --color-purple: var(--color-dark-purple);
    --color-pink: var(--color-dark-pink);
    --color-accent: var(--color-dark-accent);
    --color-success: var(--color-dark-success);
    --color-warning: var(--color-dark-warning);
    --color-error: var(--color-dark-error);
    --color-info: var(--color-dark-info);
    /* Adjusted computed colors for dark mode */
    --color-muted: color-mix(
        in srgb,
        var(--color-foreground) 65%,
        transparent
    );
    --color-subtle: color-mix(
        in srgb,
        var(--color-foreground) 45%,
        transparent
    );
    --color-border: color-mix(
        in srgb,
        var(--color-foreground) 10%,
        transparent
    );
    --color-background-secondary: color-mix(
        in srgb,
        var(--color-foreground) 5%,
        var(--color-background)
    );
    /* Dark mode shadows */
    --shadow-color: color-mix(in srgb, #000 40%, transparent);
    --shadow: 0 2px 4px var(--shadow-color);
    --shadow-l: 0 8px 16px var(--shadow-color);
    --shadow-xl: 0 12px 32px var(--shadow-color);
  }
}
/* ===== ACCESSIBILITY SUPPORT ===== */
/* High contrast mode support */
@media (prefers-contrast: high) {
  :root {
    --color-border: var(--color-foreground);
    --color-muted: var(--color-foreground);
    --color-subtle: var(--color-foreground);
  }
}
/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  :root {
    transition: none;
  }
  * {
    transition: none !important;
    animation: none !important;
  }
}
/* Windows High Contrast mode */
@media (forced-colors: active) {
  :root {
    --color-background: Canvas;
    --color-foreground: CanvasText;
    --color-accent: Highlight;
    --color-border: CanvasText;
    --color-muted: GrayText;
  }
}
/* ===== BASE HTML STYLING ===== */
html {
  color: var(--color-foreground);
  background: var(--color-background);
  /* Smooth theme transitions */
  transition: background-color 0.2s ease, color 0.2s ease;
}

body {
  background: var(--color-background);
  color: var(--color-foreground);
}

/* ===== SEMANTIC STATE CLASSES ===== */
/* Kept in color layer for system coherence (semantic messaging) */
.text-success {
  color: var(--color-success);
}

.text-warning {
  color: var(--color-warning);
}

.text-error {
  color: var(--color-error);
}

.text-info {
  color: var(--color-info);
}

/* Note: General color utilities (.text-muted, .text-subtle, .text-accent, .bg-secondary, .border-*) */
/* moved to standard-98-utilities.scss for better layer organization */
/* PrismJS syntax highlighting - Language agnostic tokens */
/* Keywords, control flow */
.token.keyword,
.token.module,
.token.class-name {
  color: var(--color-red);
}

/* Strings and attributes */
.token.string,
.token.attr-value {
  color: var(--color-green);
}

/* Numbers and booleans */
.token.number,
.token.boolean {
  color: var(--color-cyan);
}

/* Functions, methods, tags */
.token.function,
.token.tag,
.token.builtin {
  color: var(--color-yellow);
}

/* Properties, attributes, selectors */
.token.property,
.token.attr-name,
.token.selector {
  color: var(--color-orange);
}

/* Punctuation, operators, delimiters */
.token.punctuation,
.token.operator {
  color: var(--color-muted);
}

/* Comments */
.token.comment {
  color: var(--color-subtle);
  font-style: italic;
}

/* HTML-specific */
.token.tag > .token.punctuation {
  color: var(--color-muted);
}

.token.attr-name {
  color: var(--color-orange);
}

/* Namespace and doctype */
.token.doctype,
.token.namespace {
  color: var(--color-purple);
}

/* Generics */
.token.generics {
  color: var(--color-blue);
}

/* YAML-specific */
.language-yaml .token.key {
  color: var(--color-orange);
}

.language-yaml .token.literal {
  color: var(--color-cyan);
}

/* Markdown-specific */
.language-markdown .token.italic,
.language-md .token.italic,
.language-markdown .token.emphasis,
.language-md .token.emphasis {
  color: var(--color-italic);
  font-style: italic;
}

.language-markdown .token.bold,
.language-md .token.bold,
.language-markdown .token.strong,
.language-md .token.strong {
  color: var(--color-bold);
  font-weight: bold;
}

.language-markdown .token.link,
.language-md .token.link {
  color: var(--color-blue);
}

.language-markdown .token.url,
.language-md .token.url {
  color: var(--color-cyan);
}

.language-markdown .token.heading,
.language-md .token.heading {
  color: var(--color-header);
  font-weight: bold;
}

.language-markdown .token.code,
.language-md .token.code,
.language-markdown .token.codespan,
.language-md .token.codespan {
  color: var(--color-green);
}

.language-markdown .token.list,
.language-md .token.list {
  color: var(--color-orange);
}

.language-markdown .token.table,
.language-md .token.table {
  color: var(--color-blue);
}

/* Bash/Shell-specific */
.language-bash .token.function {
  color: var(--color-yellow);
}

.language-bash .token.variable {
  color: var(--color-cyan);
}

.language-bash .token.builtin {
  color: var(--color-red);
}

.language-bash .token.string {
  color: var(--color-green);
}

.language-bash .token.parameter {
  color: var(--color-orange);
}

.language-sh .token.function,
.language-shell .token.function {
  color: var(--color-yellow);
}

.language-sh .token.variable,
.language-shell .token.variable {
  color: var(--color-cyan);
}

.language-sh .token.builtin,
.language-shell .token.builtin {
  color: var(--color-red);
}

/* Nunjucks/Jinja-specific - inherits HTML color syntax */
.language-nunjucks .token.tag,
.language-njk .token.tag {
  color: var(--color-yellow);
}

.language-nunjucks .token.tag > .token.punctuation,
.language-njk .token.tag > .token.punctuation {
  color: var(--color-muted);
}

.language-nunjucks .token.attr-name,
.language-njk .token.attr-name {
  color: var(--color-orange);
}

.language-nunjucks .token.attr-value,
.language-njk .token.attr-value {
  color: var(--color-green);
}

/* Nunjucks template variables and expressions */
.language-nunjucks .token.variable,
.language-njk .token.variable {
  color: var(--color-cyan);
}

.language-nunjucks .token.expression,
.language-njk .token.expression {
  color: var(--color-cyan);
}

.language-nunjucks .token.filter,
.language-njk .token.filter {
  color: var(--color-orange);
}

/* ===== INTERACTIVE ELEMENTS ===== */
/* Element-specific styling moved to standard-04-elements.scss
   This file now contains only color system design tokens.
   See standard-04-elements.scss for link, button, and form element styling. */
/* Selection highlighting */
::selection {
  background: color-mix(in srgb, var(--color-accent) 25%, transparent);
  color: var(--color-foreground);
}

/* =========================== */
/* RHYTHM ELEMENT COLORS       */
/* =========================== */
/* Blockquote borders */
blockquote {
  border-inline-start: calc(var(--space-2xs) * var(--rhythm-multiplier)) solid var(--color-border);
}

/* Horizontal rule colors */
hr {
  height: var(--hr-thickness);
  background: var(--color-border);
  border: none;
}

hr.plain {
  background: var(--color-foreground);
}

hr.thick {
  height: calc(var(--hr-thickness) * 4);
  background: var(--color-foreground);
}

hr.accent {
  height: calc(var(--hr-thickness) * 3);
  background: var(--color-accent);
}

hr.hairline {
  height: 1px;
  opacity: 0.3;
}

/* Form field group borders */
fieldset {
  border: var(--border);
  border-radius: var(--border-radius);
}

/* Media element borders */
img,
video,
audio,
iframe {
  border-radius: var(--border-radius);
  border: var(--border);
}

/* Table colors and borders */
th,
td {
  border: var(--border);
}

th {
  background: var(--color-background-secondary);
}

/* Callout colors */
.callout {
  background: var(--color-background-secondary);
  border: var(--border);
  border-radius: var(--border-radius);
}

/* Strong and emphasis */
strong {
  color: var(--color-bold);
  font-weight: 600;
}

em {
  color: var(--color-italic);
  font-style: italic;
}

/* Horizontal rules */
hr {
  background: var(--color-border);
  border: none;
  block-size: 1px;
}

/* Code elements */
code:not(pre code),
pre {
  background: var(--color-background-secondary);
  color: var(--color-foreground);
  border: var(--border);
  border-radius: var(--border-radius);
  box-shadow: inset var(--shadow);
}

code:not(pre code) {
  box-shadow: unset;
  padding: 0 var(--space-3xs);
}

/* Tables */
table {
  border-collapse: collapse;
}

th,
td {
  border: var(--border);
}

th {
  background: var(--color-background-secondary);
  font-weight: 600;
}

/* Quotes */
blockquote {
  border-inline-start: var(--space-3xs) solid var(--color-muted);
  background: var(--color-background-secondary);
  color: var(--color-muted);
}

/* Mark highlighting */
mark {
  background: color-mix(in srgb, var(--color-yellow) 30%, var(--color-background));
  color: var(--color-foreground);
}

/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component Typography System
 * @category Typography
 * @description Fine-art typography system using variable fonts, OpenType features,
 * and mathematical scaling. Implements classical typography rules with modern web capabilities.
 * Supports multiple font families, optical sizing, and locale-specific rules.
 *
 * @prop {string} --font-text Font family for body text (default: InterVariable)
 * @prop {string} --font-header Font family for headings (default: InterVariable)
 * @prop {string} --font-monospace Monospace font for code (default: IBM Plex Mono)
 * @prop {number} --font-weight Body text weight (default: 400)
 * @prop {number} --bold-weight Bold text weight (default: 600)
 * @prop {string} --font-feature OpenType features to enable
 * @prop {string} --font-variation Variable font axis settings
 *
 * @example
 * html {
 *   font-family: var(--font-text);
 *   font-size: var(--scale);
 *   font-feature-settings: var(--font-feature);
 *   line-height: var(--line-height);
 *   text-wrap: pretty;
 * }
 *
 * @since 0.1.0
 * @see standard-01-token.scss
 */
/* Typography Design Tokens - Using logical properties */
:root {
  /* Font stacks */
  --font-sans: InterVariable, system-ui, -apple-system, sans-serif;
  --font-serif: "Source Serif 4", serif;
  --font-text: var(--font-sans);
  --font-header: InterVariable, system-ui, -apple-system, sans-serif;
  --font-monospace:
      "IBM Plex Mono", ui-monospace, "SF Mono", "Courier New", monospace;
  /* Font features & variations */
  --font-feature: "liga", "dlig", "kern", "calt", "zero";
  --font-variation: "";
  --font-header-feature:
      "liga", "dlig", "kern", "calt", "case", "cv06", "cv10", "cv11", "cv12",
      "cv13", "ss01";
  --font-header-variation: "";
  --font-monospace-feature: "liga", "dlig", "kern", "calt";
  --font-monospace-variation: "";
  /* Font properties */
  --font-weight: 400;
  --bold-weight: 600;
  --font-letter-spacing: normal;
  --font-header-letter-spacing: -0.065em;
  --font-header-line-height: 0.75em;
  --font-header-weight: 900;
  /* Interface font tokens */
  --font-interface: InterVariable, system-ui, -apple-system, sans-serif;
  --font-interface-feature: "liga", "dlig", "kern", "calt", "zero";
  --font-interface-variation: "opsz" 32;
  --font-list-feature: "liga", "dlig", "kern", "calt", "tnum", "zero", "ss01";
  --font-list-variation: "opsz" 32;
  /* Calculated typography tokens */
  --line-height: calc(var(--font-size) * var(--font-density));
  /* Heading weight scale */
  --font-weight-h1: var(--font-header-weight);
  --font-weight-h2: max(
      calc(var(--font-header-weight) * 0.95),
      var(--font-weight)
  );
  --font-weight-h3: max(
      calc(var(--font-header-weight) * 0.9),
      var(--font-weight)
  );
  --font-weight-h4: max(
      calc(var(--font-header-weight) * 0.85),
      var(--font-weight)
  );
  --font-weight-h5: max(
      calc(var(--font-header-weight) * 0.8),
      var(--font-weight)
  );
  --font-weight-h6: max(
      calc(var(--font-header-weight) * 0.75),
      var(--font-weight)
  );
  /* List styling */
  --list-indentation: var(--space);
}

html.dark {
  /*--font-density: 1.5;*/
  --font-weight: 400;
  --font-letter-spacing: 0.001em;
}

html {
  scroll-behavior: smooth;
  font-family: var(--font-text), system-ui, sans-serif;
  font-size: var(--scale);
  font-weight: var(--font-weight);
  letter-spacing: var(--font-letter-spacing);
  line-height: var(--line-height);
  text-rendering: optimizeLegibility; /* kerning & ligatures */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-optical-sizing: auto;
  font-feature-settings: var(--font-feature);
  font-variation-settings: var(--font-variation);
  text-wrap: pretty;
  hyphens: none;
  widows: 2;
  orphans: 2;
}

/* Note: Typography-only feature toggles (kept in typography layer) */
.circular {
  font-feature-settings: "ss05" on;
}

.squared {
  font-feature-settings: "ss06" on;
}

.inter-display {
  font-variation-settings: "opsz" 32;
}

/* Responsive adjustments - collapse gutters on small screens */
@media only screen and (max-width: 768px) {
  :root {
    --font-size: var(--font-mobile-size) !important;
    --font-ratio: var(--font-mobile-ratio) !important;
  }
}
/* Heading element styling moved to standard-04-elements.scss
   This file now contains only typography design tokens and rules.
   See standard-04-elements.scss for h1-h6 element styling. */
/* Note: Text size utilities moved to standard-98-utilities.scss */
/* .small, .smaller, .compact now defined in utilities layer */
/* Note: Font family utilities (.font-ui, .font-interface, .mono, .code, .bold) */
/* moved to standard-98-utilities.scss */
/* Element font families for pre, code, tt kept below as element selectors */
b,
strong {
  font-weight: var(--bold-weight);
}

:is(h1, h2, h3, h4, h5, h6) :is(b, strong, .bold) {
  font-weight: inherit;
}

/* Links inherit color by default; article overrides already exist */
a,
a:visited {
  color: inherit;
}

/* Button and form element styling moved to standard-04-elements.scss
   This file now contains only typography design tokens and rules.
   See standard-04-elements.scss for button, input, textarea, select styling. */
textarea {
  resize: vertical;
  min-height: calc(var(--space-l) * 3);
}

/* =========================== */
/* RHYTHM ELEMENT TYPOGRAPHY   */
/* =========================== */
/* Typography properties for elements within rhythm containers */
/* List styling */
li::before {
  font-feature-settings: var(--font-list-feature);
  font-variation-settings: var(--font-list-variation);
}

/* Blockquote typography */
blockquote {
  font-style: italic;
  font-size: var(--scale-s);
}

/* Code block typography */
pre,
code {
  font-size: var(--scale-s);
  line-height: var(--font-density-s);
  overflow-x: auto;
}

/* Form typography */
legend {
  font-weight: var(--bold-weight, bold);
}

label {
  font-weight: var(--bold-weight, bold);
}

/* Figure caption typography */
figcaption {
  font-size: var(--scale-s);
  font-style: italic;
  text-align: center;
}

/* Table typography */
table {
  border-collapse: collapse;
  font-variant-numeric: tabular-nums;
}

th,
td {
  text-align: left;
}

th {
  font-weight: var(--bold-weight, bold);
}

caption {
  font-weight: var(--bold-weight, bold);
  text-align: left;
}

/* Callout typography */
.callout-title {
  font-weight: var(--bold-weight, bold);
}

/* Note: Display scale utilities (.display, .poster, .label, .micro) */
/* moved to standard-98-utilities.scss */
/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component HTML Elements
 * @category Foundation
 * @description Styling for bare HTML elements (h1-h6, p, a, form, button, etc).
 * Applies typography rules and colors to semantic HTML elements.
 * Combines typography scales with color system for complete element styling.
 * All elements respect rhythm and typography system constraints.
 * This layer bridges the typography system and color system with concrete element styling.
 *
 * @prop {element} h1-h6 Heading hierarchy with proper sizing and weights
 * @prop {element} p Paragraph text styling
 * @prop {element} a Link styling with underline and hover states
 * @prop {element} button Native button element styling
 * @prop {class} .button Apply button styling to any element
 * @prop {element} input Text input styling
 * @prop {element} textarea Textarea styling
 * @prop {element} select Select dropdown styling
 * @prop {element} label Label styling
 * @prop {element} strong Bold text styling
 * @prop {element} code Inline code styling
 * @prop {element} pre Code block styling
 *
 * @example
 * // Headings automatically styled with typography + colors
 * <h1>Page Title</h1>
 * <h2>Section Heading</h2>
 *
 * // Links with hover states
 * <a href="/page">Link text</a>
 *
 * // Buttons - native and custom
 * <button>Click me</button>
 * <a href="/page" class="button">Link button</a>
 *
 * // Form elements with focus states
 * <input type="text" placeholder="Name">
 * <textarea>Message</textarea>
 * <select><option>Choose...</option></select>
 *
 * @since 0.1.0
 * @see standard-02-color.scss
 * @see standard-03-typography.scss
 */
/* ===== HEADINGS ===== */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--font-header), system-ui, sans-serif;
  color: var(--color-header);
  text-wrap: balance;
  font-variant-ligatures: normal;
  font-feature-settings: var(--font-header-feature);
  font-variation-settings: var(--font-header-variation);
  font-style: var(--font-header-style, normal);
  line-height: var(--font-header-line-height);
  letter-spacing: var(--font-header-letter-spacing);
  white-space: normal;
  overflow-wrap: normal;
  word-break: normal;
  hyphens: none;
  max-width: 100%;
  box-sizing: border-box;
}

h1 {
  font-weight: var(--font-weight-h1);
  font-size: clamp(var(--scale-2xl), 10vw, var(--scale-3xl));
}

h2 {
  font-weight: var(--font-weight-h2);
  font-size: clamp(var(--scale-xl), 7vw, var(--scale-2xl));
}

h3 {
  font-weight: var(--font-weight-h3);
  font-size: var(--scale-xl);
}

h4 {
  font-weight: var(--font-weight-h4);
  font-size: var(--scale-l);
  line-height: var(--line-height);
}

h5 {
  font-weight: var(--font-weight-h5);
  font-size: var(--scale-l);
  line-height: var(--line-height);
}

h6 {
  font-weight: var(--font-weight-h6);
  font-size: var(--scale-l);
  line-height: var(--line-height);
}

/* ===== LINKS ===== */
a,
a:visited {
  color: inherit;
  text-decoration: underline;
  text-decoration-thickness: 0.1em;
  text-underline-offset: 0.15em;
  text-decoration-color: var(--color-subtle);
  transition: color 0.2s ease, text-decoration-color 0.2s ease;
}

a:hover,
a:focus {
  color: var(--color-accent);
  text-decoration-color: var(--color-accent);
}

a:focus-visible {
  outline: 1px solid color-mix(in srgb, var(--color-accent) 50%, transparent);
  border-radius: 2px;
}

/* ===== BUTTONS ===== */
/* Native button element */
button {
  font-family: var(--font-interface), system-ui, sans-serif;
  font-size: var(--scale-s);
  font-weight: var(--font-weight);
  line-height: var(--font-density);
  padding: var(--space-xs) var(--space-s);
  border-radius: var(--border-radius);
  background: var(--color-accent);
  color: var(--color-background);
  border: 1px solid var(--color-accent);
  cursor: pointer;
  transition: background-color 0.2s ease, border-color 0.2s ease, opacity 0.2s ease;
}

button:hover {
  opacity: 0.9;
}

button:active {
  opacity: 0.8;
}

button:focus-visible {
  outline: 1px solid color-mix(in srgb, var(--color-accent) 50%, transparent);
  outline-offset: 2px;
}

button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Button class for styling links as buttons */
a.button,
a.button:visited {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-xs);
  font-family: var(--font-interface), system-ui, sans-serif;
  font-size: var(--scale-s);
  font-weight: var(--font-weight);
  line-height: var(--font-density);
  padding: var(--space-xs) var(--space-s);
  border-radius: var(--border-radius);
  background: var(--color-accent);
  color: var(--color-background);
  text-decoration: none;
  cursor: pointer;
  transition: opacity 0.2s ease;
}

a.button:hover {
  opacity: 0.9;
}

a.button:active {
  opacity: 0.8;
}

a.button:focus-visible {
  outline: 1px solid color-mix(in srgb, var(--color-accent) 50%, transparent);
  outline-offset: 2px;
}

/* ===== FORM ELEMENTS ===== */
input,
textarea,
select {
  font-family: var(--font-interface), system-ui, sans-serif;
  font-size: var(--font-size);
  line-height: var(--line-height);
  padding: var(--space-xs);
  border-radius: var(--border-radius);
  color: var(--color-foreground);
  background: var(--color-background-secondary);
  border: var(--border);
  transition: background-color 0.2s ease, border-color 0.2s ease, outline-color 0.2s ease;
}

input:focus,
textarea:focus,
select:focus {
  outline: 1px solid color-mix(in srgb, var(--color-accent) 35%, transparent);
  outline-offset: 0px;
  border-color: color-mix(in srgb, var(--color-accent) 35%, transparent);
  background-color: color-mix(in srgb, var(--color-accent) 5%, var(--color-background));
}

textarea {
  font-family: var(--font-interface), system-ui, sans-serif;
  resize: vertical;
  min-height: 6em;
}

/* ===== CHECKBOXES AND RADIO BUTTONS ===== */
input[type=checkbox],
input[type=radio] {
  width: 1.25em;
  height: 1.25em;
  cursor: pointer;
  accent-color: var(--color-accent);
}

input[type=checkbox]:checked,
input[type=radio]:checked {
  background-color: var(--color-accent);
  border-color: var(--color-accent);
}

input[type=checkbox]:focus,
input[type=radio]:focus {
  outline: 2px solid color-mix(in srgb, var(--color-accent) 50%, transparent);
  outline-offset: 2px;
}

/* ===== LABELS ===== */
label {
  display: inline-block;
  font-family: var(--font-interface), system-ui, sans-serif;
  font-size: var(--font-size);
  color: var(--color-foreground);
  cursor: pointer;
}

/* ===== STRONG AND BOLD ===== */
b,
strong,
.bold {
  font-weight: var(--bold-weight);
}

:is(h1, h2, h3, h4, h5, h6) :is(b, strong, .bold) {
  font-weight: inherit;
}

/* ===== CODE ===== */
code,
pre,
tt,
.code,
.mono,
.monospace,
.font-mono {
  font-family: var(--font-monospace), Inconsolata, Menlo, monospace;
  font-feature-settings: var(--font-monospace-feature);
  font-variation-settings: var(--font-monospace-variation);
  font-size: var(--scale-s);
}

code {
  background: var(--color-background-secondary);
  border: 1px solid var(--color-border);
  border-radius: 3px;
  padding: 0.125em 0.25em;
  word-break: break-word;
}

pre {
  background: var(--color-background-secondary);
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);
  padding: var(--space-s);
  overflow-x: auto;
  line-height: 1.5;
}

pre code {
  background: transparent;
  border: none;
  padding: 0;
}

/* ===== SMALL AND EMPHASIS ===== */
small {
  font-size: var(--scale-s);
}

sub,
sup {
  font-size: var(--scale-xs);
  line-height: 0;
}

sub {
  vertical-align: sub;
}

sup {
  vertical-align: super;
}

/* ===== UTILITY TEXT SIZES ===== */
.small {
  font-size: var(--scale-s);
}

/* Make all children of .small inherit the font size */
.small * {
  font-size: inherit;
}

.smaller {
  font-size: var(--scale-xs);
}

/* Make all children of .smaller inherit the font size */
.smaller * {
  font-size: inherit;
}

.compact {
  line-height: var(--font-density-s);
}

.font-ui,
.font-interface {
  font-family: var(--font-interface), system-ui, sans-serif;
  font-variation-settings: var(--font-interface-variation);
  font-feature-settings: var(--font-interface-feature);
}

/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component Vertical Rhythm System
 * @category Layout
 * @description Enhanced bulletproof rhythm system that prevents margin collapse
 * and ensures consistent vertical spacing throughout the document. Based on the
 * 1rlh (relative line height) rhythm unit for mathematical precision.
 * Applied globally to <html> root for cascade throughout the page.
 * Supports responsive rhythm adjustments and granular control per element.
 *
 * @prop {class} .rhythm Apply rhythm spacing to <html> root or any container
 * @prop {class} .no-rhythm Disable rhythm for specific elements
 * @prop {variable} --space Base rhythm unit (1rlh)
 * @prop {variable} --rhythm-multiplier Normal element spacing multiplier (default: 1)
 * @prop {variable} --rhythm-multiplier-block Block element spacing multiplier
 * @prop {variable} --body-padding-multiplier Padding multiplier for <body> (desktop)
 * @prop {variable} --body-mobile-padding-multiplier Padding multiplier for <body> (mobile)
 *
 * @example
 * // Global: <html> has .rhythm class (applied automatically)
 * <html class="rhythm">
 *   <body>
 *     <!-- All content gets rhythm spacing -->
 *     <h1>Title</h1>
 *     <p>Paragraphs get automatic spacing</p>
 *   </body>
 * </html>
 *
 * // Local: Apply .rhythm to specific container
 * <div class="rhythm">
 *   <h1>Section Title</h1>
 *   <p>Container children get rhythm spacing</p>
 * </div>
 *
 * // Disable: Use .no-rhythm to opt-out
 * <section class="no-rhythm">No spacing applied here</section>
 * <div class="rhythm no-rhythm">Explicitly disabled rhythm</div>
 *
 * @since 0.1.0
 * @see standard-01-token.scss
 * @see standard-06-reading.scss
 */
/* Enhanced Bulletproof Rhythm System - Margin Collapse Safe */
/* ===== Harmony Base (containers and resets) ===== */
:where(*, *::before, *::after) {
  box-sizing: border-box;
}

/* ===== BULLETPROOF RHYTHM SYSTEM ===== */
/* Applied to <html> root for global cascade (best practice for frameworks) */
:where(html:not(.no-rhythm)),
:where(.rhythm) {
  /* Rhythm control - can be overridden per instance */
  /* Modern margin collapse prevention */
  display: flow-root;
  /* Apply rhythm spacing to all direct children */
}
:where(html:not(.no-rhythm)) > *,
:where(.rhythm) > * {
  margin-block-start: 0;
  margin-block-end: calc(var(--space) * var(--rhythm-multiplier));
}

/* Padding only applied to <body> when rhythm is active */
:where(body:not(.no-rhythm)),
:where(html:not(.no-rhythm)) > body {
  margin: 0;
  padding: calc(var(--space) * var(--body-padding-multiplier));
  padding-bottom: calc(var(--space) * var(--body-padding-multiplier) * 1.5);
}
:where(body:not(.no-rhythm)) [id],
:where(html:not(.no-rhythm)) > body [id] {
  scroll-margin-top: calc(var(--space) * var(--body-padding-multiplier)); /* Adjust value as needed */
}

@media (max-width: 768px) {
  :where(body:not(.no-rhythm)),
  :where(html:not(.no-rhythm)) > body {
    margin: 0;
    padding: calc(var(--space) * var(--body-mobile-padding-multiplier));
    padding-bottom: calc(var(--space) * var(--body-mobile-padding-multiplier) * 1.5);
  }
  :where(body:not(.no-rhythm)) [id],
  :where(html:not(.no-rhythm)) > body [id] {
    scroll-margin-top: calc(var(--space) * var(--body-mobile-padding-multiplier)); /* Adjust value as needed */
  }
}
/* Elements within rhythm containers */
:where(html:not(.no-rhythm), .rhythm) {
  /* Enhanced spacing relationships for typography */
}
:where(html:not(.no-rhythm), .rhythm) h1,
:where(html:not(.no-rhythm), .rhythm) h2,
:where(html:not(.no-rhythm), .rhythm) h3,
:where(html:not(.no-rhythm), .rhythm) h4,
:where(html:not(.no-rhythm), .rhythm) h5,
:where(html:not(.no-rhythm), .rhythm) h6,
:where(html:not(.no-rhythm), .rhythm) p,
:where(html:not(.no-rhythm), .rhythm) ul,
:where(html:not(.no-rhythm), .rhythm) ol,
:where(html:not(.no-rhythm), .rhythm) dl,
:where(html:not(.no-rhythm), .rhythm) blockquote,
:where(html:not(.no-rhythm), .rhythm) pre,
:where(html:not(.no-rhythm), .rhythm) table,
:where(html:not(.no-rhythm), .rhythm) figure,
:where(html:not(.no-rhythm), .rhythm) form,
:where(html:not(.no-rhythm), .rhythm) fieldset,
:where(html:not(.no-rhythm), .rhythm) section,
:where(html:not(.no-rhythm), .rhythm) article,
:where(html:not(.no-rhythm), .rhythm) aside,
:where(html:not(.no-rhythm), .rhythm) header,
:where(html:not(.no-rhythm), .rhythm) footer,
:where(html:not(.no-rhythm), .rhythm) main,
:where(html:not(.no-rhythm), .rhythm) nav,
:where(html:not(.no-rhythm), .rhythm) .grid,
:where(html:not(.no-rhythm), .rhythm) .box {
  margin-block-start: 0;
  margin-block-end: calc(var(--space) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) .rhythm {
  --rhythm-multiplier: 1; /* Reset for nested contexts */
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Special blocks get generous spacing (2× rhythm) */
  /* Layout containers get double spacing for emphasis */
}
:where(html:not(.no-rhythm), .rhythm) .callout,
:where(html:not(.no-rhythm), .rhythm) blockquote,
:where(html:not(.no-rhythm), .rhythm) pre,
:where(html:not(.no-rhythm), .rhythm) figure,
:where(html:not(.no-rhythm), .rhythm) p:has(img),
:where(html:not(.no-rhythm), .rhythm) fieldset,
:where(html:not(.no-rhythm), .rhythm) hr,
:where(html:not(.no-rhythm), .rhythm) table,
:where(html:not(.no-rhythm), .rhythm) .grid,
:where(html:not(.no-rhythm), .rhythm) .grid-2,
:where(html:not(.no-rhythm), .rhythm) .grid-3,
:where(html:not(.no-rhythm), .rhythm) .grid-4,
:where(html:not(.no-rhythm), .rhythm) .grid-5,
:where(html:not(.no-rhythm), .rhythm) .grid-6,
:where(html:not(.no-rhythm), .rhythm) .grid-7,
:where(html:not(.no-rhythm), .rhythm) .grid-8,
:where(html:not(.no-rhythm), .rhythm) .grid-9,
:where(html:not(.no-rhythm), .rhythm) .grid-10,
:where(html:not(.no-rhythm), .rhythm) .grid-11,
:where(html:not(.no-rhythm), .rhythm) .grid-12,
:where(html:not(.no-rhythm), .rhythm) .container-small,
:where(html:not(.no-rhythm), .rhythm) .container-accent,
:where(html:not(.no-rhythm), .rhythm) .container-feature,
:where(html:not(.no-rhythm), .rhythm) .container-full {
  /* Subtract regular margin to avoid double-spacing */
  margin-block-start: calc(var(--space) * var(--rhythm-multiplier-block) - var(--space) * var(--rhythm-multiplier));
  /* Bottom margin uses the block multiplier */
  margin-block-end: calc(var(--space) * var(--rhythm-multiplier-block));
}
:where(html:not(.no-rhythm), .rhythm) * > :last-child {
  margin-block-end: 0;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* =========================== */
  /* TYPOGRAPHIC NUANCES         */
  /* =========================== */
}
:where(html:not(.no-rhythm), .rhythm) hr {
  --rhythm-multiplier-block: 3;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Adjacent images get reduced spacing */
}
:where(html:not(.no-rhythm), .rhythm) p:has(img) + p:has(img) {
  margin-block-start: calc(var(--space-l) * var(--rhythm-multiplier) * -1 + var(--space) / 4) !important;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Reset first-child spacing for special blocks */
}
:where(html:not(.no-rhythm), .rhythm) blockquote > :first-child,
:where(html:not(.no-rhythm), .rhythm) pre > :first-child,
:where(html:not(.no-rhythm), .rhythm) figure > :first-child,
:where(html:not(.no-rhythm), .rhythm) .callout .callout-content > :first-child {
  margin-block-start: 0;
}
:where(html:not(.no-rhythm), .rhythm) blockquote > :last-child,
:where(html:not(.no-rhythm), .rhythm) pre > :last-child,
:where(html:not(.no-rhythm), .rhythm) figure > :last-child,
:where(html:not(.no-rhythm), .rhythm) .callout .callout-content > :last-child {
  margin-block-end: 0;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* =========================== */
  /* TYPOGRAPHY ELEMENTS         */
  /* =========================== */
  /* Typography-specific spacing adjustments */
  /* =========================== */
  /* CONTENT ELEMENTS            */
  /* =========================== */
  /* Lists */
}
:where(html:not(.no-rhythm), .rhythm) ul,
:where(html:not(.no-rhythm), .rhythm) ol {
  list-style: none;
  padding-inline-start: var(--space);
}
:where(html:not(.no-rhythm), .rhythm) p + ul,
:where(html:not(.no-rhythm), .rhythm) p + ol {
  margin-block-start: calc(var(--space) * -0.5 * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) ol ul,
:where(html:not(.no-rhythm), .rhythm) ol ol,
:where(html:not(.no-rhythm), .rhythm) ul ul,
:where(html:not(.no-rhythm), .rhythm) ul ol {
  margin-block-start: calc(var(--space-xs) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Nested lists */
}
:where(html:not(.no-rhythm), .rhythm) li > ul,
:where(html:not(.no-rhythm), .rhythm) li > ol {
  padding-inline-start: var(--space);
  margin-block-end: 0;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* List items */
}
:where(html:not(.no-rhythm), .rhythm) li {
  position: relative;
  margin: 0;
  padding-inline-start: 0;
  margin-block-end: calc(var(--space-xs) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Unordered list bullets */
}
:where(html:not(.no-rhythm), .rhythm) ul > li::before {
  content: "•";
  position: absolute;
  left: calc(var(--space) * -1);
  width: var(--space);
  text-align: center;
  color: var(--color-subtle);
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Ordered list numbers */
}
:where(html:not(.no-rhythm), .rhythm) ol {
  counter-reset: ol-counter;
}
:where(html:not(.no-rhythm), .rhythm) ol > li {
  counter-increment: ol-counter;
}
:where(html:not(.no-rhythm), .rhythm) ol > li::before {
  content: counter(ol-counter) ".";
  position: absolute;
  left: calc(var(--space) * -1.75);
  text-align: right;
  line-height: inherit;
  color: var(--color-subtle);
  font-variant-numeric: tabular-nums;
  overflow: hidden;
  width: calc(var(--space) * 1.5);
}
:where(html:not(.no-rhythm), .rhythm) ul.no-bullet,
:where(html:not(.no-rhythm), .rhythm) ol.no-bullet {
  list-style: none;
  padding-inline-start: 0;
}
:where(html:not(.no-rhythm), .rhythm) ul.no-bullet li::before,
:where(html:not(.no-rhythm), .rhythm) ol.no-bullet li::before {
  display: none;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Inline lists - remove margin-bottom from list items */
}
:where(html:not(.no-rhythm), .rhythm) ul:where(.display-flex, [style*="display: flex"], [style*="display:flex"]) li,
:where(html:not(.no-rhythm), .rhythm) ol:where(.display-flex, [style*="display: flex"], [style*="display:flex"]) li {
  margin-block-end: 0;
}
:where(html:not(.no-rhythm), .rhythm) ul.compact li,
:where(html:not(.no-rhythm), .rhythm) ol.compact li,
:where(html:not(.no-rhythm), .rhythm) li:last-of-type {
  line-height: var(--font-density);
  margin-block-end: 0;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Blockquotes - spacing only */
  /* Code blocks - spacing only */
}
:where(html:not(.no-rhythm), .rhythm) blockquote,
:where(html:not(.no-rhythm), .rhythm) pre {
  padding: var(--space);
}
:where(html:not(.no-rhythm), .rhythm) {
  /* =========================== */
  /* FORMS AND INTERACTIVE       */
  /* =========================== */
  /* Form containers - avoid nested grids */
}
:where(html:not(.no-rhythm), .rhythm) form:not(.grid *) {
  display: grid;
  gap: calc(var(--space-s) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Forms inside grids use flex layout to avoid nesting issues */
}
:where(html:not(.no-rhythm), .rhythm) .grid form {
  display: flex;
  flex-direction: column;
  gap: calc(var(--space-s) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Form field groups - spacing only */
}
:where(html:not(.no-rhythm), .rhythm) fieldset {
  padding: calc(var(--space-s) * var(--rhythm-multiplier));
  display: grid;
  gap: calc(var(--space-xs) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) legend {
  padding-inline: calc(var(--space-xs) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Form inputs */
}
:where(html:not(.no-rhythm), .rhythm) input,
:where(html:not(.no-rhythm), .rhythm) textarea,
:where(html:not(.no-rhythm), .rhythm) select {
  margin: 0;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Labels - spacing only */
}
:where(html:not(.no-rhythm), .rhythm) label {
  margin: 0;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Label + input pairs */
}
:where(html:not(.no-rhythm), .rhythm) label:has(+ input[type=text]),
:where(html:not(.no-rhythm), .rhythm) label:has(+ input[type=email]),
:where(html:not(.no-rhythm), .rhythm) label:has(+ input[type=password]),
:where(html:not(.no-rhythm), .rhythm) label:has(+ textarea),
:where(html:not(.no-rhythm), .rhythm) label:has(+ select) {
  margin-block-start: calc(var(--space-xs) * var(--rhythm-multiplier));
  margin-inline-start: calc(var(--space-s) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Checkbox/radio with labels */
}
:where(html:not(.no-rhythm), .rhythm) label + input[type=checkbox],
:where(html:not(.no-rhythm), .rhythm) label + input[type=radio] {
  margin-inline-start: calc(var(--space-s) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Button groups */
}
:where(html:not(.no-rhythm), .rhythm) .button-group {
  display: flex;
  gap: calc(var(--space-s) * var(--rhythm-multiplier));
  flex-wrap: wrap;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* =========================== */
  /* MEDIA ELEMENTS              */
  /* =========================== */
  /* Images, videos, etc. */
}
:where(html:not(.no-rhythm), .rhythm) img,
:where(html:not(.no-rhythm), .rhythm) video,
:where(html:not(.no-rhythm), .rhythm) audio,
:where(html:not(.no-rhythm), .rhythm) iframe {
  max-width: 100%;
  height: auto;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Figures */
}
:where(html:not(.no-rhythm), .rhythm) figure {
  display: grid;
  gap: calc(var(--space-xs) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) figcaption {
  /* Spacing handled by rhythm system */
}
:where(html:not(.no-rhythm), .rhythm) {
  /* =========================== */
  /* TABLES                      */
  /* =========================== */
}
:where(html:not(.no-rhythm), .rhythm) caption {
  margin-block-end: calc(var(--space-xs) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) {
  /* Swiss-style data tables */
}
:where(html:not(.no-rhythm), .rhythm) table {
  /* You already have: border-collapse: collapse; */
  width: 100%;
  font-variant-numeric: tabular-nums; /* ADD: Monospace numbers */
}
:where(html:not(.no-rhythm), .rhythm) td,
:where(html:not(.no-rhythm), .rhythm) th {
  border-bottom: var(--border);
  font-size: var(--scale-s);
  padding-block: calc(var(--space-xs) * var(--rhythm-multiplier));
  padding-inline: calc(var(--space-s) * var(--rhythm-multiplier));
}
:where(html:not(.no-rhythm), .rhythm) th {
  /* You already have: text-align: left; font-weight: bold; */
  text-transform: uppercase; /* ADD */
  letter-spacing: 0.05em; /* ADD */
}
:where(html:not(.no-rhythm), .rhythm) {
  /* ADD: Numeric column alignment */
}
:where(html:not(.no-rhythm), .rhythm) .numeric {
  text-align: right;
  font-variant-numeric: tabular-nums;
}
:where(html:not(.no-rhythm), .rhythm) {
  /* ADD: Zebra striping (functional, not decorative) */
}
:where(html:not(.no-rhythm), .rhythm) .striped tbody tr:nth-child(even) {
  background: color-mix(in srgb, var(--color-foreground) 3%, transparent);
}
:where(html:not(.no-rhythm), .rhythm) {
  /* ADD: Compact table variant */
}
:where(html:not(.no-rhythm), .rhythm) .compact th,
:where(html:not(.no-rhythm), .rhythm) .compact td {
  padding-block: calc(var(--space-2xs) * var(--rhythm-multiplier));
  padding-inline-end: calc(var(--space-xs) * var(--rhythm-multiplier));
}

/* =========================== */
/* UTILITY CLASSES            */
/* =========================== */
/* Spacing override utilities */
.rhythm-tight {
  --rhythm-multiplier: 0.5;
}

.rhythm-loose {
  --rhythm-multiplier: 1.5;
}

.rhythm-xl {
  --rhythm-multiplier: 2;
}

/* Individual element overrides */
.no-rhythm {
  margin: 0 !important;
}

.no-block-start {
  margin-block-start: 0 !important;
}

.no-block-end {
  margin-block-end: 0 !important;
}

.stick-next {
  margin-block-end: calc(var(--space-xs) * var(--rhythm-multiplier)) !important;
}

/* =========================== */
/* PERFORMANCE OPTIMIZATIONS  */
/* =========================== */
/* Reduce repaints and reflows */
.rhythm {
  /* Use GPU acceleration for transforms if needed */
  /*transform: translateZ(0); */
  /* Optimize for animations */
  /*will-change: auto; */
}

/* =========================== */
/* ACCESSIBILITY               */
/* =========================== */
/* Ensure rhythm doesn't interfere with screen readers */
.rhythm:focus-within {
  /* Maintain focus visibility */
}

/* Respect user motion preferences */
@media (prefers-reduced-motion: reduce) {
  .rhythm {
    transition: none;
  }
}
/* =========================== */
/* LEGACY SUPPORT             */
/* =========================== */
/* Fallback for browsers without CSS Grid support */
@supports not (display: grid) {
  .rhythm {
    display: block;
  }
  .rhythm > * {
    margin-block-end: calc(var(--space) * var(--rhythm-multiplier));
  }
  .rhythm > :last-child {
    margin-block-end: 0;
  }
}
/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component Grid System
 * @category Layout
 * @description 12-column Swiss-style responsive grid with flexible gaps and alignment.
 * Uses CSS Grid with logical properties for RTL support. Supports nested grids,
 * asymmetric layouts, gap variants (tight/normal/wide), and responsive column changes.
 * All gaps align to the vertical rhythm system.
 *
 * @prop {class} .grid 12-column grid container
 * @prop {class} .grid-2 through .grid-12 Predefined grid layouts (2-12 columns)
 * @prop {class} .col-1 through .col-12 Column span modifiers
 * @prop {class} .col-sm-* Responsive columns at 768px+
 * @prop {class} .col-lg-* Responsive columns at 1024px+
 * @prop {class} .start-{n} Start column position (1-12)
 * @prop {class} .gap-tight Tight gap (1/4 space)
 * @prop {class} .gap-wide Wide gap (1.5 space)
 *
 * @example
 * // Basic 12-column grid with equal width columns
 * <div class="grid">
 *   <div class="col-3">Item 1</div>
 *   <div class="col-3">Item 2</div>
 *   <div class="col-3">Item 3</div>
 *   <div class="col-3">Item 4</div>
 * </div>
 *
 * // Responsive grid layout
 * <div class="grid">
 *   <div class="col-12 col-sm-6 col-lg-3">Card</div>
 *   <div class="col-12 col-sm-6 col-lg-3">Card</div>
 * </div>
 *
 * // Main content + sidebar layout
 * <div class="grid">
 *   <div class="col-8">Main content</div>
 *   <div class="col-4">Sidebar</div>
 * </div>
 *
 * @since 0.1.0
 * @see standard-04-rhythm.scss
 */
/* Grid Design Tokens - Using logical properties */
:root {
  /* Grid system tokens */
  --grid-cols: 12;
  --grid-gap: var(--space);
  --grid-row-gap: var(--grid-gap); /* Separate control for row spacing */
  /* Container tokens */
  --container-max: 1200px;
  --container-standard: var(--space);
}

/* Harmony Grid (unified) — 12-col Swiss-style grid with rhythm-native gaps
   Use this as your single grid across the site (replaces old .h-grid API).
   Relies on logical properties and Harmony tokens: --space, calc(var(--space) / 4), --space-l, borders, etc.
*/
/* Grid container */
.grid {
  display: grid;
  grid-template-columns: repeat(var(--grid-cols), 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

/* Gap variants aligned to rhythm */
.grid.tight {
  --grid-gap: calc(var(--space) / 4);
  --grid-row-gap: var(--space-s);
}

.grid.wide {
  --grid-gap: var(--space-l);
  --grid-row-gap: var(--space-xl);
}

/* Spans 1..12 */
.grid-1 {
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

.grid-2 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

.grid-3 {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

.grid-4 {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

.grid-5 {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

.grid-6 {
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

.grid-7 {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

.grid-8 {
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

.grid-9 {
  display: grid;
  grid-template-columns: repeat(9, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

.grid-10 {
  display: grid;
  grid-template-columns: repeat(10, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

.grid-11 {
  display: grid;
  grid-template-columns: repeat(11, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

.grid-12 {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  column-gap: var(--grid-gap);
  row-gap: var(--grid-row-gap);
}

/* Spans 1..12 */
.col-1 {
  grid-column: span 1;
  margin-block-end: 0;
}

.start-1 {
  grid-column-start: 1;
}

.col-2 {
  grid-column: span 2;
  margin-block-end: 0;
}

.start-2 {
  grid-column-start: 2;
}

.col-3 {
  grid-column: span 3;
  margin-block-end: 0;
}

.start-3 {
  grid-column-start: 3;
}

.col-4 {
  grid-column: span 4;
  margin-block-end: 0;
}

.start-4 {
  grid-column-start: 4;
}

.col-5 {
  grid-column: span 5;
  margin-block-end: 0;
}

.start-5 {
  grid-column-start: 5;
}

.col-6 {
  grid-column: span 6;
  margin-block-end: 0;
}

.start-6 {
  grid-column-start: 6;
}

.col-7 {
  grid-column: span 7;
  margin-block-end: 0;
}

.start-7 {
  grid-column-start: 7;
}

.col-8 {
  grid-column: span 8;
  margin-block-end: 0;
}

.start-8 {
  grid-column-start: 8;
}

.col-9 {
  grid-column: span 9;
  margin-block-end: 0;
}

.start-9 {
  grid-column-start: 9;
}

.col-10 {
  grid-column: span 10;
  margin-block-end: 0;
}

.start-10 {
  grid-column-start: 10;
}

.col-11 {
  grid-column: span 11;
  margin-block-end: 0;
}

.start-11 {
  grid-column-start: 11;
}

.col-12 {
  grid-column: span 12;
  margin-block-end: 0;
}

.start-12 {
  grid-column-start: 12;
}

/* Responsive spans/starts: md ≥ 768px, lg ≥ 1024px */
@media (max-width: 768px) {
  .grid-sm-1 {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-1 {
    grid-column: span 1;
  }
  .start-sm-1 {
    grid-column-start: 1;
  }
  .grid-sm-2 {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-2 {
    grid-column: span 2;
  }
  .start-sm-2 {
    grid-column-start: 2;
  }
  .grid-sm-3 {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-3 {
    grid-column: span 3;
  }
  .start-sm-3 {
    grid-column-start: 3;
  }
  .grid-sm-4 {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-4 {
    grid-column: span 4;
  }
  .start-sm-4 {
    grid-column-start: 4;
  }
  .grid-sm-5 {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-5 {
    grid-column: span 5;
  }
  .start-sm-5 {
    grid-column-start: 5;
  }
  .grid-sm-6 {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-6 {
    grid-column: span 6;
  }
  .start-sm-6 {
    grid-column-start: 6;
  }
  .grid-sm-7 {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-7 {
    grid-column: span 7;
  }
  .start-sm-7 {
    grid-column-start: 7;
  }
  .grid-sm-8 {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-8 {
    grid-column: span 8;
  }
  .start-sm-8 {
    grid-column-start: 8;
  }
  .grid-sm-9 {
    display: grid;
    grid-template-columns: repeat(9, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-9 {
    grid-column: span 9;
  }
  .start-sm-9 {
    grid-column-start: 9;
  }
  .grid-sm-10 {
    display: grid;
    grid-template-columns: repeat(10, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-10 {
    grid-column: span 10;
  }
  .start-sm-10 {
    grid-column-start: 10;
  }
  .grid-sm-11 {
    display: grid;
    grid-template-columns: repeat(11, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-11 {
    grid-column: span 11;
  }
  .start-sm-11 {
    grid-column-start: 11;
  }
  .grid-sm-12 {
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-sm-12 {
    grid-column: span 12;
  }
  .start-sm-12 {
    grid-column-start: 12;
  }
  .col-sm-row {
    grid-column: 1/-1;
  }
}
@media (min-width: 1024px) {
  .grid-lg-1 {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-1 {
    grid-column: span 1;
  }
  .start-lg-1 {
    grid-column-start: 1;
  }
  .grid-lg-2 {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-2 {
    grid-column: span 2;
  }
  .start-lg-2 {
    grid-column-start: 2;
  }
  .grid-lg-3 {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-3 {
    grid-column: span 3;
  }
  .start-lg-3 {
    grid-column-start: 3;
  }
  .grid-lg-4 {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-4 {
    grid-column: span 4;
  }
  .start-lg-4 {
    grid-column-start: 4;
  }
  .grid-lg-5 {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-5 {
    grid-column: span 5;
  }
  .start-lg-5 {
    grid-column-start: 5;
  }
  .grid-lg-6 {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-6 {
    grid-column: span 6;
  }
  .start-lg-6 {
    grid-column-start: 6;
  }
  .grid-lg-7 {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-7 {
    grid-column: span 7;
  }
  .start-lg-7 {
    grid-column-start: 7;
  }
  .grid-lg-8 {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-8 {
    grid-column: span 8;
  }
  .start-lg-8 {
    grid-column-start: 8;
  }
  .grid-lg-9 {
    display: grid;
    grid-template-columns: repeat(9, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-9 {
    grid-column: span 9;
  }
  .start-lg-9 {
    grid-column-start: 9;
  }
  .grid-lg-10 {
    display: grid;
    grid-template-columns: repeat(10, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-10 {
    grid-column: span 10;
  }
  .start-lg-10 {
    grid-column-start: 10;
  }
  .grid-lg-11 {
    display: grid;
    grid-template-columns: repeat(11, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-11 {
    grid-column: span 11;
  }
  .start-lg-11 {
    grid-column-start: 11;
  }
  .grid-lg-12 {
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    column-gap: var(--grid-gap);
    row-gap: var(--grid-row-gap);
  }
  .col-lg-12 {
    grid-column: span 12;
  }
  .start-lg-12 {
    grid-column-start: 12;
  }
  .col-lg-row {
    grid-column: 1/-1;
  }
}
/* Full-span helper (replaces old .h-col-full) */
.col-row,
.col-full {
  grid-column: 1/-1;
  margin-block-end: 0;
}

hr.col-row {
  margin-block: var(--space);
}

/* Ergonomic presets (optional sugar) */
.col-half {
  grid-column: span 6;
} /* 1/2 */
.col-third {
  grid-column: span 4;
} /* 1/3 */
.col-two3 {
  grid-column: span 8;
} /* 2/3 */
.col-quarter {
  grid-column: span 3;
} /* 1/4 */
/* Rhythm inside grid items: apply to a cell containing prose */
.grid .rhythm > * {
  margin-block-end: var(--space);
}

/* Free columns: place anywhere with CSS vars or utility shorthands */
.free-col {
  /* Defaults; authors override via CSS vars or utilities */
  --start: auto; /* 1..12 or auto */
  --span: 3; /* 1..12 */
  grid-column: var(--start)/span var(--span);
  /* If the free column contains prose, opt-in to rhythm */
}
.free-col.rhythm > * {
  margin-block-end: var(--space);
}

/* Utility-class interface to set the CSS vars (ergonomic authoring) */
.span-1 {
  --span: 1;
}

.startv-1 {
  --start: 1;
} /* 'startv' to avoid clash with .start- utilities */
.span-2 {
  --span: 2;
}

.startv-2 {
  --start: 2;
} /* 'startv' to avoid clash with .start- utilities */
.span-3 {
  --span: 3;
}

.startv-3 {
  --start: 3;
} /* 'startv' to avoid clash with .start- utilities */
.span-4 {
  --span: 4;
}

.startv-4 {
  --start: 4;
} /* 'startv' to avoid clash with .start- utilities */
.span-5 {
  --span: 5;
}

.startv-5 {
  --start: 5;
} /* 'startv' to avoid clash with .start- utilities */
.span-6 {
  --span: 6;
}

.startv-6 {
  --start: 6;
} /* 'startv' to avoid clash with .start- utilities */
.span-7 {
  --span: 7;
}

.startv-7 {
  --start: 7;
} /* 'startv' to avoid clash with .start- utilities */
.span-8 {
  --span: 8;
}

.startv-8 {
  --start: 8;
} /* 'startv' to avoid clash with .start- utilities */
.span-9 {
  --span: 9;
}

.startv-9 {
  --start: 9;
} /* 'startv' to avoid clash with .start- utilities */
.span-10 {
  --span: 10;
}

.startv-10 {
  --start: 10;
} /* 'startv' to avoid clash with .start- utilities */
.span-11 {
  --span: 11;
}

.startv-11 {
  --start: 11;
} /* 'startv' to avoid clash with .start- utilities */
.span-12 {
  --span: 12;
}

.startv-12 {
  --start: 12;
} /* 'startv' to avoid clash with .start- utilities */
/* Responsive overrides for the var-based API */
@media (max-width: 768px) {
  .span-sm-1 {
    --span: 1;
  }
  .startv-sm-1 {
    --start: 1;
  }
  .span-sm-2 {
    --span: 2;
  }
  .startv-sm-2 {
    --start: 2;
  }
  .span-sm-3 {
    --span: 3;
  }
  .startv-sm-3 {
    --start: 3;
  }
  .span-sm-4 {
    --span: 4;
  }
  .startv-sm-4 {
    --start: 4;
  }
  .span-sm-5 {
    --span: 5;
  }
  .startv-sm-5 {
    --start: 5;
  }
  .span-sm-6 {
    --span: 6;
  }
  .startv-sm-6 {
    --start: 6;
  }
  .span-sm-7 {
    --span: 7;
  }
  .startv-sm-7 {
    --start: 7;
  }
  .span-sm-8 {
    --span: 8;
  }
  .startv-sm-8 {
    --start: 8;
  }
  .span-sm-9 {
    --span: 9;
  }
  .startv-sm-9 {
    --start: 9;
  }
  .span-sm-10 {
    --span: 10;
  }
  .startv-sm-10 {
    --start: 10;
  }
  .span-sm-11 {
    --span: 11;
  }
  .startv-sm-11 {
    --start: 11;
  }
  .span-sm-12 {
    --span: 12;
  }
  .startv-sm-12 {
    --start: 12;
  }
}
@media (min-width: 1024px) {
  .span-lg-1 {
    --span: 1;
  }
  .startv-lg-1 {
    --start: 1;
  }
  .span-lg-2 {
    --span: 2;
  }
  .startv-lg-2 {
    --start: 2;
  }
  .span-lg-3 {
    --span: 3;
  }
  .startv-lg-3 {
    --start: 3;
  }
  .span-lg-4 {
    --span: 4;
  }
  .startv-lg-4 {
    --start: 4;
  }
  .span-lg-5 {
    --span: 5;
  }
  .startv-lg-5 {
    --start: 5;
  }
  .span-lg-6 {
    --span: 6;
  }
  .startv-lg-6 {
    --start: 6;
  }
  .span-lg-7 {
    --span: 7;
  }
  .startv-lg-7 {
    --start: 7;
  }
  .span-lg-8 {
    --span: 8;
  }
  .startv-lg-8 {
    --start: 8;
  }
  .span-lg-9 {
    --span: 9;
  }
  .startv-lg-9 {
    --start: 9;
  }
  .span-lg-10 {
    --span: 10;
  }
  .startv-lg-10 {
    --start: 10;
  }
  .span-lg-11 {
    --span: 11;
  }
  .startv-lg-11 {
    --start: 11;
  }
  .span-lg-12 {
    --span: 12;
  }
  .startv-lg-12 {
    --start: 12;
  }
}
/* Mobile fallback: stack free columns full-width */
@media (max-width: 767.98px) {
  .free-col {
    grid-column: 1/-1;
  }
}
/* Optional: sticky marginalia variant for editorial layouts */
.free-col.sticky {
  position: sticky;
  inset-block-start: var(--space);
  align-self: start;
  z-index: 1;
}

/* Row gap utilities for grid system */
.grid.no-row-gap {
  row-gap: 0;
}

.grid.row-gap-xs {
  --grid-row-gap: var(--space-xs);
}

.grid.row-gap-s {
  --grid-row-gap: var(--space-s);
}

.grid.row-gap-l {
  --grid-row-gap: var(--space-l);
}

.grid.row-gap-xl {
  --grid-row-gap: var(--space-xl);
}

/* Column gap utilities for grid system */
.grid.no-col-gap {
  column-gap: 0;
}

.grid.col-gap-xs {
  --grid-gap: var(--space-xs);
}

.grid.col-gap-s {
  --grid-gap: var(--space-s);
}

.grid.col-gap-l {
  --grid-gap: var(--space-l);
}

.grid.col-gap-xl {
  --grid-gap: var(--space-xl);
}

/* Common layout containers inherit rhythm to cascade deeper */
.box > *,
.grid > .col-1 > *,
.grid > .col-2 > *,
.grid > .col-3 > *,
.grid > .col-4 > *,
.grid > .col-5 > *,
.grid > .col-6 > *,
.grid > .col-7 > *,
.grid > .col-8 > *,
.grid > .col-9 > *,
.grid > .col-10 > *,
.grid > .col-11 > *,
.grid > .col-12 > *,
.grid > .col-half > *,
.grid > .col-third > *,
.grid > .col-two3 > *,
.grid > .col-quarter > *,
.grid > .col-full > * {
  margin-block: 0;
  margin-block-end: calc(var(--space) * var(--rhythm-multiplier));
}
.box > :last-child,
.grid > .col-1 > :last-child,
.grid > .col-2 > :last-child,
.grid > .col-3 > :last-child,
.grid > .col-4 > :last-child,
.grid > .col-5 > :last-child,
.grid > .col-6 > :last-child,
.grid > .col-7 > :last-child,
.grid > .col-8 > :last-child,
.grid > .col-9 > :last-child,
.grid > .col-10 > :last-child,
.grid > .col-11 > :last-child,
.grid > .col-12 > :last-child,
.grid > .col-half > :last-child,
.grid > .col-third > :last-child,
.grid > .col-two3 > :last-child,
.grid > .col-quarter > :last-child,
.grid > .col-full > :last-child {
  margin-block-end: 0;
}
.box > :first-child,
.grid > .col-1 > :first-child,
.grid > .col-2 > :first-child,
.grid > .col-3 > :first-child,
.grid > .col-4 > :first-child,
.grid > .col-5 > :first-child,
.grid > .col-6 > :first-child,
.grid > .col-7 > :first-child,
.grid > .col-8 > :first-child,
.grid > .col-9 > :first-child,
.grid > .col-10 > :first-child,
.grid > .col-11 > :first-child,
.grid > .col-12 > :first-child,
.grid > .col-half > :first-child,
.grid > .col-third > :first-child,
.grid > .col-two3 > :first-child,
.grid > .col-quarter > :first-child,
.grid > .col-full > :first-child {
  margin-block-start: 0;
}

/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component Prose Layout System
 * @category Layout
 * @description Prose-focused layout system for optimal reading experience with proper
 * line lengths based on typography research (60-75 characters). Uses CSS Grid with
 * responsive content columns for sidebars, accents, and featured content.
 * Inspired by fine-art typography and classical book design principles.
 *
 * @prop {class} .prose Main article/content container for readable prose
 * @prop {class} .small Narrow sidebar width container
 * @prop {class} .accent Accent container with background color
 * @prop {class} .feature Featured content with larger spacing
 * @prop {class} .full Full-width container
 * @prop {variable} --line-width-xs Extra small (24rem / 384px)
 * @prop {variable} --line-width-s Small (32rem / 512px)
 * @prop {variable} --line-width-m Medium (42rem / 672px) - default
 * @prop {variable} --line-width-l Large (50rem / 800px)
 * @prop {variable} --line-width-xl Extra large (60rem / 960px)
 *
 * @example
 * // Standard article with proper reading width
 * <article class="prose">
 *   <h1>Article Title</h1>
 *   <p>Content here stays within optimal reading width...</p>
 * </article>
 *
 * // Narrow sidebar content
 * <div class="prose small">
 *   <p>Short form content</p>
 * </div>
 *
 * // Featured content with emphasis
 * <section class="prose feature">
 *   <blockquote>Important quote with extra space</blockquote>
 * </section>
 *
 * @since 0.1.0
 * @see https://www.rsub.com/blog/how-long-should-a-line-of-text-be/
 */
/* Prose Layout Design Tokens - Using logical properties */
:root {
  /* Content area tokens */
  --line-width-xs: 24rem; /* ~384px - narrow sidebar content */
  --line-width-s: 32rem; /* ~512px - short form content */
  --line-width-m: 42rem; /* ~672px - optimal reading (60-75 chars) - DEFAULT */
  --line-width-l: 50rem; /* ~800px - wider articles */
  --line-width-xl: 60rem; /* ~960px - documentation/wide content */
  --line-width-full: calc(
      100vw - (var(--space) * 2)
  ); /* responsive full width with margins */
  --line-width: var(--line-width-m);
  /* Layout grid tokens */
  --gap: clamp(var(--space), 6vw, var(--space-xl));
  --content: min(var(--line-width), 100% - var(--gap) * 2); /* ← FIXED */
  --content-small: var(--space-l);
  --content-accent: minmax(0, var(--space-l));
  --content-feature: minmax(0, var(--space-2xl));
  --content-full: minmax(0, 1fr);
}

/* Responsive adjustments - collapse gutters on small screens */
@media only screen and (max-width: 768px) {
  :root {
    --content-small: 0;
    --content: min(var(--line-width), 100%); /* ← FIXED */
    --content-accent: 0;
    --content-feature: 0;
    --content-full: 0; /* Just the minimum gap */
  }
}
/* Prose Layout System - Article content grid and positioning */
/* Inspired by fine-art typography and book design principles */
:where(.prose) {
  display: grid;
  grid-template-columns: [full-start] var(--content-full) [feature-start] var(--content-feature) [accent-start] var(--content-accent) [content-start] var(--content) [content-end] var(--content-accent) [accent-end] var(--content-feature) [feature-end] var(--content-full) [full-end];
  transition: grid-template-columns 0.3s ease-out;
  position: relative;
  z-index: var(--z-base);
  /* Default content positioning */
}
:where(.prose) > * {
  grid-column: content;
}
:where(.prose) .container-small {
  grid-column: content;
  margin-inline: var(--content-small);
}
:where(.prose) .container-accent {
  grid-column: accent;
  margin-inline: 0;
}
:where(.prose) table,
:where(.prose) .container-feature {
  grid-column: feature;
  margin-inline: 0;
}
:where(.prose) .container-full {
  grid-column: full;
  margin-inline: calc(var(--space) * var(--body-padding-multiplier) * -1);
  padding-inline: calc(var(--space) * var(--body-padding-multiplier));
}
:where(.prose) {
  /* Image gallery layout */
}
:where(.prose):not(.no-grid) p:has(img) {
  display: flex;
  gap: calc(var(--space) / 4);
  border-radius: var(--border-radius);
}
:where(.prose):not(.no-grid) p:has(img) > * {
  flex: 1 1 auto;
  min-width: 1%;
  min-height: 1%;
  object-fit: cover;
}
:where(.prose):not(.no-grid) p:has(video) > * {
  flex: 1 1 auto;
  min-width: 1%;
  min-height: 1%;
  object-fit: cover;
}
:where(.prose):not(.no-grid) p:has(img) img,
:where(.prose):not(.no-grid) p:has(img) img:first-child,
:where(.prose):not(.no-grid) p:has(img) img:last-child {
  margin-inline: auto;
}
:where(.prose):not(.no-grid) p:has(img) br {
  display: none;
}
:where(.prose):not(.no-grid) .callout p:has(img),
:where(.prose):not(.no-grid) .callout p:has(img) br {
  display: block;
}
:where(.prose) h1,
:where(.prose) > h1:where(:first-child) {
  margin-block-start: calc(var(--space-3xl) * var(--rhythm-multiplier));
  margin-block-end: calc(var(--space-xl) * var(--rhythm-multiplier));
}
:where(.prose) h2 {
  margin-block-start: calc(var(--space-2xl) * var(--rhythm-multiplier));
  margin-block-end: calc(var(--space-xl) * var(--rhythm-multiplier));
}
:where(.prose) h3 {
  margin-block-start: calc(var(--space-xl) * var(--rhythm-multiplier));
}
:where(.prose) h4 {
  margin-block-start: calc(var(--space-l) * var(--rhythm-multiplier));
}
:where(.prose) h5 {
  margin-block-start: calc(var(--space) * var(--rhythm-multiplier));
  margin-block-end: calc(var(--space-s) * var(--rhythm-multiplier));
}
:where(.prose) h6 {
  margin-block-start: calc(var(--space) * var(--rhythm-multiplier));
  margin-block-end: calc(var(--space-xs) * var(--rhythm-multiplier));
}
:where(.prose) hr {
  margin-inline: calc(var(--space-l) * var(--rhythm-multiplier));
}
:where(.prose) {
  /* Heading after heading gets reduced spacing */
}
:where(.prose) h1 + h2,
:where(.prose) h2 + h3,
:where(.prose) h3 + h4,
:where(.prose) h4 + h5,
:where(.prose) h5 + h6 {
  margin-block-start: calc(var(--space-xs) * var(--rhythm-multiplier) * -1);
}
:where(.prose) {
  /* Lists after headings get normal spacing */
}
:where(.prose) h1 + ul,
:where(.prose) h1 + ol,
:where(.prose) h2 + ul,
:where(.prose) h2 + ol,
:where(.prose) h3 + ul,
:where(.prose) h3 + ol {
  margin-block-end: calc(var(--space) * var(--rhythm-multiplier));
}
:where(.prose) section > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) aside > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) header > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) footer > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) main > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) nav > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) blockquote > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) pre > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) figure > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) .box > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) .box-inset > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) .callout > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) .grid > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) .container-small > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) .container-accent > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) .container-feature > :is(h1, h2, h3, h4, h5, h6):first-child,
:where(.prose) .container-full > :is(h1, h2, h3, h4, h5, h6):first-child {
  margin-block-start: 0; /* No top margin */
  /* Keep the heading's natural bottom margin */
}
:where(.prose) {
  /* Note: Page's main title h1:first-child retains spacing via direct child selector */
  /* The > h1:first-child selector in h1 rule ensures it overrides rhythm's > * margin-reset */
  /* Basic media styling */
}
:where(.prose) img,
:where(.prose) audio,
:where(.prose) video {
  margin: 0;
  margin-inline: auto;
  max-inline-size: 100%;
  border-radius: var(--border-radius);
  border: var(--border);
}
:where(.prose) .callout,
:where(.prose) blockquote,
:where(.prose) pre,
:where(.prose) figure,
:where(.prose) p:has(img) {
  margin-inline: var(--content-small);
}
:where(.prose) {
  /* Mermaid diagrams */
}
:where(.prose) .mermaid {
  margin-block-end: var(--space);
  margin-inline: auto;
  padding: var(--space);
}
:where(.prose) p img {
  max-inline-size: 100%;
}

.width-xs {
  max-width: var(--line-width-xs);
}

.width-s {
  max-width: var(--line-width-s);
}

.width-m {
  max-width: var(--line-width-m);
}

.width-l {
  max-width: var(--line-width-l);
}

.width-xl {
  max-width: var(--line-width-xl);
}

.width-full {
  max-width: var(--line-width-full);
}

/* Animation keyframes */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(0.5rem);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component Image System
 * @category Components
 * @description Responsive image handling with interactive zoom functionality.
 * Images automatically scale to 100% width, support smooth zoom on click,
 * and include keyboard navigation for dismissing zoomed images.
 * Works seamlessly with rhythm and reading layouts.
 *
 * @prop {element} img Default responsive image
 * @prop {class} .fx Images with border and effects
 * @prop {class} .nofx Images without border/effects
 * @prop {state} img:hover Prepare for zoom interaction
 * @prop {state} img:active Active zoom state
 * @prop {class} .zoomed Zoomed image state
 *
 * @example
 * // Basic responsive image
 * <img src="image.jpg" alt="Description">
 *
 * // Image with border and effects
 * <img src="image.jpg" class="fx" alt="Description">
 *
 * // Click to zoom, click again to close
 * // ESC key also closes zoomed image
 *
 * @since 0.1.0
 */
/* Image Styles - Works with both .reading (layout) and .rhythm (spacing) - Using logical properties */
img {
  max-inline-size: 100%;
}

:where(body:not(.no-rhythm)) {
  /* Basic image styling */
}
:where(body:not(.no-rhythm)) * + img,
:where(body:not(.no-rhythm)) img,
:where(body:not(.no-rhythm)) img:first-child,
:where(body:not(.no-rhythm)) img:last-child {
  margin: 0;
  max-inline-size: 100%;
  block-size: auto;
}
:where(body:not(.no-rhythm)) img {
  max-width: 100%;
  cursor: zoom-in;
  transition: mix-blend-mode 0.2s, opacity 0.2s, filter 0.2s;
}
:where(body:not(.no-rhythm)) img.fx {
  border-radius: var(--border-radius);
  border: var(--border);
}
:where(body:not(.no-rhythm)) img.nofx {
  border-radius: unset;
  border: unset;
  box-shadow: unset;
}
:where(body:not(.no-rhythm)) img:hover,
:where(body:not(.no-rhythm)) img.zoomed {
  mix-blend-mode: normal;
  filter: none;
}
:where(body:not(.no-rhythm)) img:active,
:where(body:not(.no-rhythm)) img.zoomed {
  cursor: zoom-out;
  display: block;
  z-index: var(--z-image-zoom);
  position: fixed;
  max-height: 88vh;
  max-width: 88vw;
  max-height: calc(100vh - var(--space) * 2);
  max-width: calc(100vw - var(--space) * 2);
  object-fit: contain;
  margin: 0 auto;
  text-align: center;
  padding: 0;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  user-select: none;
}

/* Zoom overlay backgrounds */
.reading :has(img:active)::before,
.reading :has(img.zoomed)::before,
.rhythm :has(img:active)::before,
.rhythm :has(img.zoomed)::before {
  content: "";
  position: fixed;
  inset: 0;
  background: var(--color-background);
  z-index: calc(var(--z-image-zoom) - 1);
}

/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component Markdown Styling
 * @category Components
 * @description Beautiful styling for markdown-generated HTML. Includes support for
 * blockquotes, callouts, code blocks, tables, lists, and other common markdown elements.
 * Designed to work seamlessly with the rhythm and reading layout systems.
 * Automatically styles headings, paragraphs, links with proper typography.
 *
 * @prop {class} .md Apply markdown styling to container
 * @prop {element} blockquote Styled blockquote with italic text
 * @prop {class} .callout Highlighted callout/admonition blocks
 * @prop {class} .callout-title Title for callout blocks
 * @prop {element} pre Code block with syntax highlighting
 * @prop {element} code Inline code styling
 * @prop {element} table Responsive table styling
 * @prop {element} a Link styling with underline
 * @prop {element} h1-h6 Heading hierarchy with proper sizing
 *
 * @example
 * // Apply markdown styling to content
 * <article class="reading md">
 *   <h1>Title</h1>
 *   <p>Paragraph text...</p>
 *   <blockquote>Quote</blockquote>
 *   <pre><code>Code block</code></pre>
 * </article>
 *
 * // Callout admonition block
 * <div class="callout">
 *   <div class="callout-title">Note</div>
 *   <div class="callout-content">Important information</div>
 * </div>
 *
 * @since 0.1.0
 * @see standard-09-md.scss
 */
.md .callout,
.md pre,
.md blockquote,
.md img,
.md iframe,
.md .outset,
.md .inset {
  background: var(--color-background-secondary);
  border-radius: var(--border-radius);
  border: var(--border);
  box-shadow: var(--shadow);
}
.md pre,
.md blockquote .inset {
  box-shadow: inset var(--shadow);
}
.md blockquote {
  font-size: var(--scale-s);
  line-height: var(--font-density-s);
  padding: var(--space);
  font-style: italic;
}
.md .callout {
  line-height: var(--font-density-s);
  transition: var(--duration-superfast) var(--motion-smooth);
  padding: var(--space-2xs);
  --color-callout: var(--color-background-secondary);
  --color-border: color-mix(
      in srgb,
      var(--color-callout) 15%,
      transparent
  );
  background: color-mix(in srgb, var(--color-callout) 5%, var(--color-background-secondary));
  border: var(--border);
}
.md .callout .callout-title {
  color: color-mix(in srgb, var(--color-callout) 50%, var(--color-foreground));
  font-weight: bold;
  font-size: var(--scale-s);
  user-select: none;
  padding: var(--space-3xs) calc(var(--space) - var(--space-xs)) var(--space-3xs) calc(var(--space) - var(--space-xs));
}
.md .callout .callout-content {
  color: var(--color-foreground);
  background: color-mix(in srgb, var(--color-callout) 2.5%, var(--color-background));
  box-shadow: inset var(--shadow);
  font-size: var(--scale-s);
  overflow: hidden;
  border-radius: var(--border-radius);
  padding: var(--space-s) calc(var(--space) - var(--space-xs));
  margin-top: var(--space-2xs);
  margin-left: 0;
  border: var(--border);
  text-align: left;
}
.md .callout .callout-content p:first-child {
  margin-top: 0;
}
.md .callout .callout-content p:last-child {
  margin-bottom: 0;
}
.md .callout .callout-content ul,
.md .callout .callout-content ol {
  padding: 0 calc(var(--space) * 0.75);
}
.md .callout .callout-content pre {
  margin: var(--space) 0;
}
.md .callout .callout-content > .callout {
  margin: calc(var(--space-xs) * -1);
}
.md .callout .callout-content > .callout .callout-content {
  padding: var(--space-s);
}
.md .callout .callout-content > .callout .callout-title {
  padding-left: var(--space-s);
  padding-right: var(--space-s);
}
.md .callout .callout-title-icon {
  display: none;
}
.md .callout img {
  margin-left: 0;
  margin-right: 0;
}
.md .callout[data-callout=warning i] {
  --color-callout: var(--color-red);
}
.md .callout[data-callout=important i] {
  --color-callout: var(--color-orange);
}
.md details > summary {
  list-style: none; /* removes marker in Firefox */
}
.md details .callout-title::before {
  content: "▸";
  display: inline-block;
  transform: rotate(0deg);
  transition: transform 0.2s ease;
}
.md details[open] .callout-title::before {
  transform: rotate(90deg);
}
.md details .callout-title-inner {
  display: inline;
}
.md p:has(img) + .callout[data-callout=caption i] {
  padding: 0;
  background: none;
  border: none;
  margin: 0 var(--space-l);
  position: relative;
  top: calc(var(--space) * -1.75);
  box-shadow: none;
}
.md p:has(img) + .callout[data-callout=caption i] .callout-title {
  display: none;
}
.md p:has(img) + .callout[data-callout=caption i] .callout-content {
  padding: 0;
  background: none;
  border: none;
  box-shadow: none;
  line-height: 1;
  text-align: center !important;
  text-wrap: balance !important;
}
@media only screen and (max-width: 768px) {
  .md ul:not([start]),
  .md ol:not([start]) {
    padding: 0;
    padding-left: var(--space);
  }
}

/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component Utility Classes
 * @category Utilities
 * @description Self-documenting utility classes following a consistent naming pattern.
 * All utilities use the format: [property]-[side/variant]-[size].
 * Size tokens: xs, s, base (default), l, xl, 2xl, 3xl
 * All utilities use logical properties for RTL support and !important for override capability.
 *
 * @pattern [property]-[side]-[size]
 * Examples:
 *   - .margin-top-xs (margin-top: var(--space-xs))
 *   - .padding-right-base (padding-right: var(--space))
 *   - .gap-l (gap: var(--space-l))
 *
 * @prop {class} .margin-* Margin utilities (top, right, bottom, left, block, inline)
 * @prop {class} .padding-* Padding utilities (top, right, bottom, left, block, inline)
 * @prop {class} .gap-* Gap utilities for flexbox/grid
 * @prop {class} .width-* Width utilities
 * @prop {class} .height-* Height utilities
 * @prop {class} .text-size-* Typography size utilities
 * @prop {class} .text-weight-* Font weight utilities
 * @prop {class} .text-align-* Text alignment utilities
 * @prop {class} .text-transform-* Text transformation utilities
 * @prop {class} .line-height-* Line height utilities
 * @prop {class} .text-color-* Text color utilities
 * @prop {class} .background-color-* Background color utilities
 * @prop {class} .border-color-* Border color utilities
 * @prop {class} .display-* Visibility utilities
 *
 * @example
 * // Spacing
 * <div class="margin-top-base padding-right-l">Spaced content</div>
 * <div class="margin-bottom-xs gap-s">Flex container</div>
 *
 * // Typography
 * <p class="text-size-small text-color-muted">Small muted text</p>
 * <h2 class="text-size-display text-align-center">Display heading</h2>
 *
 * // Layout
 * <div class="width-full height-auto display-hidden">Hidden element</div>
 *
 * @since 0.1.0
 */
/* =========================== */
/* MIXIN: Generate Scale      */
/* =========================== */
/**
 * Generate spacing utility classes for any CSS property
 * @param {string} $property CSS property name
 * @param {string} $prefix Class name prefix
 *
 * @example
 * @include generate-scale(margin-top, margin-top);
 * Creates: .margin-top-3xs, .margin-top-2xs, .margin-top-xs, .margin-top-s, .margin-top-base, etc.
 */
/**
 * Generate special value utilities (auto, none, etc.)
 * @param {string} $property CSS property name
 * @param {string} $class-suffix Class name suffix
 * @param {string} $value CSS value to apply
 */
/* =========================== */
/* MARGIN UTILITIES            */
/* =========================== */
/* Margin - Top */
.margin-top-3xs {
  margin-top: var(--space-3xs) !important;
}

.margin-top-2xs {
  margin-top: var(--space-2xs) !important;
}

.margin-top-xs {
  margin-top: var(--space-xs) !important;
}

.margin-top-s {
  margin-top: var(--space-s) !important;
}

.margin-top-base {
  margin-top: var(--space) !important;
}

.margin-top-l {
  margin-top: var(--space-l) !important;
}

.margin-top-xl {
  margin-top: var(--space-xl) !important;
}

.margin-top-2xl {
  margin-top: var(--space-2xl) !important;
}

.margin-top-3xl {
  margin-top: var(--space-3xl) !important;
}

.margin-top-0 {
  margin-top: 0 !important;
}

/* Margin - Right (inline-end) */
.margin-right-3xs {
  margin-right: var(--space-3xs) !important;
}

.margin-right-2xs {
  margin-right: var(--space-2xs) !important;
}

.margin-right-xs {
  margin-right: var(--space-xs) !important;
}

.margin-right-s {
  margin-right: var(--space-s) !important;
}

.margin-right-base {
  margin-right: var(--space) !important;
}

.margin-right-l {
  margin-right: var(--space-l) !important;
}

.margin-right-xl {
  margin-right: var(--space-xl) !important;
}

.margin-right-2xl {
  margin-right: var(--space-2xl) !important;
}

.margin-right-3xl {
  margin-right: var(--space-3xl) !important;
}

.margin-right-0 {
  margin-right: 0 !important;
}

/* Margin - Bottom */
.margin-bottom-3xs {
  margin-bottom: var(--space-3xs) !important;
}

.margin-bottom-2xs {
  margin-bottom: var(--space-2xs) !important;
}

.margin-bottom-xs {
  margin-bottom: var(--space-xs) !important;
}

.margin-bottom-s {
  margin-bottom: var(--space-s) !important;
}

.margin-bottom-base {
  margin-bottom: var(--space) !important;
}

.margin-bottom-l {
  margin-bottom: var(--space-l) !important;
}

.margin-bottom-xl {
  margin-bottom: var(--space-xl) !important;
}

.margin-bottom-2xl {
  margin-bottom: var(--space-2xl) !important;
}

.margin-bottom-3xl {
  margin-bottom: var(--space-3xl) !important;
}

.margin-bottom-0 {
  margin-bottom: 0 !important;
}

/* Margin - Left (inline-start) */
.margin-left-3xs {
  margin-left: var(--space-3xs) !important;
}

.margin-left-2xs {
  margin-left: var(--space-2xs) !important;
}

.margin-left-xs {
  margin-left: var(--space-xs) !important;
}

.margin-left-s {
  margin-left: var(--space-s) !important;
}

.margin-left-base {
  margin-left: var(--space) !important;
}

.margin-left-l {
  margin-left: var(--space-l) !important;
}

.margin-left-xl {
  margin-left: var(--space-xl) !important;
}

.margin-left-2xl {
  margin-left: var(--space-2xl) !important;
}

.margin-left-3xl {
  margin-left: var(--space-3xl) !important;
}

.margin-left-0 {
  margin-left: 0 !important;
}

/* Margin - Block (top & bottom) */
.margin-block-3xs {
  margin-block: var(--space-3xs) !important;
}

.margin-block-2xs {
  margin-block: var(--space-2xs) !important;
}

.margin-block-xs {
  margin-block: var(--space-xs) !important;
}

.margin-block-s {
  margin-block: var(--space-s) !important;
}

.margin-block-base {
  margin-block: var(--space) !important;
}

.margin-block-l {
  margin-block: var(--space-l) !important;
}

.margin-block-xl {
  margin-block: var(--space-xl) !important;
}

.margin-block-2xl {
  margin-block: var(--space-2xl) !important;
}

.margin-block-3xl {
  margin-block: var(--space-3xl) !important;
}

.margin-block-0 {
  margin-block: 0 !important;
}

/* Margin - Inline (left & right) */
.margin-inline-3xs {
  margin-inline: var(--space-3xs) !important;
}

.margin-inline-2xs {
  margin-inline: var(--space-2xs) !important;
}

.margin-inline-xs {
  margin-inline: var(--space-xs) !important;
}

.margin-inline-s {
  margin-inline: var(--space-s) !important;
}

.margin-inline-base {
  margin-inline: var(--space) !important;
}

.margin-inline-l {
  margin-inline: var(--space-l) !important;
}

.margin-inline-xl {
  margin-inline: var(--space-xl) !important;
}

.margin-inline-2xl {
  margin-inline: var(--space-2xl) !important;
}

.margin-inline-3xl {
  margin-inline: var(--space-3xl) !important;
}

.margin-inline-0 {
  margin-inline: 0 !important;
}

/* Margin - Auto (centering) */
.margin-inline-auto {
  margin-inline: auto !important;
}

.margin-left-auto {
  margin-left: auto !important;
}

.margin-right-auto {
  margin-right: auto !important;
}

.margin-top-auto {
  margin-top: auto !important;
}

.margin-bottom-auto {
  margin-bottom: auto !important;
}

/* Margin - All sides */
.margin-3xs {
  margin: var(--space-3xs) !important;
}

.margin-2xs {
  margin: var(--space-2xs) !important;
}

.margin-xs {
  margin: var(--space-xs) !important;
}

.margin-s {
  margin: var(--space-s) !important;
}

.margin-base {
  margin: var(--space) !important;
}

.margin-l {
  margin: var(--space-l) !important;
}

.margin-xl {
  margin: var(--space-xl) !important;
}

.margin-2xl {
  margin: var(--space-2xl) !important;
}

.margin-3xl {
  margin: var(--space-3xl) !important;
}

.margin-0 {
  margin: 0 !important;
}

/* =========================== */
/* PADDING UTILITIES           */
/* =========================== */
/* Padding - Top */
.padding-top-3xs {
  padding-top: var(--space-3xs) !important;
}

.padding-top-2xs {
  padding-top: var(--space-2xs) !important;
}

.padding-top-xs {
  padding-top: var(--space-xs) !important;
}

.padding-top-s {
  padding-top: var(--space-s) !important;
}

.padding-top-base {
  padding-top: var(--space) !important;
}

.padding-top-l {
  padding-top: var(--space-l) !important;
}

.padding-top-xl {
  padding-top: var(--space-xl) !important;
}

.padding-top-2xl {
  padding-top: var(--space-2xl) !important;
}

.padding-top-3xl {
  padding-top: var(--space-3xl) !important;
}

.padding-top-0 {
  padding-top: 0 !important;
}

/* Padding - Right */
.padding-right-3xs {
  padding-right: var(--space-3xs) !important;
}

.padding-right-2xs {
  padding-right: var(--space-2xs) !important;
}

.padding-right-xs {
  padding-right: var(--space-xs) !important;
}

.padding-right-s {
  padding-right: var(--space-s) !important;
}

.padding-right-base {
  padding-right: var(--space) !important;
}

.padding-right-l {
  padding-right: var(--space-l) !important;
}

.padding-right-xl {
  padding-right: var(--space-xl) !important;
}

.padding-right-2xl {
  padding-right: var(--space-2xl) !important;
}

.padding-right-3xl {
  padding-right: var(--space-3xl) !important;
}

.padding-right-0 {
  padding-right: 0 !important;
}

/* Padding - Bottom */
.padding-bottom-3xs {
  padding-bottom: var(--space-3xs) !important;
}

.padding-bottom-2xs {
  padding-bottom: var(--space-2xs) !important;
}

.padding-bottom-xs {
  padding-bottom: var(--space-xs) !important;
}

.padding-bottom-s {
  padding-bottom: var(--space-s) !important;
}

.padding-bottom-base {
  padding-bottom: var(--space) !important;
}

.padding-bottom-l {
  padding-bottom: var(--space-l) !important;
}

.padding-bottom-xl {
  padding-bottom: var(--space-xl) !important;
}

.padding-bottom-2xl {
  padding-bottom: var(--space-2xl) !important;
}

.padding-bottom-3xl {
  padding-bottom: var(--space-3xl) !important;
}

.padding-bottom-0 {
  padding-bottom: 0 !important;
}

/* Padding - Left */
.padding-left-3xs {
  padding-left: var(--space-3xs) !important;
}

.padding-left-2xs {
  padding-left: var(--space-2xs) !important;
}

.padding-left-xs {
  padding-left: var(--space-xs) !important;
}

.padding-left-s {
  padding-left: var(--space-s) !important;
}

.padding-left-base {
  padding-left: var(--space) !important;
}

.padding-left-l {
  padding-left: var(--space-l) !important;
}

.padding-left-xl {
  padding-left: var(--space-xl) !important;
}

.padding-left-2xl {
  padding-left: var(--space-2xl) !important;
}

.padding-left-3xl {
  padding-left: var(--space-3xl) !important;
}

.padding-left-0 {
  padding-left: 0 !important;
}

/* Padding - Block (top & bottom) */
.padding-block-3xs {
  padding-block: var(--space-3xs) !important;
}

.padding-block-2xs {
  padding-block: var(--space-2xs) !important;
}

.padding-block-xs {
  padding-block: var(--space-xs) !important;
}

.padding-block-s {
  padding-block: var(--space-s) !important;
}

.padding-block-base {
  padding-block: var(--space) !important;
}

.padding-block-l {
  padding-block: var(--space-l) !important;
}

.padding-block-xl {
  padding-block: var(--space-xl) !important;
}

.padding-block-2xl {
  padding-block: var(--space-2xl) !important;
}

.padding-block-3xl {
  padding-block: var(--space-3xl) !important;
}

.padding-block-0 {
  padding-block: 0 !important;
}

/* Padding - Inline (left & right) */
.padding-inline-3xs {
  padding-inline: var(--space-3xs) !important;
}

.padding-inline-2xs {
  padding-inline: var(--space-2xs) !important;
}

.padding-inline-xs {
  padding-inline: var(--space-xs) !important;
}

.padding-inline-s {
  padding-inline: var(--space-s) !important;
}

.padding-inline-base {
  padding-inline: var(--space) !important;
}

.padding-inline-l {
  padding-inline: var(--space-l) !important;
}

.padding-inline-xl {
  padding-inline: var(--space-xl) !important;
}

.padding-inline-2xl {
  padding-inline: var(--space-2xl) !important;
}

.padding-inline-3xl {
  padding-inline: var(--space-3xl) !important;
}

.padding-inline-0 {
  padding-inline: 0 !important;
}

/* Padding - All sides */
.padding-3xs {
  padding: var(--space-3xs) !important;
}

.padding-2xs {
  padding: var(--space-2xs) !important;
}

.padding-xs {
  padding: var(--space-xs) !important;
}

.padding-s {
  padding: var(--space-s) !important;
}

.padding-base {
  padding: var(--space) !important;
}

.padding-l {
  padding: var(--space-l) !important;
}

.padding-xl {
  padding: var(--space-xl) !important;
}

.padding-2xl {
  padding: var(--space-2xl) !important;
}

.padding-3xl {
  padding: var(--space-3xl) !important;
}

.padding-0 {
  padding: 0 !important;
}

/* =========================== */
/* GAP UTILITIES               */
/* =========================== */
/* Gap (flexbox/grid) */
.gap-3xs {
  gap: var(--space-3xs) !important;
}

.gap-2xs {
  gap: var(--space-2xs) !important;
}

.gap-xs {
  gap: var(--space-xs) !important;
}

.gap-s {
  gap: var(--space-s) !important;
}

.gap-base {
  gap: var(--space) !important;
}

.gap-l {
  gap: var(--space-l) !important;
}

.gap-xl {
  gap: var(--space-xl) !important;
}

.gap-2xl {
  gap: var(--space-2xl) !important;
}

.gap-3xl {
  gap: var(--space-3xl) !important;
}

.gap-0 {
  gap: 0 !important;
}

/* Row Gap */
.row-gap-3xs {
  row-gap: var(--space-3xs) !important;
}

.row-gap-2xs {
  row-gap: var(--space-2xs) !important;
}

.row-gap-xs {
  row-gap: var(--space-xs) !important;
}

.row-gap-s {
  row-gap: var(--space-s) !important;
}

.row-gap-base {
  row-gap: var(--space) !important;
}

.row-gap-l {
  row-gap: var(--space-l) !important;
}

.row-gap-xl {
  row-gap: var(--space-xl) !important;
}

.row-gap-2xl {
  row-gap: var(--space-2xl) !important;
}

.row-gap-3xl {
  row-gap: var(--space-3xl) !important;
}

.row-gap-0 {
  row-gap: 0 !important;
}

/* Column Gap */
.column-gap-3xs {
  column-gap: var(--space-3xs) !important;
}

.column-gap-2xs {
  column-gap: var(--space-2xs) !important;
}

.column-gap-xs {
  column-gap: var(--space-xs) !important;
}

.column-gap-s {
  column-gap: var(--space-s) !important;
}

.column-gap-base {
  column-gap: var(--space) !important;
}

.column-gap-l {
  column-gap: var(--space-l) !important;
}

.column-gap-xl {
  column-gap: var(--space-xl) !important;
}

.column-gap-2xl {
  column-gap: var(--space-2xl) !important;
}

.column-gap-3xl {
  column-gap: var(--space-3xl) !important;
}

.column-gap-0 {
  column-gap: 0 !important;
}

/* =========================== */
/* WIDTH UTILITIES             */
/* =========================== */
.width-3xs {
  width: var(--space-3xs) !important;
}

.width-2xs {
  width: var(--space-2xs) !important;
}

.width-xs {
  width: var(--space-xs) !important;
}

.width-s {
  width: var(--space-s) !important;
}

.width-base {
  width: var(--space) !important;
}

.width-l {
  width: var(--space-l) !important;
}

.width-xl {
  width: var(--space-xl) !important;
}

.width-2xl {
  width: var(--space-2xl) !important;
}

.width-3xl {
  width: var(--space-3xl) !important;
}

.width-0 {
  width: 0 !important;
}

.width-auto {
  width: auto !important;
}

.width-full {
  width: 100% !important;
}

.width-screen {
  width: 100vw !important;
}

.width-min {
  width: min-content !important;
}

.width-max {
  width: max-content !important;
}

.width-fit {
  width: fit-content !important;
}

/* Min Width */
.min-width-3xs {
  min-width: var(--space-3xs) !important;
}

.min-width-2xs {
  min-width: var(--space-2xs) !important;
}

.min-width-xs {
  min-width: var(--space-xs) !important;
}

.min-width-s {
  min-width: var(--space-s) !important;
}

.min-width-base {
  min-width: var(--space) !important;
}

.min-width-l {
  min-width: var(--space-l) !important;
}

.min-width-xl {
  min-width: var(--space-xl) !important;
}

.min-width-2xl {
  min-width: var(--space-2xl) !important;
}

.min-width-3xl {
  min-width: var(--space-3xl) !important;
}

.min-width-0 {
  min-width: 0 !important;
}

.min-width-full {
  min-width: 100% !important;
}

.min-width-screen {
  min-width: 100vw !important;
}

/* Max Width */
.max-width-3xs {
  max-width: var(--space-3xs) !important;
}

.max-width-2xs {
  max-width: var(--space-2xs) !important;
}

.max-width-xs {
  max-width: var(--space-xs) !important;
}

.max-width-s {
  max-width: var(--space-s) !important;
}

.max-width-base {
  max-width: var(--space) !important;
}

.max-width-l {
  max-width: var(--space-l) !important;
}

.max-width-xl {
  max-width: var(--space-xl) !important;
}

.max-width-2xl {
  max-width: var(--space-2xl) !important;
}

.max-width-3xl {
  max-width: var(--space-3xl) !important;
}

.max-width-none {
  max-width: none !important;
}

.max-width-full {
  max-width: 100% !important;
}

.max-width-screen {
  max-width: 100vw !important;
}

/* =========================== */
/* HEIGHT UTILITIES            */
/* =========================== */
.height-3xs {
  height: var(--space-3xs) !important;
}

.height-2xs {
  height: var(--space-2xs) !important;
}

.height-xs {
  height: var(--space-xs) !important;
}

.height-s {
  height: var(--space-s) !important;
}

.height-base {
  height: var(--space) !important;
}

.height-l {
  height: var(--space-l) !important;
}

.height-xl {
  height: var(--space-xl) !important;
}

.height-2xl {
  height: var(--space-2xl) !important;
}

.height-3xl {
  height: var(--space-3xl) !important;
}

.height-0 {
  height: 0 !important;
}

.height-auto {
  height: auto !important;
}

.height-full {
  height: 100% !important;
}

.height-screen {
  height: 100vh !important;
}

.height-min {
  height: min-content !important;
}

.height-max {
  height: max-content !important;
}

.height-fit {
  height: fit-content !important;
}

/* Min Height */
.min-height-3xs {
  min-height: var(--space-3xs) !important;
}

.min-height-2xs {
  min-height: var(--space-2xs) !important;
}

.min-height-xs {
  min-height: var(--space-xs) !important;
}

.min-height-s {
  min-height: var(--space-s) !important;
}

.min-height-base {
  min-height: var(--space) !important;
}

.min-height-l {
  min-height: var(--space-l) !important;
}

.min-height-xl {
  min-height: var(--space-xl) !important;
}

.min-height-2xl {
  min-height: var(--space-2xl) !important;
}

.min-height-3xl {
  min-height: var(--space-3xl) !important;
}

.min-height-0 {
  min-height: 0 !important;
}

.min-height-full {
  min-height: 100% !important;
}

.min-height-screen {
  min-height: 100vh !important;
}

/* Max Height */
.max-height-3xs {
  max-height: var(--space-3xs) !important;
}

.max-height-2xs {
  max-height: var(--space-2xs) !important;
}

.max-height-xs {
  max-height: var(--space-xs) !important;
}

.max-height-s {
  max-height: var(--space-s) !important;
}

.max-height-base {
  max-height: var(--space) !important;
}

.max-height-l {
  max-height: var(--space-l) !important;
}

.max-height-xl {
  max-height: var(--space-xl) !important;
}

.max-height-2xl {
  max-height: var(--space-2xl) !important;
}

.max-height-3xl {
  max-height: var(--space-3xl) !important;
}

.max-height-none {
  max-height: none !important;
}

.max-height-full {
  max-height: 100% !important;
}

.max-height-screen {
  max-height: 100vh !important;
}

/* =========================== */
/* TEXT SIZE UTILITIES         */
/* =========================== */
/**
 * Typography size utilities
 * Moved from standard-03-typography.scss for better layer organization
 */
.text-size-small {
  font-size: var(--scale-s);
}

.text-size-smaller {
  font-size: var(--scale-xs);
}

.text-size-micro {
  font-size: var(--scale-micro);
}

.text-size-compact {
  line-height: var(--font-density-s);
}

.text-size-display {
  font-size: clamp(var(--scale-3xl), 12vw, var(--scale-display));
  line-height: 0.85;
  font-weight: var(--font-header-weight);
  letter-spacing: var(--font-header-letter-spacing);
}

.text-size-poster {
  font-size: clamp(var(--scale-display), 15vw, var(--scale-poster));
  line-height: 0.8;
  font-weight: var(--font-header-weight);
  letter-spacing: -0.04em;
}

.text-size-label {
  font-size: var(--scale-micro);
  text-transform: uppercase;
  letter-spacing: 0.15em;
  font-weight: 700;
}

/* =========================== */
/* FONT FAMILY UTILITIES       */
/* =========================== */
/**
 * Font family utility classes
 * Moved from standard-03-typography.scss
 */
.font-family-mono,
.font-family-monospace,
.font-family-code {
  font-family: var(--font-monospace), Inconsolata, Menlo, monospace;
  font-feature-settings: var(--font-monospace-feature);
  font-variation-settings: var(--font-monospace-variation);
  font-size: var(--scale-s);
}

.font-family-ui,
.font-family-interface {
  font-family: var(--font-interface), system-ui, sans-serif;
  font-variation-settings: var(--font-interface-variation);
  font-feature-settings: var(--font-interface-feature);
}

/* =========================== */
/* FONT WEIGHT UTILITIES       */
/* =========================== */
.text-weight-bold {
  font-weight: var(--bold-weight);
}

.text-weight-normal {
  font-weight: var(--font-weight);
}

/* =========================== */
/* LINE HEIGHT UTILITIES       */
/* =========================== */
/**
 * Line height utilities for controlling text spacing
 */
.line-height-tight {
  line-height: 0.85;
}

.line-height-none {
  line-height: 1;
}

.line-height-snug {
  line-height: var(--font-density-s);
}

.line-height-normal {
  line-height: var(--font-density);
}

.line-height-relaxed {
  line-height: 1.6;
}

/* =========================== */
/* TEXT ALIGNMENT UTILITIES    */
/* =========================== */
.text-align-left {
  text-align: left !important;
}

.text-align-center {
  text-align: center !important;
}

.text-align-right {
  text-align: right !important;
}

.text-align-justify {
  text-align: justify !important;
}

/* =========================== */
/* TEXT TRANSFORMATION         */
/* =========================== */
.text-transform-uppercase {
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.text-transform-lowercase {
  text-transform: lowercase;
}

.text-transform-capitalize {
  text-transform: capitalize;
}

.text-transform-normal {
  text-transform: none;
}

.text-no-wrap {
  white-space: nowrap !important;
}

.text-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: 100%;
}

/* =========================== */
/* TEXT COLOR UTILITIES        */
/* =========================== */
/**
 * Text color utilities
 * Moved from standard-02-color.scss
 */
.text-color-muted {
  color: var(--color-muted) !important;
}

.text-color-subtle {
  color: var(--color-subtle) !important;
}

.text-color-accent {
  color: var(--color-accent) !important;
}

/* =========================== */
/* BACKGROUND COLOR UTILITIES  */
/* =========================== */
.background-color-secondary {
  background: var(--color-background-secondary) !important;
}

/* =========================== */
/* BORDER COLOR UTILITIES      */
/* =========================== */
.border-color-default {
  border: var(--border) !important;
}

.border-color-accent {
  border: var(--border-accent) !important;
}

/* =========================== */
/* DISPLAY & VISIBILITY       */
/* =========================== */
/**
 * Display utilities for showing/hiding content
 */
.display-hidden,
.hidden {
  display: none !important;
}

.display-visible {
  display: block !important;
}

.display-inline {
  display: inline !important;
}

.display-inline-block {
  display: inline-block !important;
}

.display-flex {
  display: flex !important;
}

.display-grid {
  display: grid !important;
}

/**
 * Visually hidden (accessible hiding for screen readers)
 */
.visibility-screen-reader-only,
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

/* =========================== */
/* LAYOUT UTILITIES            */
/* =========================== */
/**
 * Centering and layout helpers
 */
.center-content {
  display: flex;
  align-items: center;
  justify-content: center;
}

.center-horizontally {
  margin-left: auto;
  margin-right: auto;
}

.center-vertically {
  display: flex;
  align-items: center;
}

/* =========================== */
/* RHYTHM UTILITIES            */
/* =========================== */
/**
 * Rhythm-aware utilities for consistent spacing
 */
.rhythm-tight {
  --rhythm-multiplier: 0.5;
}

.rhythm-loose {
  --rhythm-multiplier: 1.5;
}

/* =========================== */
/* FALLBACK SUPPORT            */
/* =========================== */
/**
 * Fallback for browsers without CSS Grid or modern layout support
 */
@supports not (display: grid) {
  .rhythm {
    display: block;
  }
  .rhythm > * {
    margin-block-end: calc(var(--space-block) * var(--rhythm-multiplier));
  }
  .rhythm > :last-child {
    margin-block-end: 0;
  }
}
/* =========================== */
/* READING WIDTH UTILITIES     */
/* =========================== */
/**
 * Width constraints for optimal reading experience
 */
.width-line-extra-small {
  max-width: var(--line-width-xs);
}

.width-line-small {
  max-width: var(--line-width-s);
}

.width-line-base {
  max-width: var(--line-width);
}

.width-line-large {
  max-width: var(--line-width-l);
}

.width-line-extra-large {
  max-width: var(--line-width-xl);
}

.width-line-full {
  max-width: var(--line-width-full);
}

/* =========================== */
/* BODY PADDING NEGATION       */
/* =========================== */
/**
 * Utilities to negate body padding for full-width elements
 * Useful for footers, headers, or other elements that should extend to viewport edges
 *
 * .negate-body-padding — Negates horizontal body padding only
 * .negate-body-padding-full — Negates all body padding (horizontal + bottom)
 * .negate-body-padding-bottom — Negates extra bottom body padding (1.5× multiplier)
 *
 * Usage:
 * <footer class="negate-body-padding-full">
 *   Full-width footer content
 * </footer>
 */
/**
 * Negate horizontal body padding (left/right)
 * Allows full-width backgrounds while keeping vertical padding
 */
.negate-body-padding {
  margin-inline: calc(var(--space) * var(--body-padding-multiplier) * -1);
  padding-inline: calc(var(--space) * var(--body-padding-multiplier));
}
@media (max-width: 768px) {
  .negate-body-padding {
    margin-inline: calc(var(--space) * var(--body-mobile-padding-multiplier) * -1);
    padding-inline: calc(var(--space) * var(--body-mobile-padding-multiplier));
  }
}

/**
 * Negate bottom body padding (extra 1.5× multiplier)
 * Removes the generous bottom padding applied to body elements
 * Useful when you want footer to sit flush at bottom
 */
.negate-body-padding-bottom {
  margin-block-end: calc(var(--space) * var(--body-padding-multiplier) * 1.5 * -1);
}
@media (max-width: 768px) {
  .negate-body-padding-bottom {
    margin-block-end: calc(var(--space) * var(--body-mobile-padding-multiplier) * 1.5 * -1);
  }
}

/**
 * Negate all body padding (horizontal + bottom)
 * Full-width element that extends to viewport edges on all sides except top
 * Combines .negate-body-padding + .negate-body-padding-bottom
 */
.negate-body-padding-full {
  margin-inline: calc(var(--space) * var(--body-padding-multiplier) * -1);
  margin-block-end: calc(var(--space) * var(--body-padding-multiplier) * 1.5 * -1);
  padding-inline: calc(var(--space) * var(--body-padding-multiplier));
}
@media (max-width: 768px) {
  .negate-body-padding-full {
    margin-inline: calc(var(--space) * var(--body-mobile-padding-multiplier) * -1);
    margin-block-end: calc(var(--space) * var(--body-mobile-padding-multiplier) * 1.5 * -1);
    padding-inline: calc(var(--space) * var(--body-mobile-padding-multiplier));
  }
}

/* =========================== */
/* RESPONSIVE BREAKPOINTS      */
/* =========================== */
/**
 * @component Responsive Display Utilities
 * @category Utilities
 * @description Show/hide elements at different screen sizes.
 * Uses SCSS breakpoint variables for consistent responsive behavior.
 *
 * Classes:
 * - .sm-hidden: Hidden on small screens (≤768px)
 * - .sm-only: Visible only on small screens (≤768px)
 * - .md-hidden: Hidden on medium screens (769px-1024px)
 * - .md-only: Visible only on medium screens (769px-1024px)
 * - .lg-hidden: Hidden on large screens (≥1024px)
 * - .lg-only: Visible only on large screens (≥1024px)
 *
 * @example
 * <!-- Show on mobile, hide on desktop -->
 * <div class="sm-only">Mobile content</div>
 *
 * <!-- Hide on mobile, show on desktop -->
 * <div class="sm-hidden">Desktop content</div>
 *
 * <!-- Show only on tablets -->
 * <div class="md-only">Tablet content</div>
 *
 * @since 0.10.53
 */
/* Small screens (mobile): ≤768px */
@media (max-width: 768px) {
  .sm-hidden {
    display: none !important;
  }
  .sm-only {
    display: inherit !important;
  }
  .md-only {
    display: none !important;
  }
  .lg-only {
    display: none !important;
  }
}
/* Medium screens (tablet): 769px-1024px */
@media (min-width: 769px) and (max-width: 1024px) {
  .md-hidden {
    display: none !important;
  }
  .sm-only {
    display: none !important;
  }
  .md-only {
    display: inherit !important;
  }
  .lg-only {
    display: none !important;
  }
}
/* Large screens (desktop): ≥1024px */
@media (min-width: 1025px) {
  .lg-hidden {
    display: none !important;
  }
  .sm-only {
    display: none !important;
  }
  .md-only {
    display: none !important;
  }
  .lg-only {
    display: inherit !important;
  }
}
/* Standard - Fine-Art Typography Framework */
/* A framework implementing classical design principles, mathematical precision with the golden ratio, */
/* and micro-typography rules inspired by the masters of print design. */
/**
 * @component Debug System
 * @category Development
 * @description Development debugging utilities for visualizing grid layouts,
 * baseline rhythm, reading zones, and typography processing. Activated by adding
 * .standard-debug class to body or parent element. Shows overlays for grid columns,
 * baseline rhythm, reading layout zones, and other layout metrics. Essential for
 * design system development and layout debugging. Automatically hidden in print.
 *
 * @prop {class} .standard-debug Enable debug visualization
 * @prop {overlay} baseline-grid Horizontal baseline grid overlay
 * @prop {overlay} grid-columns Vertical grid column overlay
 * @prop {overlay} reading-zones Reading layout zone visualization
 * @prop {overlay} rhythm-spacing Margin/spacing outline visualization
 * @prop {indicator} breakpoint-indicator Current responsive breakpoint
 * @prop {indicator} debug-panel Fixed info panel with metrics
 *
 * @example
 * // Enable debug mode on page
 * <body class="standard-debug">
 *   <!-- All debug overlays visible -->
 * </body>
 *
 * // Debug specific grid
 * <div class="grid standard-debug">
 *   <div class="col-4">Shows grid overlay</div>
 * </div>
 *
 * // Debug reading layout zones
 * <article class="reading standard-debug">
 *   <div class="accent">Zone highlighted</div>
 * </article>
 *
 * @since 0.1.0
 */
/* =========================== */
/* STANDARD DEBUG SYSTEM       */
/* =========================== */
/* Single class to enable all debug features */
.standard-debug {
  position: relative;
}

/* Baseline Grid Overlay */
.standard-debug::before {
  content: "";
  position: fixed;
  inset: 0;
  background-image: repeating-linear-gradient(to bottom, transparent, transparent calc(var(--space) - 1px), color-mix(in srgb, var(--color-accent) 15%, transparent) calc(var(--space) - 1px), color-mix(in srgb, var(--color-accent) 15%, transparent) var(--space));
  pointer-events: none;
  z-index: var(--z-tooltip);
  opacity: 0.5;
}

/* Grid Column Overlay (only for .grid inside debug) */
.standard-debug .grid {
  position: relative;
}

.standard-debug .grid::after {
  content: "";
  position: absolute;
  inset: 0;
  display: grid;
  grid-template-columns: repeat(var(--grid-cols), 1fr);
  column-gap: var(--grid-gap);
  pointer-events: none;
  z-index: var(--z-tooltip);
}

.standard-debug .grid::after {
  background-image: repeating-linear-gradient(to right, color-mix(in srgb, var(--color-cyan) 10%, transparent) 0, color-mix(in srgb, var(--color-cyan) 10%, transparent) calc((100% - var(--grid-gap) * (var(--grid-cols) - 1)) / var(--grid-cols)), transparent calc((100% - var(--grid-gap) * (var(--grid-cols) - 1)) / var(--grid-cols)), transparent calc((100% - var(--grid-gap) * (var(--grid-cols) - 1)) / var(--grid-cols) + var(--grid-gap)));
}

/* Reading Layout Debug - show zones */
.standard-debug.reading::after {
  content: "";
  position: absolute;
  inset: 0;
  display: grid;
  grid-template-columns: [full-start] var(--content-full) [feature-start] var(--content-feature) [accent-start] var(--content-accent) [content-start] var(--content) [content-end] var(--content-accent) [accent-end] var(--content-feature) [feature-end] var(--content-full) [full-end];
  pointer-events: none;
  z-index: var(--z-base);
  opacity: 0.1;
  background: linear-gradient(to right, transparent 0, transparent var(--content-full), var(--color-purple) var(--content-full), var(--color-purple) calc(var(--content-full) + var(--content-feature)), var(--color-blue) calc(var(--content-full) + var(--content-feature)), var(--color-blue) calc(var(--content-full) + var(--content-feature) + var(--content-accent)), var(--color-accent) calc(var(--content-full) + var(--content-feature) + var(--content-accent)), var(--color-accent) calc(100% - var(--content-full) - var(--content-feature) - var(--content-accent)), var(--color-blue) calc(100% - var(--content-full) - var(--content-feature) - var(--content-accent)), var(--color-blue) calc(100% - var(--content-full) - var(--content-feature)), var(--color-purple) calc(100% - var(--content-full) - var(--content-feature)), var(--color-purple) calc(100% - var(--content-full)), transparent calc(100% - var(--content-full)));
}

/* Rhythm Spacing Debug - outline all elements */
.standard-debug.rhythm > * {
  outline: 1px dashed color-mix(in srgb, var(--color-orange) 50%, transparent);
  outline-offset: -1px;
  position: relative;
}

/* Show margin-block-end values */
.standard-debug.rhythm > *::after {
  content: "↓ " attr(data-margin-block-end);
  position: absolute;
  top: 0;
  right: 0;
  background: var(--color-orange);
  color: var(--color-background);
  font-size: var(--scale-xs);
  font-family: var(--font-monospace);
  padding: var(--space-3xs) var(--space-2xs);
  border-radius: var(--border-radius);
  pointer-events: none;
  opacity: 0.9;
  z-index: var(--z-tooltip);
  white-space: nowrap;
  display: none;
}

/* Typography Debug - show processed elements */
.standard-debug [data-typography-processed] {
  position: relative;
}

.standard-debug [data-typography-processed]::before {
  content: "✓ Typo";
  position: absolute;
  top: 0;
  left: 0;
  background: var(--color-success);
  color: var(--color-background);
  font-size: var(--scale-xs);
  font-family: var(--font-monospace);
  padding: var(--space-3xs) var(--space-2xs);
  border-radius: var(--border-radius);
  pointer-events: none;
  opacity: 0.63;
  z-index: var(--z-tooltip);
  white-space: nowrap;
  display: none;
}

/* Debug Info Panel */
.standard-debug::after {
  content: "🔍 Standard Debug" "\a" "Baseline: " var(--space) "\a" "Ratio: " var(--font-ratio) "\a" "Density: " var(--font-density) "\a" "Grid: " var(--grid-cols) " cols";
  position: fixed;
  top: var(--space);
  right: var(--space);
  background: var(--color-background);
  color: var(--color-foreground);
  border: var(--border-accent);
  border-radius: var(--border-radius);
  padding: var(--space-s);
  font-family: var(--font-monospace);
  font-size: var(--scale-xs);
  line-height: 1.5;
  white-space: pre;
  box-shadow: var(--shadow-xl);
  z-index: var(--z-toast);
  pointer-events: none;
  opacity: 0.95;
}

/* Grid item debugging */
.standard-debug .grid > * {
  outline: 1px solid color-mix(in srgb, var(--color-cyan) 50%, transparent);
  outline-offset: -1px;
  position: relative;
}

.standard-debug .grid > *::before {
  content: attr(class);
  position: absolute;
  top: var(--space-3xs);
  left: var(--space-3xs);
  background: var(--color-cyan);
  color: var(--color-background);
  font-size: var(--scale-xs);
  font-family: var(--font-monospace);
  padding: var(--space-3xs) var(--space-2xs);
  border-radius: var(--border-radius);
  pointer-events: none;
  opacity: 0.9;
  z-index: var(--z-tooltip);
  white-space: nowrap;
  max-width: 90%;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Free column debug */
.standard-debug .free-col::after {
  content: "start: " var(--start) " / span: " var(--span);
  position: absolute;
  bottom: var(--space-3xs);
  left: var(--space-3xs);
  background: var(--color-purple);
  color: var(--color-background);
  font-size: var(--scale-xs);
  font-family: var(--font-monospace);
  padding: var(--space-3xs) var(--space-2xs);
  border-radius: var(--border-radius);
  pointer-events: none;
  opacity: 0.9;
  z-index: var(--z-tooltip);
  white-space: nowrap;
}

/* Color token visualization */
.standard-debug .text-accent,
.standard-debug .text-success,
.standard-debug .text-warning,
.standard-debug .text-error {
  position: relative;
}

.standard-debug .text-accent::before {
  content: "accent";
  background: var(--color-accent);
}

.standard-debug .text-success::before {
  content: "success";
  background: var(--color-success);
}

.standard-debug .text-warning::before {
  content: "warning";
  background: var(--color-warning);
}

.standard-debug .text-error::before {
  content: "error";
  background: var(--color-error);
}

.standard-debug .text-accent::before,
.standard-debug .text-success::before,
.standard-debug .text-warning::before,
.standard-debug .text-error::before {
  position: absolute;
  top: -1.5em;
  left: 0;
  color: var(--color-background);
  font-size: var(--scale-xs);
  font-family: var(--font-monospace);
  padding: var(--space-3xs) var(--space-2xs);
  border-radius: var(--border-radius);
  pointer-events: none;
  opacity: 0.9;
  z-index: var(--z-tooltip);
  white-space: nowrap;
}

/* Responsive breakpoint indicator */
body.standard-debug::before {
  content: "md";
  position: fixed;
  bottom: var(--space);
  left: var(--space);
  color: var(--color-foreground);
  font-family: var(--font-monospace);
  font-size: var(--scale-xs);
  padding: var(--space-xs) var(--space-s);
  border-radius: var(--border-radius);
  box-shadow: var(--shadow);
  z-index: var(--z-toast);
  pointer-events: none;
  font-weight: bold;
}

@media (max-width: 768px) {
  body.standard-debug::before {
    content: "sm (<768px)";
    color: var(--color-foreground);
  }
}
@media (max-width: 600px) {
  body.standard-debug::before {
    content: "xs (<600px)";
    color: var(--color-foreground);
  }
}
@media (min-width: 1024px) {
  body.standard-debug::before {
    content: "lg (≥1024px)";
    color: var(--color-foreground);
  }
}
/* Layout zone labels for .reading - CRITICAL FIX */
.standard-debug.reading .small,
.standard-debug.reading .accent,
.standard-debug.reading .feature,
.standard-debug.reading .full {
  position: relative; /* CRITICAL: Make these positioned containers */
  outline: 2px dashed; /* Add outline to make zones visible */
  outline-offset: -2px;
}

.standard-debug.reading .small {
  outline-color: color-mix(in srgb, var(--color-blue) 50%, transparent);
}

.standard-debug.reading .accent {
  outline-color: color-mix(in srgb, var(--color-accent) 50%, transparent);
}

.standard-debug.reading .feature {
  outline-color: color-mix(in srgb, var(--color-purple) 50%, transparent);
}

.standard-debug.reading .full {
  outline-color: color-mix(in srgb, var(--color-pink) 50%, transparent);
}

.standard-debug.reading .small::before,
.standard-debug.reading .accent::before,
.standard-debug.reading .feature::before,
.standard-debug.reading .full::before {
  position: absolute;
  top: var(--space-3xs);
  right: var(--space-3xs);
  font-size: var(--scale-xs);
  font-family: var(--font-monospace);
  padding: var(--space-3xs) var(--space-2xs);
  border-radius: var(--border-radius);
  pointer-events: none;
  opacity: 0.95;
  z-index: var(--z-tooltip);
  color: var(--color-background);
  white-space: nowrap;
  font-weight: bold;
}

.standard-debug.reading .small::before {
  content: "Small";
  background: var(--color-blue);
}

.standard-debug.reading .accent::before {
  content: "Accent";
  background: var(--color-accent);
}

.standard-debug.reading .feature::before {
  content: "Feature";
  background: var(--color-purple);
}

.standard-debug.reading .full::before {
  content: "Full";
  background: var(--color-pink);
}

/* Default content zone indicator (elements without zone class) */
.standard-debug.reading > :not(.small):not(.accent):not(.feature):not(.full) {
  outline: 1px dotted color-mix(in srgb, var(--color-green) 30%, transparent);
  outline-offset: -1px;
}

/* Print debug styles */
@media print {
  .standard-debug::before,
  .standard-debug::after,
  .standard-debug .grid::after,
  .standard-debug.reading::after,
  body.standard-debug::before {
    display: none !important;
  }
}
/* Dark mode adjustments for debug */
@media (prefers-color-scheme: dark) {
  .standard-debug::before {
    opacity: 0.3;
  }
  .standard-debug.reading::after {
    opacity: 0.15;
  }
}
/* Add to standard.css */
:root {
  --baseline-trim-support: 0; /* Will be 1 when supported */
}

/* Detect support */
@supports (text-box-trim: both) {
  :root {
    --baseline-trim-support: 1;
  }
}
@supports (leading-trim: both) {
  :root {
    --baseline-trim-support: 1;
  }
}
/* Apply when supported */
.rhythm {
  /* Current fallback behavior */
}

@supports (text-box-trim: both) or (leading-trim: both) {
  .rhythm > * {
    text-box-trim: both;
    text-box-edge: cap alphabetic;
    /* Safari fallback */
    leading-trim: both;
    text-edge: cap alphabetic;
    /* Adjust margins since leading is now trimmed */
    margin-block-end: var(--space);
  }
  .rhythm > :is(h1, h2, h3, h4, h5, h6) {
    text-box-trim: both;
    text-box-edge: cap alphabetic;
    leading-trim: both;
    text-edge: cap alphabetic;
  }
}

class GitHubComments{constructor(e={}){this.apiUrl=e.apiUrl||"/api/comments",this.pageId=e.pageId,this.container=document.querySelector(e.container||"#comments"),this.formSelector=e.form||"#comment-form",this.comments=[],this.loading=!1,this.pollInterval=e.pollInterval||null,this.pollTimer=null}async load(){if(this.pageId){this.loading=!0;try{const e=await fetch(`${this.apiUrl}?pageId=${encodeURIComponent(this.pageId)}`);if(!e.ok)throw new Error(`API error: ${e.status}`);const t=await e.json();return this.comments=t.comments||[],this.loading=!1,this.comments}catch(e){return console.error("Error loading comments:",e),this.loading=!1,[]}}else console.error("GitHubComments: pageId is required")}async submit(e){try{const t=await fetch(this.apiUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({pageId:this.pageId,...e})});if(!t.ok){let e=`API error: ${t.status}`;try{e=(await t.json()).message||e}catch(n){e=`API endpoint not available (${t.status})`}throw new Error(e)}const n=await t.json();return n.comment&&(this.comments.push(n.comment),this.comments.sort((e,t)=>new Date(t.createdAt)-new Date(e.createdAt))),n}catch(e){throw console.error("Error submitting comment:",e),e}}formatTime(e){const t=new Date(e),n=new Date,o=Math.floor((n-t)/1e3);return o<60?"just now":o<3600?`${Math.floor(o/60)}m ago`:o<86400?`${Math.floor(o/3600)}h ago`:o<604800?`${Math.floor(o/86400)}d ago`:t.toLocaleDateString()}escapeHTML(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}formatContent(e){let t=this.escapeHTML(e);return t=t.replace(/\*\*(.+?)\*\*/g,"<strong>$1</strong>"),t=t.replace(/\*(.+?)\*/g,"<em>$1</em>"),t=t.replace(/_(.+?)_/g,"<em>$1</em>"),t=t.replace(/```(.*?)```/gs,"<pre><code>$1</code></pre>"),t=t.replace(/`(.+?)`/g,"<code>$1</code>"),t=t.replace(/\[(.+?)\]\((.+?)\)/g,'<a href="$2" target="_blank">$1</a>'),t=t.replace(/\n/g,"<br>"),t}renderComment(e,t=0){const n=!1!==e.approved?"":" data-pending",o=e.spam?" data-spam":"";return`\n      <div class="comment" data-id="${e.id}" data-level="${t}"${n}${o}>\n        <div class="comment-header">\n          <span class="comment-author">${this.escapeHTML(e.author)}</span>\n          <span class="comment-date">${this.formatTime(e.createdAt)}</span>\n          ${e.spam?'<span class="comment-flag">Flagged as spam</span>':""}\n          ${e.approved?"":'<span class="comment-pending">Awaiting moderation</span>'}\n        </div>\n        <div class="comment-content">\n          ${this.formatContent(e.content)}\n        </div>\n        \x3c!--div class="comment-actions">\n          <button class="comment-reply" data-parent-id="${e.id}">Reply</button>\n        </div--\x3e\n      </div>\n    `}buildCommentTree(){const e={},t=[];for(const t of this.comments)e[t.id]={...t,replies:[]};for(const n of this.comments)n.parentId&&e[n.parentId]?e[n.parentId].replies.push(e[n.id]):t.push(e[n.id]);return t}renderTree(e,t=0){return e.map(e=>{let n=this.renderComment(e,t);return e.replies&&e.replies.length>0&&(n+=`<div class="comment-replies">${this.renderTree(e.replies,t+1)}</div>`),n}).join("")}render(){if(!this.container)return void console.error("GitHubComments: container not found");if(0===this.comments.length)return void(this.container.innerHTML='<p class="comments-empty">No comments yet. Be the first to comment!</p>');const e=this.buildCommentTree();this.container.innerHTML=this.renderTree(e),this.attachReplyHandlers()}attachReplyHandlers(){this.container.querySelectorAll(".comment-reply").forEach(e=>{e.addEventListener("click",e=>{const t=e.target.dataset.parentId,n=document.querySelector(this.formSelector);if(n){const e=n.querySelector('[name="parentId"]');e&&(e.value=t),n.scrollIntoView({behavior:"smooth"})}})})}attachFormHandler(e=null){const t=document.querySelector(e||this.formSelector);if(t){if(t.removeAttribute("hx-boost"),t.setAttribute("hx-disable","true"),window.htmx){const n=t.cloneNode(!0);t.parentNode.replaceChild(n,t);return void document.querySelector(e||this.formSelector).addEventListener("submit",this._handleFormSubmit.bind(this))}t.addEventListener("submit",this._handleFormSubmit.bind(this))}else console.error("GitHubComments: form not found")}async _handleFormSubmit(e){e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation();const t=e.target,n=new FormData(t),o={author:n.get("author"),email:n.get("email"),content:n.get("content"),parentId:n.get("parentId")||null},r=t.querySelector("button[type=submit]"),s=r.textContent,a=t.querySelector("#form-status");try{r.disabled=!0,r.textContent="Submitting...",r.style.opacity="0.7",a&&(a.style.display="block",a.textContent="Sending your comment...",a.style.color="var(--color-foreground)");await this.submit(o);a&&(a.textContent="Comment submitted successfully! It will appear after moderation.",a.style.color="var(--color-green)",setTimeout(()=>{a.style.display="none",a.textContent=""},6e3)),t.reset();const e=t.querySelector('[name="parentId"]');e&&(e.value=""),this.render()}catch(e){a&&(a.textContent=`Error: ${e.message}`,a.style.color="var(--color-red)",a.style.display="block")}finally{r.disabled=!1,r.textContent=s,r.style.opacity="1"}}startPolling(){this.pollInterval&&(this.pollTimer=setInterval(async()=>{const e=this.comments.length;await this.load(),this.comments.length>e&&this.render()},this.pollInterval))}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}}"undefined"!=typeof module&&module.exports&&(module.exports=GitHubComments);
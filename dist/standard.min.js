/**
 * Image Zoom - Standalone
 *
 * A lightweight image zoom library with keyboard navigation.
 * Click any image to zoom, use arrow keys to navigate, ESC to close.
 *
 * Features:
 * - Click to zoom in/out
 * - Keyboard navigation (←/→ arrows)
 * - ESC to close
 * - Wraps around image gallery
 * - Auto-injects required CSS
 * - Custom events for extensibility
 * - Configurable selectors
 *
 * @version Standard Framework v0.13.8
 * @license MIT
 * @author Your Name
 */
class ImageZoom{constructor(e={}){this.options={selector:"img:not([data-no-zoom])",zoomedClass:"zoomed",enableKeyboardNav:!0,enableCustomEvents:!0,...e},this.currentZoomedImage=null,this.images=[],this.init()}init(){this.bindClickEvents(),this.options.enableKeyboardNav&&this.bindKeyboardEvents(),this.dispatchEvent("initialized",{})}refreshImages(){return this.images=Array.from(document.querySelectorAll(this.options.selector)),this.images.length}bindClickEvents(){document.addEventListener("click",e=>{const t=e.target.closest(this.options.selector);t?(e.preventDefault(),e.stopPropagation(),this.toggle(t)):this.currentZoomedImage&&this.close()})}bindKeyboardEvents(){document.addEventListener("keydown",e=>{if(this.currentZoomedImage)switch(e.key){case"Escape":e.preventDefault(),this.close();break;case"ArrowLeft":case"ArrowUp":e.preventDefault(),this.navigate(-1);break;case"ArrowRight":case"ArrowDown":e.preventDefault(),this.navigate(1)}})}toggle(e){this.currentZoomedImage===e?this.close():this.open(e)}open(e){this.currentZoomedImage&&this.close(),e.classList.add(this.options.zoomedClass),this.currentZoomedImage=e,document.body.classList.add("image-zoomed"),this.dispatchEvent("open",{image:e})}close(){if(!this.currentZoomedImage)return;const e=this.currentZoomedImage;e.classList.remove(this.options.zoomedClass),this.currentZoomedImage=null,document.body.classList.remove("image-zoomed"),this.dispatchEvent("close",{image:e})}navigate(e){if(!this.currentZoomedImage)return;this.refreshImages();const t=this.images.indexOf(this.currentZoomedImage);if(-1===t)return;const o=(t+e+this.images.length)%this.images.length,s=this.images[o];s&&this.open(s)}dispatchEvent(e,t){this.options.enableCustomEvents&&"undefined"!=typeof CustomEvent&&document.dispatchEvent(new CustomEvent(`imagezoom:${e}`,{detail:{...t,timestamp:Date.now(),instance:this},bubbles:!0,cancelable:!0}))}updateOptions(e){if(this.options={...this.options,...e},void 0!==e.backdropOpacity){const e=document.getElementById("image-zoom-styles");e&&e.remove(),this.injectStyles()}this.dispatchEvent("optionsUpdated",{options:this.options})}getState(){return{isZoomed:!!this.currentZoomedImage,currentImage:this.currentZoomedImage,totalImages:this.refreshImages(),currentIndex:this.currentZoomedImage?this.images.indexOf(this.currentZoomedImage):-1}}destroy(){this.currentZoomedImage&&this.close();const e=document.getElementById("image-zoom-styles");e&&e.remove(),this.dispatchEvent("destroyed",{}),this.currentZoomedImage=null,this.images=[]}}if("undefined"!=typeof window){window.ImageZoom=ImageZoom;const e=()=>{window.imageZoom=new ImageZoom};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",e):e()}"undefined"!=typeof module&&module.exports&&(module.exports={ImageZoom:ImageZoom}),"undefined"!=typeof exports&&(exports.ImageZoom=ImageZoom),document.body.addEventListener("htmx:beforeSwap",e=>{const t=(new DOMParser).parseFromString(e.detail.xhr.responseText,"text/html").documentElement.dataset.theme;t&&(document.documentElement.dataset.theme=t)});